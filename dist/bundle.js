!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=15)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.prototype.hasOwnProperty;function i(e){return"function"==typeof e}function u(e){return void 0===e}function s(e){return"[object String]"===Object.prototype.toString.call(e)}t.has=function(e,t){return r.call(e,t)},t.defaultCompare=function(e,t){return e<t?-1:e===t?0:1},t.defaultEquals=function(e,t){return e===t},t.defaultToString=function(e){return null===e?"COLLECTION_NULL":u(e)?"COLLECTION_UNDEFINED":s(e)?"$s"+e:"$o"+e.toString()},t.makeString=function(e,n){if(void 0===n&&(n=","),null===e)return"COLLECTION_NULL";if(u(e))return"COLLECTION_UNDEFINED";if(s(e))return e.toString();var r="{",i=!0;for(var o in e)t.has(e,o)&&(i?i=!1:r+=n,r=r+o+":"+e[o]);return r+"}"},t.isFunction=i,t.isUndefined=u,t.isString=s,t.reverseCompareFunction=function(e){return u(e)||!i(e)?function(e,t){return e<t?1:e===t?0:-1}:function(t,n){return-1*e(t,n)}},t.compareToEquals=function(e){return function(t,n){return 0===e(t,n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(){function e(e){this.table={},this.nElements=0,this.toStr=e||r.defaultToString}return e.prototype.getValue=function(e){var t=this.table["$"+this.toStr(e)];if(!r.isUndefined(t))return t.value},e.prototype.setValue=function(e,t){if(!r.isUndefined(e)&&!r.isUndefined(t)){var n,i="$"+this.toStr(e),u=this.table[i];return r.isUndefined(u)?(this.nElements++,n=void 0):n=u.value,this.table[i]={key:e,value:t},n}},e.prototype.remove=function(e){var t="$"+this.toStr(e),n=this.table[t];if(!r.isUndefined(n))return delete this.table[t],this.nElements--,n.value},e.prototype.keys=function(){var e=[];for(var t in this.table)if(r.has(this.table,t)){var n=this.table[t];e.push(n.key)}return e},e.prototype.values=function(){var e=[];for(var t in this.table)if(r.has(this.table,t)){var n=this.table[t];e.push(n.value)}return e},e.prototype.forEach=function(e){for(var t in this.table)if(r.has(this.table,t)){var n=this.table[t];if(!1===e(n.key,n.value))return}},e.prototype.containsKey=function(e){return!r.isUndefined(this.getValue(e))},e.prototype.clear=function(){this.table={},this.nElements=0},e.prototype.size=function(){return this.nElements},e.prototype.isEmpty=function(){return this.nElements<=0},e.prototype.toString=function(){var e="{";return this.forEach(function(t,n){e+="\n\t"+t+" : "+n}),e+"\n}"},e}();t.default=i},function(e,t){t.getArg=function(e,t,n){if(t in e)return e[t];if(3===arguments.length)return n;throw new Error('"'+t+'" is a required argument.')};var n=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/,r=/^data:.+\,.+$/;function i(e){var t=e.match(n);return t?{scheme:t[1],auth:t[2],host:t[3],port:t[4],path:t[5]}:null}function u(e){var t="";return e.scheme&&(t+=e.scheme+":"),t+="//",e.auth&&(t+=e.auth+"@"),e.host&&(t+=e.host),e.port&&(t+=":"+e.port),e.path&&(t+=e.path),t}function s(e){var n=e,r=i(e);if(r){if(!r.path)return e;n=r.path}for(var s,o=t.isAbsolute(n),a=n.split(/\/+/),h=0,c=a.length-1;c>=0;c--)"."===(s=a[c])?a.splice(c,1):".."===s?h++:h>0&&(""===s?(a.splice(c+1,h),h=0):(a.splice(c,2),h--));return""===(n=a.join("/"))&&(n=o?"/":"."),r?(r.path=n,u(r)):n}function o(e,t){""===e&&(e="."),""===t&&(t=".");var n=i(t),o=i(e);if(o&&(e=o.path||"/"),n&&!n.scheme)return o&&(n.scheme=o.scheme),u(n);if(n||t.match(r))return t;if(o&&!o.host&&!o.path)return o.host=t,u(o);var a="/"===t.charAt(0)?t:s(e.replace(/\/+$/,"")+"/"+t);return o?(o.path=a,u(o)):a}t.urlParse=i,t.urlGenerate=u,t.normalize=s,t.join=o,t.isAbsolute=function(e){return"/"===e.charAt(0)||n.test(e)},t.relative=function(e,t){""===e&&(e="."),e=e.replace(/\/$/,"");for(var n=0;0!==t.indexOf(e+"/");){var r=e.lastIndexOf("/");if(r<0)return t;if((e=e.slice(0,r)).match(/^([^\/]+:\/)?\/*$/))return t;++n}return Array(n+1).join("../")+t.substr(e.length+1)};var a=!("__proto__"in Object.create(null));function h(e){return e}function c(e){if(!e)return!1;var t=e.length;if(t<9)return!1;if(95!==e.charCodeAt(t-1)||95!==e.charCodeAt(t-2)||111!==e.charCodeAt(t-3)||116!==e.charCodeAt(t-4)||111!==e.charCodeAt(t-5)||114!==e.charCodeAt(t-6)||112!==e.charCodeAt(t-7)||95!==e.charCodeAt(t-8)||95!==e.charCodeAt(t-9))return!1;for(var n=t-10;n>=0;n--)if(36!==e.charCodeAt(n))return!1;return!0}function l(e,t){return e===t?0:null===e?1:null===t?-1:e>t?1:-1}t.toSetString=a?h:function(e){return c(e)?"$"+e:e},t.fromSetString=a?h:function(e){return c(e)?e.slice(1):e},t.compareByOriginalPositions=function(e,t,n){var r=l(e.source,t.source);return 0!==r?r:0!=(r=e.originalLine-t.originalLine)?r:0!=(r=e.originalColumn-t.originalColumn)||n?r:0!=(r=e.generatedColumn-t.generatedColumn)?r:0!=(r=e.generatedLine-t.generatedLine)?r:l(e.name,t.name)},t.compareByGeneratedPositionsDeflated=function(e,t,n){var r=e.generatedLine-t.generatedLine;return 0!==r?r:0!=(r=e.generatedColumn-t.generatedColumn)||n?r:0!==(r=l(e.source,t.source))?r:0!=(r=e.originalLine-t.originalLine)?r:0!=(r=e.originalColumn-t.originalColumn)?r:l(e.name,t.name)},t.compareByGeneratedPositionsInflated=function(e,t){var n=e.generatedLine-t.generatedLine;return 0!==n?n:0!=(n=e.generatedColumn-t.generatedColumn)?n:0!==(n=l(e.source,t.source))?n:0!=(n=e.originalLine-t.originalLine)?n:0!=(n=e.originalColumn-t.originalColumn)?n:l(e.name,t.name)},t.parseSourceMapInput=function(e){return JSON.parse(e.replace(/^\)]}'[^\n]*\n/,""))},t.computeSourceURL=function(e,t,n){if(t=t||"",e&&("/"!==e[e.length-1]&&"/"!==t[0]&&(e+="/"),t=e+t),n){var r=i(n);if(!r)throw new Error("sourceMapURL could not be parsed");if(r.path){var a=r.path.lastIndexOf("/");a>=0&&(r.path=r.path.substring(0,a+1))}t=o(u(r),t)}return s(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);function i(e,t,n){for(var i=n||r.defaultEquals,u=e.length,s=0;s<u;s++)if(i(e[s],t))return s;return-1}t.indexOf=i,t.lastIndexOf=function(e,t,n){for(var i=n||r.defaultEquals,u=e.length-1;u>=0;u--)if(i(e[u],t))return u;return-1},t.contains=function(e,t,n){return i(e,t,n)>=0},t.remove=function(e,t,n){var r=i(e,t,n);return!(r<0||(e.splice(r,1),0))},t.frequency=function(e,t,n){for(var i=n||r.defaultEquals,u=e.length,s=0,o=0;o<u;o++)i(e[o],t)&&s++;return s},t.equals=function(e,t,n){var i=n||r.defaultEquals;if(e.length!==t.length)return!1;for(var u=e.length,s=0;s<u;s++)if(!i(e[s],t[s]))return!1;return!0},t.copy=function(e){return e.concat()},t.swap=function(e,t,n){if(t<0||t>=e.length||n<0||n>=e.length)return!1;var r=e[t];return e[t]=e[n],e[n]=r,!0},t.toString=function(e){return"["+e.toString()+"]"},t.forEach=function(e,t){for(var n=0,r=e;n<r.length;n++)if(!1===t(r[n]))return}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(3),u=function(){function e(){this.firstNode=null,this.lastNode=null,this.nElements=0}return e.prototype.add=function(e,t){if(r.isUndefined(t)&&(t=this.nElements),t<0||t>this.nElements||r.isUndefined(e))return!1;var n=this.createNode(e);if(0===this.nElements||null===this.lastNode)this.firstNode=n,this.lastNode=n;else if(t===this.nElements)this.lastNode.next=n,this.lastNode=n;else if(0===t)n.next=this.firstNode,this.firstNode=n;else{var i=this.nodeAtIndex(t-1);if(null==i)return!1;n.next=i.next,i.next=n}return this.nElements++,!0},e.prototype.first=function(){if(null!==this.firstNode)return this.firstNode.element},e.prototype.last=function(){if(null!==this.lastNode)return this.lastNode.element},e.prototype.elementAtIndex=function(e){var t=this.nodeAtIndex(e);if(null!==t)return t.element},e.prototype.indexOf=function(e,t){var n=t||r.defaultEquals;if(r.isUndefined(e))return-1;for(var i=this.firstNode,u=0;null!==i;){if(n(i.element,e))return u;u++,i=i.next}return-1},e.prototype.contains=function(e,t){return this.indexOf(e,t)>=0},e.prototype.remove=function(e,t){var n=t||r.defaultEquals;if(this.nElements<1||r.isUndefined(e))return!1;for(var i=null,u=this.firstNode;null!==u;){if(n(u.element,e))return null==i?(this.firstNode=u.next,u===this.lastNode&&(this.lastNode=null)):u===this.lastNode?(this.lastNode=i,i.next=u.next,u.next=null):(i.next=u.next,u.next=null),this.nElements--,!0;i=u,u=u.next}return!1},e.prototype.clear=function(){this.firstNode=null,this.lastNode=null,this.nElements=0},e.prototype.equals=function(t,n){var i=n||r.defaultEquals;return t instanceof e&&(this.size()===t.size()&&this.equalsAux(this.firstNode,t.firstNode,i))},e.prototype.equalsAux=function(e,t,n){for(;null!==e&&null!==t;){if(!n(e.element,t.element))return!1;e=e.next,t=t.next}return!0},e.prototype.removeElementAtIndex=function(e){if(!(e<0||e>=this.nElements||null===this.firstNode||null===this.lastNode)){var t;if(1===this.nElements)t=this.firstNode.element,this.firstNode=null,this.lastNode=null;else{var n=this.nodeAtIndex(e-1);null===n?(t=this.firstNode.element,this.firstNode=this.firstNode.next):n.next===this.lastNode&&(t=this.lastNode.element,this.lastNode=n),null!==n&&null!==n.next&&(t=n.next.element,n.next=n.next.next)}return this.nElements--,t}},e.prototype.forEach=function(e){for(var t=this.firstNode;null!==t&&!1!==e(t.element);)t=t.next},e.prototype.reverse=function(){for(var e=null,t=this.firstNode,n=null;null!==t;)n=t.next,t.next=e,e=t,t=n;n=this.firstNode,this.firstNode=this.lastNode,this.lastNode=n},e.prototype.toArray=function(){for(var e=[],t=this.firstNode;null!==t;)e.push(t.element),t=t.next;return e},e.prototype.size=function(){return this.nElements},e.prototype.isEmpty=function(){return this.nElements<=0},e.prototype.toString=function(){return i.toString(this.toArray())},e.prototype.nodeAtIndex=function(e){if(e<0||e>=this.nElements)return null;if(e===this.nElements-1)return this.lastNode;for(var t=this.firstNode,n=0;n<e&&null!=t;n++)t=t.next;return t},e.prototype.createNode=function(e){return{element:e,next:null}},e}();t.default=u},function(e,t,n){(function(e){!function(){"use strict";var r,i,u,s,o,a,h,c,l,p,d,f,D,m,A,E,C,g,x,F,y,v,S,B,b,w;function k(e){return G.Statement.hasOwnProperty(e.type)}o=n(18),a=n(20),r=o.Syntax,u={"||":(i={Sequence:0,Yield:1,Assignment:1,Conditional:2,ArrowFunction:2,LogicalOR:3,LogicalAND:4,BitwiseOR:5,BitwiseXOR:6,BitwiseAND:7,Equality:8,Relational:9,BitwiseSHIFT:10,Additive:11,Multiplicative:12,Await:13,Unary:13,Postfix:14,Call:15,New:16,TaggedTemplate:17,Member:18,Primary:19}).LogicalOR,"&&":i.LogicalAND,"|":i.BitwiseOR,"^":i.BitwiseXOR,"&":i.BitwiseAND,"==":i.Equality,"!=":i.Equality,"===":i.Equality,"!==":i.Equality,is:i.Equality,isnt:i.Equality,"<":i.Relational,">":i.Relational,"<=":i.Relational,">=":i.Relational,in:i.Relational,instanceof:i.Relational,"<<":i.BitwiseSHIFT,">>":i.BitwiseSHIFT,">>>":i.BitwiseSHIFT,"+":i.Additive,"-":i.Additive,"*":i.Multiplicative,"%":i.Multiplicative,"/":i.Multiplicative};var I=7,T=1;function _(e,t){var n="";for(t|=0;t>0;t>>>=1,e+=e)1&t&&(n+=e);return n}function N(e){var t=e.length;return t&&a.code.isLineTerminator(e.charCodeAt(t-1))}function P(e,t){var n;for(n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}function M(e,t){var n,r;function i(e){return"object"==typeof e&&e instanceof Object&&!(e instanceof RegExp)}for(n in t)t.hasOwnProperty(n)&&(i(r=t[n])?i(e[n])?M(e[n],r):e[n]=M({},r):e[n]=r);return e}function L(e,t){return 8232==(-2&e)?(t?"u":"\\u")+(8232===e?"2028":"2029"):10===e||13===e?(t?"":"\\")+(10===e?"n":"r"):String.fromCharCode(e)}function O(e,t){var n;return 8===e?"\\b":12===e?"\\f":9===e?"\\t":(n=e.toString(16).toUpperCase(),l||e>255?"\\u"+"0000".slice(n.length)+n:0!==e||a.code.isDecimalDigit(t)?11===e?"\\x0B":"\\x"+"00".slice(n.length)+n:"\\0")}function R(e){if(92===e)return"\\\\";if(10===e)return"\\n";if(13===e)return"\\r";if(8232===e)return"\\u2028";if(8233===e)return"\\u2029";throw new Error("Incorrectly classified character")}function U(e,t){if(!v)return Array.isArray(e)?function e(t){var n,r,i,u="";for(n=0,r=t.length;n<r;++n)i=t[n],u+=Array.isArray(i)?e(i):i;return u}(e):e;if(null==t){if(e instanceof s)return e;t={}}return null==t.loc?new s(null,null,v,e,t.name||null):new s(t.loc.start.line,t.loc.start.column,!0===v?t.loc.source||null:v,e,t.name||null)}function z(){return A||" "}function X(e,t){var n,r,i,u;return 0===(n=U(e).toString()).length?[t]:0===(r=U(t).toString()).length?[e]:(i=n.charCodeAt(n.length-1),u=r.charCodeAt(0),(43===i||45===i)&&i===u||a.code.isIdentifierPartES5(i)&&a.code.isIdentifierPartES5(u)||47===i&&105===u?[e,z(),t]:a.code.isWhiteSpace(i)||a.code.isLineTerminator(i)||a.code.isWhiteSpace(u)||a.code.isLineTerminator(u)?[e,t]:[e,A,t])}function j(e){return[h,e]}function J(e){var t;t=h,e(h+=c),h=t}function q(e,t){if("Line"===e.type){if(N(e.value))return"//"+e.value;var n="//"+e.value;return B||(n+="\n"),n}return F.format.indent.adjustMultilineComment&&/[\n\r]/.test(e.value)?function(e,t){var n,r,i,u,s,o,c,l;for(n=e.split(/\r\n|[\r\n]/),o=Number.MAX_VALUE,r=1,i=n.length;r<i;++r){for(u=n[r],s=0;s<u.length&&a.code.isWhiteSpace(u.charCodeAt(s));)++s;o>s&&(o=s)}for(void 0!==t?(c=h,"*"===n[1][o]&&(t+=" "),h=t):(1&o&&--o,c=h),r=1,i=n.length;r<i;++r)l=U(j(n[r].slice(o))),n[r]=v?l.join(""):l;return h=c,n.join("\n")}("/*"+e.value+"*/",t):"/*"+e.value+"*/"}function K(e,t){var n,i,u,s,o,l,p,d,f,D,m,A;if(e.leadingComments&&e.leadingComments.length>0){if(s=t,B){for(t=[],d=(u=e.leadingComments[0]).extendedRange,f=u.range,(A=((m=S.substring(d[0],f[0])).match(/\n/g)||[]).length)>0?(t.push(_("\n",A)),t.push(j(q(u)))):(t.push(m),t.push(q(u))),D=f,n=1,i=e.leadingComments.length;n<i;n++)f=(u=e.leadingComments[n]).range,A=(S.substring(D[1],f[0]).match(/\n/g)||[]).length,t.push(_("\n",A)),t.push(j(q(u))),D=f;A=(S.substring(f[1],d[1]).match(/\n/g)||[]).length,t.push(_("\n",A))}else for(u=e.leadingComments[0],t=[],g&&e.type===r.Program&&0===e.body.length&&t.push("\n"),t.push(q(u)),N(U(t).toString())||t.push("\n"),n=1,i=e.leadingComments.length;n<i;++n)N(U(p=[q(u=e.leadingComments[n])]).toString())||p.push("\n"),t.push(j(p));t.push(j(s))}if(e.trailingComments)if(B)d=(u=e.trailingComments[0]).extendedRange,f=u.range,(A=((m=S.substring(d[0],f[0])).match(/\n/g)||[]).length)>0?(t.push(_("\n",A)),t.push(j(q(u)))):(t.push(m),t.push(q(u)));else for(o=!N(U(t).toString()),l=_(" ",function(e){var t;for(t=e.length-1;t>=0&&!a.code.isLineTerminator(e.charCodeAt(t));--t);return e.length-1-t}(U([h,t,c]).toString())),n=0,i=e.trailingComments.length;n<i;++n)u=e.trailingComments[n],o?(t=0===n?[t,c]:[t,l]).push(q(u,l)):t=[t,j(q(u))],n===i-1||N(U(t).toString())||(t=[t,"\n"]);return t}function H(e,t,n){var r,i=0;for(r=e;r<t;r++)"\n"===S[r]&&i++;for(r=1;r<i;r++)n.push(m)}function W(e,t,n){return t<n?["(",e,")"]:e}function V(e){var t,n,r;for(t=1,n=(r=e.split(/\r\n|\n/)).length;t<n;t++)r[t]=m+h+r[t];return r}function G(){}function Y(e){return U(e.name,e)}function $(e,t){return e.async?"async"+(t?z():A):""}function Q(e){return e.generator&&!F.moz.starlessGenerator?"*"+A:""}function Z(e){var t=e.value,n="";return t.async&&(n+=$(t,!e.computed)),t.generator&&(n+=Q(t)?"*":""),n}function ee(e){var t;if(t=new G,k(e))return t.generateStatement(e,T);if(function(e){return G.Expression.hasOwnProperty(e.type)}(e))return t.generateExpression(e,i.Sequence,I);throw new Error("Unknown node type: "+e.type)}G.prototype.maybeBlock=function(e,t){var n,i,u=this;return i=!F.comment||!e.leadingComments,e.type===r.BlockStatement&&i?[A,this.generateStatement(e,t)]:e.type===r.EmptyStatement&&i?";":(J(function(){n=[m,j(u.generateStatement(e,t))]}),n)},G.prototype.maybeBlockSuffix=function(e,t){var n=N(U(t).toString());return e.type!==r.BlockStatement||F.comment&&e.leadingComments||n?n?[t,h]:[t,m,h]:[t,A]},G.prototype.generatePattern=function(e,t,n){return e.type===r.Identifier?Y(e):this.generateExpression(e,t,n)},G.prototype.generateFunctionParams=function(e){var t,n,u,s;if(s=!1,e.type!==r.ArrowFunctionExpression||e.rest||e.defaults&&0!==e.defaults.length||1!==e.params.length||e.params[0].type!==r.Identifier){for((u=e.type===r.ArrowFunctionExpression?[$(e,!1)]:[]).push("("),e.defaults&&(s=!0),t=0,n=e.params.length;t<n;++t)s&&e.defaults[t]?u.push(this.generateAssignment(e.params[t],e.defaults[t],"=",i.Assignment,I)):u.push(this.generatePattern(e.params[t],i.Assignment,I)),t+1<n&&u.push(","+A);e.rest&&(e.params.length&&u.push(","+A),u.push("..."),u.push(Y(e.rest))),u.push(")")}else u=[$(e,!0),Y(e.params[0])];return u},G.prototype.generateFunctionBody=function(e){var t,n;return t=this.generateFunctionParams(e),e.type===r.ArrowFunctionExpression&&(t.push(A),t.push("=>")),e.expression?(t.push(A),"{"===(n=this.generateExpression(e.body,i.Assignment,I)).toString().charAt(0)&&(n=["(",n,")"]),t.push(n)):t.push(this.maybeBlock(e.body,9)),t},G.prototype.generateIterationForStatement=function(e,t,n){var u=["for"+A+(t.await?"await"+A:"")+"("],s=this;return J(function(){t.left.type===r.VariableDeclaration?J(function(){u.push(t.left.kind+z()),u.push(s.generateStatement(t.left.declarations[0],0))}):u.push(s.generateExpression(t.left,i.Call,I)),u=X(u,e),u=[X(u,s.generateExpression(t.right,i.Assignment,I)),")"]}),u.push(this.maybeBlock(t.body,n)),u},G.prototype.generatePropertyKey=function(e,t){var n=[];return t&&n.push("["),n.push(this.generateExpression(e,i.Sequence,I)),t&&n.push("]"),n},G.prototype.generateAssignment=function(e,t,n,r,u){return i.Assignment<r&&(u|=1),W([this.generateExpression(e,i.Call,u),A+n+A,this.generateExpression(t,i.Assignment,u)],i.Assignment,r)},G.prototype.semicolon=function(e){return!C&&32&e?"":";"},G.Statement={BlockStatement:function(e,t){var n,r,i=["{",m],u=this;return J(function(){var s,o,a,h;for(0===e.body.length&&B&&(n=e.range)[1]-n[0]>2&&("\n"===(r=S.substring(n[0]+1,n[1]-1))[0]&&(i=["{"]),i.push(r)),h=T,8&t&&(h|=16),s=0,o=e.body.length;s<o;++s)B&&(0===s&&(e.body[0].leadingComments&&(n=e.body[0].leadingComments[0].extendedRange,"\n"===(r=S.substring(n[0],n[1]))[0]&&(i=["{"])),e.body[0].leadingComments||H(e.range[0],e.body[0].range[0],i)),s>0&&(e.body[s-1].trailingComments||e.body[s].leadingComments||H(e.body[s-1].range[1],e.body[s].range[0],i))),s===o-1&&(h|=32),a=e.body[s].leadingComments&&B?u.generateStatement(e.body[s],h):j(u.generateStatement(e.body[s],h)),i.push(a),N(U(a).toString())||B&&s<o-1&&e.body[s+1].leadingComments||i.push(m),B&&s===o-1&&(e.body[s].trailingComments||H(e.body[s].range[1],e.range[1],i))}),i.push(j("}")),i},BreakStatement:function(e,t){return e.label?"break "+e.label.name+this.semicolon(t):"break"+this.semicolon(t)},ContinueStatement:function(e,t){return e.label?"continue "+e.label.name+this.semicolon(t):"continue"+this.semicolon(t)},ClassBody:function(e,t){var n=["{",m],r=this;return J(function(t){var u,s;for(u=0,s=e.body.length;u<s;++u)n.push(t),n.push(r.generateExpression(e.body[u],i.Sequence,I)),u+1<s&&n.push(m)}),N(U(n).toString())||n.push(m),n.push(h),n.push("}"),n},ClassDeclaration:function(e,t){var n,r;return n=["class"],e.id&&(n=X(n,this.generateExpression(e.id,i.Sequence,I))),e.superClass&&(r=X("extends",this.generateExpression(e.superClass,i.Assignment,I)),n=X(n,r)),n.push(A),n.push(this.generateStatement(e.body,33)),n},DirectiveStatement:function(e,t){return F.raw&&e.raw?e.raw+this.semicolon(t):function(e){var t,n,r,i;for(i="double"===f?'"':"'",t=0,n=e.length;t<n;++t){if(39===(r=e.charCodeAt(t))){i='"';break}if(34===r){i="'";break}92===r&&++t}return i+e+i}(e.directive)+this.semicolon(t)},DoWhileStatement:function(e,t){var n=X("do",this.maybeBlock(e.body,T));return X(n=this.maybeBlockSuffix(e.body,n),["while"+A+"(",this.generateExpression(e.test,i.Sequence,I),")"+this.semicolon(t)])},CatchClause:function(e,t){var n,r=this;return J(function(){var t;n=["catch"+A+"(",r.generateExpression(e.param,i.Sequence,I),")"],e.guard&&(t=r.generateExpression(e.guard,i.Sequence,I),n.splice(2,0," if ",t))}),n.push(this.maybeBlock(e.body,T)),n},DebuggerStatement:function(e,t){return"debugger"+this.semicolon(t)},EmptyStatement:function(e,t){return";"},ExportDefaultDeclaration:function(e,t){var n,r=["export"];return n=32&t?33:T,r=X(r,"default"),r=k(e.declaration)?X(r,this.generateStatement(e.declaration,n)):X(r,this.generateExpression(e.declaration,i.Assignment,I)+this.semicolon(t))},ExportNamedDeclaration:function(e,t){var n,u=["export"],s=this;return n=32&t?33:T,e.declaration?X(u,this.generateStatement(e.declaration,n)):(e.specifiers&&(0===e.specifiers.length?u=X(u,"{"+A+"}"):e.specifiers[0].type===r.ExportBatchSpecifier?u=X(u,this.generateExpression(e.specifiers[0],i.Sequence,I)):(u=X(u,"{"),J(function(t){var n,r;for(u.push(m),n=0,r=e.specifiers.length;n<r;++n)u.push(t),u.push(s.generateExpression(e.specifiers[n],i.Sequence,I)),n+1<r&&u.push(","+m)}),N(U(u).toString())||u.push(m),u.push(h+"}")),e.source?u=X(u,["from"+A,this.generateExpression(e.source,i.Sequence,I),this.semicolon(t)]):u.push(this.semicolon(t))),u)},ExportAllDeclaration:function(e,t){return["export"+A,"*"+A,"from"+A,this.generateExpression(e.source,i.Sequence,I),this.semicolon(t)]},ExpressionStatement:function(e,t){var n,u;return 123===(u=U(n=[this.generateExpression(e.expression,i.Sequence,I)]).toString()).charCodeAt(0)||function(e){var t;return"class"===e.slice(0,5)&&(123===(t=e.charCodeAt(5))||a.code.isWhiteSpace(t)||a.code.isLineTerminator(t))}(u)||function(e){var t;return"function"===e.slice(0,8)&&(40===(t=e.charCodeAt(8))||a.code.isWhiteSpace(t)||42===t||a.code.isLineTerminator(t))}(u)||function(e){var t,n,r;if("async"!==e.slice(0,5))return!1;if(!a.code.isWhiteSpace(e.charCodeAt(5)))return!1;for(n=6,r=e.length;n<r&&a.code.isWhiteSpace(e.charCodeAt(n));++n);return n!==r&&"function"===e.slice(n,n+8)&&(40===(t=e.charCodeAt(n+8))||a.code.isWhiteSpace(t)||42===t||a.code.isLineTerminator(t))}(u)||x&&16&t&&e.expression.type===r.Literal&&"string"==typeof e.expression.value?n=["(",n,")"+this.semicolon(t)]:n.push(this.semicolon(t)),n},ImportDeclaration:function(e,t){var n,u,s=this;return 0===e.specifiers.length?["import",A,this.generateExpression(e.source,i.Sequence,I),this.semicolon(t)]:(n=["import"],u=0,e.specifiers[u].type===r.ImportDefaultSpecifier&&(n=X(n,[this.generateExpression(e.specifiers[u],i.Sequence,I)]),++u),e.specifiers[u]&&(0!==u&&n.push(","),e.specifiers[u].type===r.ImportNamespaceSpecifier?n=X(n,[A,this.generateExpression(e.specifiers[u],i.Sequence,I)]):(n.push(A+"{"),e.specifiers.length-u==1?(n.push(A),n.push(this.generateExpression(e.specifiers[u],i.Sequence,I)),n.push(A+"}"+A)):(J(function(t){var r,o;for(n.push(m),r=u,o=e.specifiers.length;r<o;++r)n.push(t),n.push(s.generateExpression(e.specifiers[r],i.Sequence,I)),r+1<o&&n.push(","+m)}),N(U(n).toString())||n.push(m),n.push(h+"}"+A)))),n=X(n,["from"+A,this.generateExpression(e.source,i.Sequence,I),this.semicolon(t)]))},VariableDeclarator:function(e,t){var n=1&t?I:6;return e.init?[this.generateExpression(e.id,i.Assignment,n),A,"=",A,this.generateExpression(e.init,i.Assignment,n)]:this.generatePattern(e.id,i.Assignment,n)},VariableDeclaration:function(e,t){var n,r,i,u,s,o=this;function a(){for(u=e.declarations[0],F.comment&&u.leadingComments?(n.push("\n"),n.push(j(o.generateStatement(u,s)))):(n.push(z()),n.push(o.generateStatement(u,s))),r=1,i=e.declarations.length;r<i;++r)u=e.declarations[r],F.comment&&u.leadingComments?(n.push(","+m),n.push(j(o.generateStatement(u,s)))):(n.push(","+A),n.push(o.generateStatement(u,s)))}return n=[e.kind],s=1&t?T:0,e.declarations.length>1?J(a):a(),n.push(this.semicolon(t)),n},ThrowStatement:function(e,t){return[X("throw",this.generateExpression(e.argument,i.Sequence,I)),this.semicolon(t)]},TryStatement:function(e,t){var n,r,i,u;if(n=["try",this.maybeBlock(e.block,T)],n=this.maybeBlockSuffix(e.block,n),e.handlers)for(r=0,i=e.handlers.length;r<i;++r)n=X(n,this.generateStatement(e.handlers[r],T)),(e.finalizer||r+1!==i)&&(n=this.maybeBlockSuffix(e.handlers[r].body,n));else{for(r=0,i=(u=e.guardedHandlers||[]).length;r<i;++r)n=X(n,this.generateStatement(u[r],T)),(e.finalizer||r+1!==i)&&(n=this.maybeBlockSuffix(u[r].body,n));if(e.handler)if(Array.isArray(e.handler))for(r=0,i=e.handler.length;r<i;++r)n=X(n,this.generateStatement(e.handler[r],T)),(e.finalizer||r+1!==i)&&(n=this.maybeBlockSuffix(e.handler[r].body,n));else n=X(n,this.generateStatement(e.handler,T)),e.finalizer&&(n=this.maybeBlockSuffix(e.handler.body,n))}return e.finalizer&&(n=X(n,["finally",this.maybeBlock(e.finalizer,T)])),n},SwitchStatement:function(e,t){var n,r,u,s,o,a=this;if(J(function(){n=["switch"+A+"(",a.generateExpression(e.discriminant,i.Sequence,I),")"+A+"{"+m]}),e.cases)for(o=T,u=0,s=e.cases.length;u<s;++u)u===s-1&&(o|=32),r=j(this.generateStatement(e.cases[u],o)),n.push(r),N(U(r).toString())||n.push(m);return n.push(j("}")),n},SwitchCase:function(e,t){var n,u,s,o,a,h=this;return J(function(){for(n=e.test?[X("case",h.generateExpression(e.test,i.Sequence,I)),":"]:["default:"],s=0,(o=e.consequent.length)&&e.consequent[0].type===r.BlockStatement&&(u=h.maybeBlock(e.consequent[0],T),n.push(u),s=1),s===o||N(U(n).toString())||n.push(m),a=T;s<o;++s)s===o-1&&32&t&&(a|=32),u=j(h.generateStatement(e.consequent[s],a)),n.push(u),s+1===o||N(U(u).toString())||n.push(m)}),n},IfStatement:function(e,t){var n,u,s=this;return J(function(){n=["if"+A+"(",s.generateExpression(e.test,i.Sequence,I),")"]}),u=T,32&t&&(u|=32),e.alternate?(n.push(this.maybeBlock(e.consequent,T)),n=this.maybeBlockSuffix(e.consequent,n),n=e.alternate.type===r.IfStatement?X(n,["else ",this.generateStatement(e.alternate,u)]):X(n,X("else",this.maybeBlock(e.alternate,u)))):n.push(this.maybeBlock(e.consequent,u)),n},ForStatement:function(e,t){var n,u=this;return J(function(){n=["for"+A+"("],e.init?e.init.type===r.VariableDeclaration?n.push(u.generateStatement(e.init,0)):(n.push(u.generateExpression(e.init,i.Sequence,6)),n.push(";")):n.push(";"),e.test?(n.push(A),n.push(u.generateExpression(e.test,i.Sequence,I)),n.push(";")):n.push(";"),e.update?(n.push(A),n.push(u.generateExpression(e.update,i.Sequence,I)),n.push(")")):n.push(")")}),n.push(this.maybeBlock(e.body,32&t?33:T)),n},ForInStatement:function(e,t){return this.generateIterationForStatement("in",e,32&t?33:T)},ForOfStatement:function(e,t){return this.generateIterationForStatement("of",e,32&t?33:T)},LabeledStatement:function(e,t){return[e.label.name+":",this.maybeBlock(e.body,32&t?33:T)]},Program:function(e,t){var n,r,i,u,s;for(u=e.body.length,n=[g&&u>0?"\n":""],s=17,i=0;i<u;++i)g||i!==u-1||(s|=32),B&&(0===i&&(e.body[0].leadingComments||H(e.range[0],e.body[i].range[0],n)),i>0&&(e.body[i-1].trailingComments||e.body[i].leadingComments||H(e.body[i-1].range[1],e.body[i].range[0],n))),r=j(this.generateStatement(e.body[i],s)),n.push(r),i+1<u&&!N(U(r).toString())&&(B&&e.body[i+1].leadingComments||n.push(m)),B&&i===u-1&&(e.body[i].trailingComments||H(e.body[i].range[1],e.range[1],n));return n},FunctionDeclaration:function(e,t){return[$(e,!0),"function",Q(e)||z(),e.id?Y(e.id):"",this.generateFunctionBody(e)]},ReturnStatement:function(e,t){return e.argument?[X("return",this.generateExpression(e.argument,i.Sequence,I)),this.semicolon(t)]:["return"+this.semicolon(t)]},WhileStatement:function(e,t){var n,r=this;return J(function(){n=["while"+A+"(",r.generateExpression(e.test,i.Sequence,I),")"]}),n.push(this.maybeBlock(e.body,32&t?33:T)),n},WithStatement:function(e,t){var n,r=this;return J(function(){n=["with"+A+"(",r.generateExpression(e.object,i.Sequence,I),")"]}),n.push(this.maybeBlock(e.body,32&t?33:T)),n}},P(G.prototype,G.Statement),G.Expression={SequenceExpression:function(e,t,n){var r,u,s;for(i.Sequence<t&&(n|=1),r=[],u=0,s=e.expressions.length;u<s;++u)r.push(this.generateExpression(e.expressions[u],i.Assignment,n)),u+1<s&&r.push(","+A);return W(r,i.Sequence,t)},AssignmentExpression:function(e,t,n){return this.generateAssignment(e.left,e.right,e.operator,t,n)},ArrowFunctionExpression:function(e,t,n){return W(this.generateFunctionBody(e),i.ArrowFunction,t)},ConditionalExpression:function(e,t,n){return i.Conditional<t&&(n|=1),W([this.generateExpression(e.test,i.LogicalOR,n),A+"?"+A,this.generateExpression(e.consequent,i.Assignment,n),A+":"+A,this.generateExpression(e.alternate,i.Assignment,n)],i.Conditional,t)},LogicalExpression:function(e,t,n){return this.BinaryExpression(e,t,n)},BinaryExpression:function(e,t,n){var r,i,s,o;return(i=u[e.operator])<t&&(n|=1),r=47===(o=(s=this.generateExpression(e.left,i,n)).toString()).charCodeAt(o.length-1)&&a.code.isIdentifierPartES5(e.operator.charCodeAt(0))?[s,z(),e.operator]:X(s,e.operator),s=this.generateExpression(e.right,i+1,n),"/"===e.operator&&"/"===s.toString().charAt(0)||"<"===e.operator.slice(-1)&&"!--"===s.toString().slice(0,3)?(r.push(z()),r.push(s)):r=X(r,s),"in"!==e.operator||1&n?W(r,i,t):["(",r,")"]},CallExpression:function(e,t,n){var r,u,s;for((r=[this.generateExpression(e.callee,i.Call,3)]).push("("),u=0,s=e.arguments.length;u<s;++u)r.push(this.generateExpression(e.arguments[u],i.Assignment,I)),u+1<s&&r.push(","+A);return r.push(")"),2&n?W(r,i.Call,t):["(",r,")"]},NewExpression:function(e,t,n){var r,u,s,o,a;if(u=e.arguments.length,a=4&n&&!E&&0===u?5:1,r=X("new",this.generateExpression(e.callee,i.New,a)),!(4&n)||E||u>0){for(r.push("("),s=0,o=u;s<o;++s)r.push(this.generateExpression(e.arguments[s],i.Assignment,I)),s+1<o&&r.push(","+A);r.push(")")}return W(r,i.New,t)},MemberExpression:function(e,t,n){var u,s;return u=[this.generateExpression(e.object,i.Call,2&n?3:1)],e.computed?(u.push("["),u.push(this.generateExpression(e.property,i.Sequence,2&n?I:5)),u.push("]")):(e.object.type===r.Literal&&"number"==typeof e.object.value&&(s=U(u).toString()).indexOf(".")<0&&!/[eExX]/.test(s)&&a.code.isDecimalDigit(s.charCodeAt(s.length-1))&&!(s.length>=2&&48===s.charCodeAt(0))&&u.push(" "),u.push("."),u.push(Y(e.property))),W(u,i.Member,t)},MetaProperty:function(e,t,n){var r;return(r=[]).push("string"==typeof e.meta?e.meta:Y(e.meta)),r.push("."),r.push("string"==typeof e.property?e.property:Y(e.property)),W(r,i.Member,t)},UnaryExpression:function(e,t,n){var r,u,s,o,h;return u=this.generateExpression(e.argument,i.Unary,I),""===A?r=X(e.operator,u):(r=[e.operator],e.operator.length>2?r=X(r,u):(h=(o=U(r).toString()).charCodeAt(o.length-1),s=u.toString().charCodeAt(0),(43===h||45===h)&&h===s||a.code.isIdentifierPartES5(h)&&a.code.isIdentifierPartES5(s)?(r.push(z()),r.push(u)):r.push(u))),W(r,i.Unary,t)},YieldExpression:function(e,t,n){var r;return r=e.delegate?"yield*":"yield",e.argument&&(r=X(r,this.generateExpression(e.argument,i.Yield,I))),W(r,i.Yield,t)},AwaitExpression:function(e,t,n){return W(X(e.all?"await*":"await",this.generateExpression(e.argument,i.Await,I)),i.Await,t)},UpdateExpression:function(e,t,n){return e.prefix?W([e.operator,this.generateExpression(e.argument,i.Unary,I)],i.Unary,t):W([this.generateExpression(e.argument,i.Postfix,I),e.operator],i.Postfix,t)},FunctionExpression:function(e,t,n){var r=[$(e,!0),"function"];return e.id?(r.push(Q(e)||z()),r.push(Y(e.id))):r.push(Q(e)||A),r.push(this.generateFunctionBody(e)),r},ArrayPattern:function(e,t,n){return this.ArrayExpression(e,t,n,!0)},ArrayExpression:function(e,t,n,r){var u,s,o=this;return e.elements.length?(s=!r&&e.elements.length>1,u=["[",s?m:""],J(function(t){var n,r;for(n=0,r=e.elements.length;n<r;++n)e.elements[n]?(u.push(s?t:""),u.push(o.generateExpression(e.elements[n],i.Assignment,I))):(s&&u.push(t),n+1===r&&u.push(",")),n+1<r&&u.push(","+(s?m:A))}),s&&!N(U(u).toString())&&u.push(m),u.push(s?h:""),u.push("]"),u):"[]"},RestElement:function(e,t,n){return"..."+this.generatePattern(e.argument)},ClassExpression:function(e,t,n){var r,u;return r=["class"],e.id&&(r=X(r,this.generateExpression(e.id,i.Sequence,I))),e.superClass&&(u=X("extends",this.generateExpression(e.superClass,i.Assignment,I)),r=X(r,u)),r.push(A),r.push(this.generateStatement(e.body,33)),r},MethodDefinition:function(e,t,n){var r,i;return r=e.static?["static"+A]:[],i="get"===e.kind||"set"===e.kind?[X(e.kind,this.generatePropertyKey(e.key,e.computed)),this.generateFunctionBody(e.value)]:[Z(e),this.generatePropertyKey(e.key,e.computed),this.generateFunctionBody(e.value)],X(r,i)},Property:function(e,t,n){return"get"===e.kind||"set"===e.kind?[e.kind,z(),this.generatePropertyKey(e.key,e.computed),this.generateFunctionBody(e.value)]:e.shorthand?"AssignmentPattern"===e.value.type?this.AssignmentPattern(e.value,i.Sequence,I):this.generatePropertyKey(e.key,e.computed):e.method?[Z(e),this.generatePropertyKey(e.key,e.computed),this.generateFunctionBody(e.value)]:[this.generatePropertyKey(e.key,e.computed),":"+A,this.generateExpression(e.value,i.Assignment,I)]},ObjectExpression:function(e,t,n){var r,u,s,o,a=this;return e.properties.length?(r=e.properties.length>1,J(function(){s=a.generateExpression(e.properties[0],i.Sequence,I)}),r||(o=U(s).toString(),/[\r\n]/g.test(o))?(J(function(t){var n,o;if(u=["{",m,t,s],r)for(u.push(","+m),n=1,o=e.properties.length;n<o;++n)u.push(t),u.push(a.generateExpression(e.properties[n],i.Sequence,I)),n+1<o&&u.push(","+m)}),N(U(u).toString())||u.push(m),u.push(h),u.push("}"),u):["{",A,s,A,"}"]):"{}"},AssignmentPattern:function(e,t,n){return this.generateAssignment(e.left,e.right,"=",t,n)},ObjectPattern:function(e,t,n){var u,s,o,a,c=this;if(!e.properties.length)return"{}";if(a=!1,1===e.properties.length)e.properties[0].value.type!==r.Identifier&&(a=!0);else for(s=0,o=e.properties.length;s<o;++s)if(!e.properties[s].shorthand){a=!0;break}return u=["{",a?m:""],J(function(t){var n,r;for(n=0,r=e.properties.length;n<r;++n)u.push(a?t:""),u.push(c.generateExpression(e.properties[n],i.Sequence,I)),n+1<r&&u.push(","+(a?m:A))}),a&&!N(U(u).toString())&&u.push(m),u.push(a?h:""),u.push("}"),u},ThisExpression:function(e,t,n){return"this"},Super:function(e,t,n){return"super"},Identifier:function(e,t,n){return Y(e)},ImportDefaultSpecifier:function(e,t,n){return Y(e.id||e.local)},ImportNamespaceSpecifier:function(e,t,n){var r=["*"],i=e.id||e.local;return i&&r.push(A+"as"+z()+Y(i)),r},ImportSpecifier:function(e,t,n){var r=e.imported,i=[r.name],u=e.local;return u&&u.name!==r.name&&i.push(z()+"as"+z()+Y(u)),i},ExportSpecifier:function(e,t,n){var r=e.local,i=[r.name],u=e.exported;return u&&u.name!==r.name&&i.push(z()+"as"+z()+Y(u)),i},Literal:function(e,t,n){var i;if(e.hasOwnProperty("raw")&&y&&F.raw)try{if((i=y(e.raw).body[0].expression).type===r.Literal&&i.value===e.value)return e.raw}catch(e){}return null===e.value?"null":"string"==typeof e.value?function(e){var t,n,r,i,u,s="",o=0,h=0;for(t=0,n=e.length;t<n;++t){if(39===(r=e.charCodeAt(t)))++o;else if(34===r)++h;else if(47===r&&l)s+="\\";else{if(a.code.isLineTerminator(r)||92===r){s+=R(r);continue}if(!a.code.isIdentifierPartES5(r)&&(l&&r<32||!l&&!D&&(r<32||r>126))){s+=O(r,e.charCodeAt(t+1));continue}}s+=String.fromCharCode(r)}if(u=(i=!("double"===f||"auto"===f&&h<o))?"'":'"',!(i?o:h))return u+s+u;for(e=s,s=u,t=0,n=e.length;t<n;++t)(39===(r=e.charCodeAt(t))&&i||34===r&&!i)&&(s+="\\"),s+=String.fromCharCode(r);return s+u}(e.value):"number"==typeof e.value?function(e){var t,n,r,i,u;if(e!=e)throw new Error("Numeric literal whose value is NaN");if(e<0||0===e&&1/e<0)throw new Error("Numeric literal whose value is negative");if(e===1/0)return l?"null":p?"1e400":"1e+400";if(t=""+e,!p||t.length<3)return t;for(n=t.indexOf("."),l||48!==t.charCodeAt(0)||1!==n||(n=0,t=t.slice(1)),r=t,t=t.replace("e+","e"),i=0,(u=r.indexOf("e"))>0&&(i=+r.slice(u+1),r=r.slice(0,u)),n>=0&&(i-=r.length-n-1,r=+(r.slice(0,n)+r.slice(n+1))+""),u=0;48===r.charCodeAt(r.length+u-1);)--u;return 0!==u&&(i-=u,r=r.slice(0,u)),0!==i&&(r+="e"+i),(r.length<t.length||d&&e>1e12&&Math.floor(e)===e&&(r="0x"+e.toString(16)).length<t.length)&&+r===e&&(t=r),t}(e.value):"boolean"==typeof e.value?e.value?"true":"false":e.regex?"/"+e.regex.pattern+"/"+e.regex.flags:function(e){var t,n,r,i,u,s,o,a;if(n=e.toString(),e.source){if(!(t=n.match(/\/([^\/]*)$/)))return n;for(r=t[1],n="",o=!1,a=!1,i=0,u=e.source.length;i<u;++i)s=e.source.charCodeAt(i),a?(n+=L(s,a),a=!1):(o?93===s&&(o=!1):47===s?n+="\\":91===s&&(o=!0),n+=L(s,a),a=92===s);return"/"+n+"/"+r}return n}(e.value)},GeneratorExpression:function(e,t,n){return this.ComprehensionExpression(e,t,n)},ComprehensionExpression:function(e,t,n){var u,s,o,a,h=this;return u=e.type===r.GeneratorExpression?["("]:["["],F.moz.comprehensionExpressionStartsWithAssignment&&(a=this.generateExpression(e.body,i.Assignment,I),u.push(a)),e.blocks&&J(function(){for(s=0,o=e.blocks.length;s<o;++s)a=h.generateExpression(e.blocks[s],i.Sequence,I),s>0||F.moz.comprehensionExpressionStartsWithAssignment?u=X(u,a):u.push(a)}),e.filter&&(u=X(u,"if"+A),a=this.generateExpression(e.filter,i.Sequence,I),u=X(u,["(",a,")"])),F.moz.comprehensionExpressionStartsWithAssignment||(a=this.generateExpression(e.body,i.Assignment,I),u=X(u,a)),u.push(e.type===r.GeneratorExpression?")":"]"),u},ComprehensionBlock:function(e,t,n){var u;return u=X(u=e.left.type===r.VariableDeclaration?[e.left.kind,z(),this.generateStatement(e.left.declarations[0],0)]:this.generateExpression(e.left,i.Call,I),e.of?"of":"in"),u=X(u,this.generateExpression(e.right,i.Sequence,I)),["for"+A+"(",u,")"]},SpreadElement:function(e,t,n){return["...",this.generateExpression(e.argument,i.Assignment,I)]},TaggedTemplateExpression:function(e,t,n){var r=3;return 2&n||(r=1),W([this.generateExpression(e.tag,i.Call,r),this.generateExpression(e.quasi,i.Primary,4)],i.TaggedTemplate,t)},TemplateElement:function(e,t,n){return e.value.raw},TemplateLiteral:function(e,t,n){var r,u,s;for(r=["`"],u=0,s=e.quasis.length;u<s;++u)r.push(this.generateExpression(e.quasis[u],i.Primary,I)),u+1<s&&(r.push("${"+A),r.push(this.generateExpression(e.expressions[u],i.Sequence,I)),r.push(A+"}"));return r.push("`"),r},ModuleSpecifier:function(e,t,n){return this.Literal(e,t,n)}},P(G.prototype,G.Expression),G.prototype.generateExpression=function(e,t,n){var u,s;return s=e.type||r.Property,F.verbatim&&e.hasOwnProperty(F.verbatim)?function(e,t){var n;return U("string"==typeof(n=e[F.verbatim])?W(V(n),i.Sequence,t):W(V(n.content),null!=n.precedence?n.precedence:i.Sequence,t),e)}(e,t):(u=this[s](e,t,n),F.comment&&(u=K(e,u)),U(u,e))},G.prototype.generateStatement=function(e,t){var n,i;return n=this[e.type](e,t),F.comment&&(n=K(e,n)),i=U(n).toString(),e.type!==r.Program||g||""!==m||"\n"!==i.charAt(i.length-1)||(n=v?U(n).replaceRight(/\s+$/,""):i.replace(/\s+$/,"")),U(n,e)},b={indent:{style:"",base:0},renumber:!0,hexadecimal:!0,quotes:"auto",escapeless:!0,compact:!0,parentheses:!1,semicolons:!1},w={indent:{style:"    ",base:0,adjustMultilineComment:!1},newline:"\n",space:" ",json:!1,renumber:!1,hexadecimal:!1,quotes:"single",escapeless:!1,compact:!1,parentheses:!0,semicolons:!0,safeConcatenation:!1,preserveBlankLines:!1},t.version=n(30).version,t.generate=function(r,i){var u,o,a={indent:null,base:null,parse:null,comment:!1,format:{indent:{style:"    ",base:0,adjustMultilineComment:!1},newline:"\n",space:" ",json:!1,renumber:!1,hexadecimal:!1,quotes:"single",escapeless:!1,compact:!1,parentheses:!0,semicolons:!0,safeConcatenation:!1,preserveBlankLines:!1},moz:{comprehensionExpressionStartsWithAssignment:!1,starlessGenerator:!1},sourceMap:null,sourceMapRoot:null,sourceMapWithCode:!1,directive:!1,raw:!0,verbatim:null,sourceCode:null};return null!=i?("string"==typeof i.indent&&(a.format.indent.style=i.indent),"number"==typeof i.base&&(a.format.indent.base=i.base),i=M(a,i),c=i.format.indent.style,h="string"==typeof i.base?i.base:_(c,i.format.indent.base)):(c=(i=a).format.indent.style,h=_(c,i.format.indent.base)),l=i.format.json,p=i.format.renumber,d=!l&&i.format.hexadecimal,f=l?"double":i.format.quotes,D=i.format.escapeless,m=i.format.newline,A=i.format.space,i.format.compact&&(m=A=c=h=""),E=i.format.parentheses,C=i.format.semicolons,g=i.format.safeConcatenation,x=i.directive,y=l?null:i.parse,v=i.sourceMap,S=i.sourceCode,B=i.format.preserveBlankLines&&null!==S,F=i,v&&(s=t.browser?e.sourceMap.SourceNode:n(23).SourceNode),u=ee(r),v?(o=u.toStringWithSourceMap({file:i.file,sourceRoot:i.sourceMapRoot}),i.sourceContent&&o.map.setSourceContent(i.sourceMap,i.sourceContent),i.sourceMapWithCode?o:o.map.toString()):(o={code:u.toString(),map:null},i.sourceMapWithCode?o:o.code)},t.attachComments=o.attachComments,t.Precedence=M({},i),t.browser=!1,t.FORMAT_MINIFY=b,t.FORMAT_DEFAULTS=w}()}).call(this,n(17))},function(e,t){!function(){"use strict";var t,n,r,i,u,s;function o(e){return e<=65535?String.fromCharCode(e):String.fromCharCode(Math.floor((e-65536)/1024)+55296)+String.fromCharCode((e-65536)%1024+56320)}for(n={NonAsciiIdentifierStart:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,NonAsciiIdentifierPart:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/},t={NonAsciiIdentifierStart:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,NonAsciiIdentifierPart:/[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/},r=[5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279],i=new Array(128),s=0;s<128;++s)i[s]=s>=97&&s<=122||s>=65&&s<=90||36===s||95===s;for(u=new Array(128),s=0;s<128;++s)u[s]=s>=97&&s<=122||s>=65&&s<=90||s>=48&&s<=57||36===s||95===s;e.exports={isDecimalDigit:function(e){return 48<=e&&e<=57},isHexDigit:function(e){return 48<=e&&e<=57||97<=e&&e<=102||65<=e&&e<=70},isOctalDigit:function(e){return e>=48&&e<=55},isWhiteSpace:function(e){return 32===e||9===e||11===e||12===e||160===e||e>=5760&&r.indexOf(e)>=0},isLineTerminator:function(e){return 10===e||13===e||8232===e||8233===e},isIdentifierStartES5:function(e){return e<128?i[e]:n.NonAsciiIdentifierStart.test(o(e))},isIdentifierPartES5:function(e){return e<128?u[e]:n.NonAsciiIdentifierPart.test(o(e))},isIdentifierStartES6:function(e){return e<128?i[e]:t.NonAsciiIdentifierStart.test(o(e))},isIdentifierPartES6:function(e){return e<128?u[e]:t.NonAsciiIdentifierPart.test(o(e))}}}()},function(e,t,n){var r=n(8),i=n(2),u=n(9).ArraySet,s=n(25).MappingList;function o(e){e||(e={}),this._file=i.getArg(e,"file",null),this._sourceRoot=i.getArg(e,"sourceRoot",null),this._skipValidation=i.getArg(e,"skipValidation",!1),this._sources=new u,this._names=new u,this._mappings=new s,this._sourcesContents=null}o.prototype._version=3,o.fromSourceMap=function(e){var t=e.sourceRoot,n=new o({file:e.file,sourceRoot:t});return e.eachMapping(function(e){var r={generated:{line:e.generatedLine,column:e.generatedColumn}};null!=e.source&&(r.source=e.source,null!=t&&(r.source=i.relative(t,r.source)),r.original={line:e.originalLine,column:e.originalColumn},null!=e.name&&(r.name=e.name)),n.addMapping(r)}),e.sources.forEach(function(r){var u=r;null!==t&&(u=i.relative(t,r)),n._sources.has(u)||n._sources.add(u);var s=e.sourceContentFor(r);null!=s&&n.setSourceContent(r,s)}),n},o.prototype.addMapping=function(e){var t=i.getArg(e,"generated"),n=i.getArg(e,"original",null),r=i.getArg(e,"source",null),u=i.getArg(e,"name",null);this._skipValidation||this._validateMapping(t,n,r,u),null!=r&&(r=String(r),this._sources.has(r)||this._sources.add(r)),null!=u&&(u=String(u),this._names.has(u)||this._names.add(u)),this._mappings.add({generatedLine:t.line,generatedColumn:t.column,originalLine:null!=n&&n.line,originalColumn:null!=n&&n.column,source:r,name:u})},o.prototype.setSourceContent=function(e,t){var n=e;null!=this._sourceRoot&&(n=i.relative(this._sourceRoot,n)),null!=t?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[i.toSetString(n)]=t):this._sourcesContents&&(delete this._sourcesContents[i.toSetString(n)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},o.prototype.applySourceMap=function(e,t,n){var r=t;if(null==t){if(null==e.file)throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');r=e.file}var s=this._sourceRoot;null!=s&&(r=i.relative(s,r));var o=new u,a=new u;this._mappings.unsortedForEach(function(t){if(t.source===r&&null!=t.originalLine){var u=e.originalPositionFor({line:t.originalLine,column:t.originalColumn});null!=u.source&&(t.source=u.source,null!=n&&(t.source=i.join(n,t.source)),null!=s&&(t.source=i.relative(s,t.source)),t.originalLine=u.line,t.originalColumn=u.column,null!=u.name&&(t.name=u.name))}var h=t.source;null==h||o.has(h)||o.add(h);var c=t.name;null==c||a.has(c)||a.add(c)},this),this._sources=o,this._names=a,e.sources.forEach(function(t){var r=e.sourceContentFor(t);null!=r&&(null!=n&&(t=i.join(n,t)),null!=s&&(t=i.relative(s,t)),this.setSourceContent(t,r))},this)},o.prototype._validateMapping=function(e,t,n,r){if(t&&"number"!=typeof t.line&&"number"!=typeof t.column)throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");if((!(e&&"line"in e&&"column"in e&&e.line>0&&e.column>=0)||t||n||r)&&!(e&&"line"in e&&"column"in e&&t&&"line"in t&&"column"in t&&e.line>0&&e.column>=0&&t.line>0&&t.column>=0&&n))throw new Error("Invalid mapping: "+JSON.stringify({generated:e,source:n,original:t,name:r}))},o.prototype._serializeMappings=function(){for(var e,t,n,u,s=0,o=1,a=0,h=0,c=0,l=0,p="",d=this._mappings.toArray(),f=0,D=d.length;f<D;f++){if(e="",(t=d[f]).generatedLine!==o)for(s=0;t.generatedLine!==o;)e+=";",o++;else if(f>0){if(!i.compareByGeneratedPositionsInflated(t,d[f-1]))continue;e+=","}e+=r.encode(t.generatedColumn-s),s=t.generatedColumn,null!=t.source&&(u=this._sources.indexOf(t.source),e+=r.encode(u-l),l=u,e+=r.encode(t.originalLine-1-h),h=t.originalLine-1,e+=r.encode(t.originalColumn-a),a=t.originalColumn,null!=t.name&&(n=this._names.indexOf(t.name),e+=r.encode(n-c),c=n)),p+=e}return p},o.prototype._generateSourcesContent=function(e,t){return e.map(function(e){if(!this._sourcesContents)return null;null!=t&&(e=i.relative(t,e));var n=i.toSetString(e);return Object.prototype.hasOwnProperty.call(this._sourcesContents,n)?this._sourcesContents[n]:null},this)},o.prototype.toJSON=function(){var e={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return null!=this._file&&(e.file=this._file),null!=this._sourceRoot&&(e.sourceRoot=this._sourceRoot),this._sourcesContents&&(e.sourcesContent=this._generateSourcesContent(e.sources,e.sourceRoot)),e},o.prototype.toString=function(){return JSON.stringify(this.toJSON())},t.SourceMapGenerator=o},function(e,t,n){var r=n(24);t.encode=function(e){var t,n="",i=function(e){return e<0?1+(-e<<1):0+(e<<1)}(e);do{t=31&i,(i>>>=5)>0&&(t|=32),n+=r.encode(t)}while(i>0);return n},t.decode=function(e,t,n){var i,u,s,o,a=e.length,h=0,c=0;do{if(t>=a)throw new Error("Expected more digits in base 64 VLQ value.");if(-1===(u=r.decode(e.charCodeAt(t++))))throw new Error("Invalid base64 digit: "+e.charAt(t-1));i=!!(32&u),h+=(u&=31)<<c,c+=5}while(i);n.value=(o=(s=h)>>1,1==(1&s)?-o:o),n.rest=t}},function(e,t,n){var r=n(2),i=Object.prototype.hasOwnProperty,u="undefined"!=typeof Map;function s(){this._array=[],this._set=u?new Map:Object.create(null)}s.fromArray=function(e,t){for(var n=new s,r=0,i=e.length;r<i;r++)n.add(e[r],t);return n},s.prototype.size=function(){return u?this._set.size:Object.getOwnPropertyNames(this._set).length},s.prototype.add=function(e,t){var n=u?e:r.toSetString(e),s=u?this.has(e):i.call(this._set,n),o=this._array.length;s&&!t||this._array.push(e),s||(u?this._set.set(e,o):this._set[n]=o)},s.prototype.has=function(e){if(u)return this._set.has(e);var t=r.toSetString(e);return i.call(this._set,t)},s.prototype.indexOf=function(e){if(u){var t=this._set.get(e);if(t>=0)return t}else{var n=r.toSetString(e);if(i.call(this._set,n))return this._set[n]}throw new Error('"'+e+'" is not in the set.')},s.prototype.at=function(e){if(e>=0&&e<this._array.length)return this._array[e];throw new Error("No element indexed by "+e)},s.prototype.toArray=function(){return this._array.slice()},t.ArraySet=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(3),u=n(1),s=function(){function e(e){this.dictionary=new u.default(e)}return e.prototype.contains=function(e){return this.dictionary.containsKey(e)},e.prototype.add=function(e){return!this.contains(e)&&!r.isUndefined(e)&&(this.dictionary.setValue(e,e),!0)},e.prototype.intersection=function(e){var t=this;this.forEach(function(n){return e.contains(n)||t.remove(n),!0})},e.prototype.union=function(e){var t=this;e.forEach(function(e){return t.add(e),!0})},e.prototype.difference=function(e){var t=this;e.forEach(function(e){return t.remove(e),!0})},e.prototype.isSubsetOf=function(e){if(this.size()>e.size())return!1;var t=!0;return this.forEach(function(n){return!!e.contains(n)||(t=!1,!1)}),t},e.prototype.remove=function(e){return!!this.contains(e)&&(this.dictionary.remove(e),!0)},e.prototype.forEach=function(e){this.dictionary.forEach(function(t,n){return e(n)})},e.prototype.toArray=function(){return this.dictionary.values()},e.prototype.isEmpty=function(){return this.dictionary.isEmpty()},e.prototype.size=function(){return this.dictionary.size()},e.prototype.clear=function(){this.dictionary.clear()},e.prototype.toString=function(){return i.toString(this.toArray())},e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(12),u=function(){function e(e){this.root=null,this.compare=e||r.defaultCompare,this.nElements=0}return e.prototype.add=function(e){return!r.isUndefined(e)&&(null!==this.insertNode(this.createNode(e))&&(this.nElements++,!0))},e.prototype.clear=function(){this.root=null,this.nElements=0},e.prototype.isEmpty=function(){return 0===this.nElements},e.prototype.size=function(){return this.nElements},e.prototype.contains=function(e){return!r.isUndefined(e)&&null!==this.searchNode(this.root,e)},e.prototype.search=function(e){var t=this.searchNode(this.root,e);if(null!==t)return t.element},e.prototype.remove=function(e){var t=this.searchNode(this.root,e);return null!==t&&(this.removeNode(t),this.nElements--,!0)},e.prototype.inorderTraversal=function(e){this.inorderTraversalAux(this.root,e,{stop:!1})},e.prototype.preorderTraversal=function(e){this.preorderTraversalAux(this.root,e,{stop:!1})},e.prototype.postorderTraversal=function(e){this.postorderTraversalAux(this.root,e,{stop:!1})},e.prototype.levelTraversal=function(e){this.levelTraversalAux(this.root,e)},e.prototype.minimum=function(){if(!this.isEmpty()&&null!==this.root)return this.minimumAux(this.root).element},e.prototype.maximum=function(){if(!this.isEmpty()&&null!==this.root)return this.maximumAux(this.root).element},e.prototype.forEach=function(e){this.inorderTraversal(e)},e.prototype.toArray=function(){var e=[];return this.inorderTraversal(function(t){return e.push(t),!0}),e},e.prototype.height=function(){return this.heightAux(this.root)},e.prototype.searchNode=function(e,t){for(var n=1;null!==e&&0!==n;)(n=this.compare(t,e.element))<0?e=e.leftCh:n>0&&(e=e.rightCh);return e},e.prototype.transplant=function(e,t){null===e.parent?this.root=t:e===e.parent.leftCh?e.parent.leftCh=t:e.parent.rightCh=t,null!==t&&(t.parent=e.parent)},e.prototype.removeNode=function(e){if(null===e.leftCh)this.transplant(e,e.rightCh);else if(null===e.rightCh)this.transplant(e,e.leftCh);else{var t=this.minimumAux(e.rightCh);t.parent!==e&&(this.transplant(t,t.rightCh),t.rightCh=e.rightCh,t.rightCh.parent=t),this.transplant(e,t),t.leftCh=e.leftCh,t.leftCh.parent=t}},e.prototype.inorderTraversalAux=function(e,t,n){null===e||n.stop||(this.inorderTraversalAux(e.leftCh,t,n),n.stop||(n.stop=!1===t(e.element),n.stop||this.inorderTraversalAux(e.rightCh,t,n)))},e.prototype.levelTraversalAux=function(e,t){var n=new i.default;for(null!==e&&n.enqueue(e),e=n.dequeue()||null;null!=e;){if(!1===t(e.element))return;null!==e.leftCh&&n.enqueue(e.leftCh),null!==e.rightCh&&n.enqueue(e.rightCh),e=n.dequeue()||null}},e.prototype.preorderTraversalAux=function(e,t,n){null===e||n.stop||(n.stop=!1===t(e.element),n.stop||(this.preorderTraversalAux(e.leftCh,t,n),n.stop||this.preorderTraversalAux(e.rightCh,t,n)))},e.prototype.postorderTraversalAux=function(e,t,n){null===e||n.stop||(this.postorderTraversalAux(e.leftCh,t,n),n.stop||(this.postorderTraversalAux(e.rightCh,t,n),n.stop||(n.stop=!1===t(e.element))))},e.prototype.minimumAux=function(e){for(;null!=e&&null!==e.leftCh;)e=e.leftCh;return e},e.prototype.maximumAux=function(e){for(;null!=e&&null!==e.rightCh;)e=e.rightCh;return e},e.prototype.heightAux=function(e){return null===e?-1:Math.max(this.heightAux(e.leftCh),this.heightAux(e.rightCh))+1},e.prototype.insertNode=function(e){for(var t=null,n=this.root;null!==n;){var r=this.compare(e.element,n.element);if(0===r)return null;r<0?(t=n,n=n.leftCh):(t=n,n=n.rightCh)}return e.parent=t,null===t?this.root=e:this.compare(e.element,t.element)<0?t.leftCh=e:t.rightCh=e,e},e.prototype.createNode=function(e){return{element:e,leftCh:null,rightCh:null,parent:null}},e}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),i=function(){function e(){this.list=new r.default}return e.prototype.enqueue=function(e){return this.list.add(e)},e.prototype.add=function(e){return this.list.add(e)},e.prototype.dequeue=function(){if(0!==this.list.size()){var e=this.list.first();return this.list.removeElementAtIndex(0),e}},e.prototype.peek=function(){if(0!==this.list.size())return this.list.first()},e.prototype.size=function(){return this.list.size()},e.prototype.contains=function(e,t){return this.list.contains(e,t)},e.prototype.isEmpty=function(){return this.list.size()<=0},e.prototype.clear=function(){this.list.clear()},e.prototype.forEach=function(e){this.list.forEach(e)},e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(3),u=function(){function e(e){this.data=[],this.compare=e||r.defaultCompare}return e.prototype.leftChildIndex=function(e){return 2*e+1},e.prototype.rightChildIndex=function(e){return 2*e+2},e.prototype.parentIndex=function(e){return Math.floor((e-1)/2)},e.prototype.minIndex=function(e,t){return t>=this.data.length?e>=this.data.length?-1:e:this.compare(this.data[e],this.data[t])<=0?e:t},e.prototype.siftUp=function(e){for(var t=this.parentIndex(e);e>0&&this.compare(this.data[t],this.data[e])>0;)i.swap(this.data,t,e),e=t,t=this.parentIndex(e)},e.prototype.siftDown=function(e){for(var t=this.minIndex(this.leftChildIndex(e),this.rightChildIndex(e));t>=0&&this.compare(this.data[e],this.data[t])>0;)i.swap(this.data,t,e),e=t,t=this.minIndex(this.leftChildIndex(e),this.rightChildIndex(e))},e.prototype.peek=function(){return this.data.length>0?this.data[0]:void 0},e.prototype.add=function(e){return!r.isUndefined(e)&&(this.data.push(e),this.siftUp(this.data.length-1),!0)},e.prototype.removeRoot=function(){if(this.data.length>0){var e=this.data[0];return this.data[0]=this.data[this.data.length-1],this.data.splice(this.data.length-1,1),this.data.length>0&&this.siftDown(0),e}},e.prototype.contains=function(e){var t=r.compareToEquals(this.compare);return i.contains(this.data,e,t)},e.prototype.size=function(){return this.data.length},e.prototype.isEmpty=function(){return this.data.length<=0},e.prototype.clear=function(){this.data.length=0},e.prototype.forEach=function(e){i.forEach(this.data,e)},e}();t.default=u},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var u=n(1),s=n(0),o=function(e){function t(t,n){var r=e.call(this,n)||this;return r.defaultFactoryFunction=t,r}return i(t,e),t.prototype.setDefault=function(t,n){var r=e.prototype.getValue.call(this,t);return s.isUndefined(r)?(this.setValue(t,n),n):r},t.prototype.getValue=function(e){return this.setDefault(e,this.defaultFactoryFunction())},t}(u.default);t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(16),i=new(n(46).ScreenConfig)(20),u=new r.ProgremConfig(17,17,1);r.ProgremService.buildProgrem("./coeur_progrem.js",i,u)},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(5)),u=n(31),s=n(42),o=n(44),a=n(45),h=function(){return function(e,t,n){this.colonnes=e,this.lignes=t,this.frames=n}}();t.ProgremConfig=h,function(e){var t,n=0;function r(e){window.requestAnimationFrame(r),e-n<1500||(n=e,t&&t.next())}e.buildProgrem=function(e,n,h){var c=document.createElement("script");c.src=e;var l=document.querySelector("body");l&&l.appendChild(c),u.CodeService.loadProgrem(e).then(function(e){var c=u.CodeService.progremCodeFactory.build(e);console.log("progrem AST:",c.colorerProgremFunction);var l=i.generate(c.initialiserProgremFunction());window.eval(l),t=s.SchedulingService.buildProgremScheduler(h,c);var p=new o.BasicHtmlEsprimaProgremInspector(c,t),d=document.querySelector(".code");console.log("codeElement",d),p.attach(d);var f=document.querySelector(".progrem");console.log("gridElement",f);var D=new a.BasicCanvasProgremGrid(n,h);D.attach(f),D.clear(),t.subscribeGridChange(D),r(0)})}}(t.ProgremService||(t.ProgremService={}))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){!function e(t){"use strict";var r,i,u,s,o,a,h,c,l;function p(e){var t,n,r={};for(t in e)e.hasOwnProperty(t)&&(n=e[t],r[t]="object"==typeof n&&null!==n?p(n):n);return r}function d(e,t){this.parent=e,this.key=t}function f(e,t,n,r){this.node=e,this.path=t,this.wrap=n,this.ref=r}function D(){}function m(e){return null!=e&&("object"==typeof e&&"string"==typeof e.type)}function A(e,t){return(e===r.ObjectExpression||e===r.ObjectPattern)&&"properties"===t}function E(e,t){return(new D).traverse(e,t)}function C(e,t){var n;return n=function(e,t){var n,r,i,u;for(r=e.length,i=0;r;)t(e[u=i+(n=r>>>1)])?r=n:(i=u+1,r-=n+1);return i}(t,function(t){return t.range[0]>e.range[0]}),e.extendedRange=[e.range[0],e.range[1]],n!==t.length&&(e.extendedRange[1]=t[n].range[0]),(n-=1)>=0&&(e.extendedRange[0]=t[n].range[1]),e}return(i=Array.isArray)||(i=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),o=Object.create||function(){function e(){}return function(t){return e.prototype=t,new e}}(),a=Object.keys||function(e){var t,n=[];for(t in e)n.push(t);return n},r={AssignmentExpression:"AssignmentExpression",AssignmentPattern:"AssignmentPattern",ArrayExpression:"ArrayExpression",ArrayPattern:"ArrayPattern",ArrowFunctionExpression:"ArrowFunctionExpression",AwaitExpression:"AwaitExpression",BlockStatement:"BlockStatement",BinaryExpression:"BinaryExpression",BreakStatement:"BreakStatement",CallExpression:"CallExpression",CatchClause:"CatchClause",ClassBody:"ClassBody",ClassDeclaration:"ClassDeclaration",ClassExpression:"ClassExpression",ComprehensionBlock:"ComprehensionBlock",ComprehensionExpression:"ComprehensionExpression",ConditionalExpression:"ConditionalExpression",ContinueStatement:"ContinueStatement",DebuggerStatement:"DebuggerStatement",DirectiveStatement:"DirectiveStatement",DoWhileStatement:"DoWhileStatement",EmptyStatement:"EmptyStatement",ExportAllDeclaration:"ExportAllDeclaration",ExportDefaultDeclaration:"ExportDefaultDeclaration",ExportNamedDeclaration:"ExportNamedDeclaration",ExportSpecifier:"ExportSpecifier",ExpressionStatement:"ExpressionStatement",ForStatement:"ForStatement",ForInStatement:"ForInStatement",ForOfStatement:"ForOfStatement",FunctionDeclaration:"FunctionDeclaration",FunctionExpression:"FunctionExpression",GeneratorExpression:"GeneratorExpression",Identifier:"Identifier",IfStatement:"IfStatement",ImportDeclaration:"ImportDeclaration",ImportDefaultSpecifier:"ImportDefaultSpecifier",ImportNamespaceSpecifier:"ImportNamespaceSpecifier",ImportSpecifier:"ImportSpecifier",Literal:"Literal",LabeledStatement:"LabeledStatement",LogicalExpression:"LogicalExpression",MemberExpression:"MemberExpression",MetaProperty:"MetaProperty",MethodDefinition:"MethodDefinition",ModuleSpecifier:"ModuleSpecifier",NewExpression:"NewExpression",ObjectExpression:"ObjectExpression",ObjectPattern:"ObjectPattern",Program:"Program",Property:"Property",RestElement:"RestElement",ReturnStatement:"ReturnStatement",SequenceExpression:"SequenceExpression",SpreadElement:"SpreadElement",Super:"Super",SwitchStatement:"SwitchStatement",SwitchCase:"SwitchCase",TaggedTemplateExpression:"TaggedTemplateExpression",TemplateElement:"TemplateElement",TemplateLiteral:"TemplateLiteral",ThisExpression:"ThisExpression",ThrowStatement:"ThrowStatement",TryStatement:"TryStatement",UnaryExpression:"UnaryExpression",UpdateExpression:"UpdateExpression",VariableDeclaration:"VariableDeclaration",VariableDeclarator:"VariableDeclarator",WhileStatement:"WhileStatement",WithStatement:"WithStatement",YieldExpression:"YieldExpression"},s={AssignmentExpression:["left","right"],AssignmentPattern:["left","right"],ArrayExpression:["elements"],ArrayPattern:["elements"],ArrowFunctionExpression:["params","body"],AwaitExpression:["argument"],BlockStatement:["body"],BinaryExpression:["left","right"],BreakStatement:["label"],CallExpression:["callee","arguments"],CatchClause:["param","body"],ClassBody:["body"],ClassDeclaration:["id","superClass","body"],ClassExpression:["id","superClass","body"],ComprehensionBlock:["left","right"],ComprehensionExpression:["blocks","filter","body"],ConditionalExpression:["test","consequent","alternate"],ContinueStatement:["label"],DebuggerStatement:[],DirectiveStatement:[],DoWhileStatement:["body","test"],EmptyStatement:[],ExportAllDeclaration:["source"],ExportDefaultDeclaration:["declaration"],ExportNamedDeclaration:["declaration","specifiers","source"],ExportSpecifier:["exported","local"],ExpressionStatement:["expression"],ForStatement:["init","test","update","body"],ForInStatement:["left","right","body"],ForOfStatement:["left","right","body"],FunctionDeclaration:["id","params","body"],FunctionExpression:["id","params","body"],GeneratorExpression:["blocks","filter","body"],Identifier:[],IfStatement:["test","consequent","alternate"],ImportDeclaration:["specifiers","source"],ImportDefaultSpecifier:["local"],ImportNamespaceSpecifier:["local"],ImportSpecifier:["imported","local"],Literal:[],LabeledStatement:["label","body"],LogicalExpression:["left","right"],MemberExpression:["object","property"],MetaProperty:["meta","property"],MethodDefinition:["key","value"],ModuleSpecifier:[],NewExpression:["callee","arguments"],ObjectExpression:["properties"],ObjectPattern:["properties"],Program:["body"],Property:["key","value"],RestElement:["argument"],ReturnStatement:["argument"],SequenceExpression:["expressions"],SpreadElement:["argument"],Super:[],SwitchStatement:["discriminant","cases"],SwitchCase:["test","consequent"],TaggedTemplateExpression:["tag","quasi"],TemplateElement:[],TemplateLiteral:["quasis","expressions"],ThisExpression:[],ThrowStatement:["argument"],TryStatement:["block","handler","finalizer"],UnaryExpression:["argument"],UpdateExpression:["argument"],VariableDeclaration:["declarations"],VariableDeclarator:["id","init"],WhileStatement:["test","body"],WithStatement:["object","body"],YieldExpression:["argument"]},u={Break:h={},Skip:c={},Remove:l={}},d.prototype.replace=function(e){this.parent[this.key]=e},d.prototype.remove=function(){return i(this.parent)?(this.parent.splice(this.key,1),!0):(this.replace(null),!1)},D.prototype.path=function(){var e,t,n,r,u;function s(e,t){if(i(t))for(n=0,r=t.length;n<r;++n)e.push(t[n]);else e.push(t)}if(!this.__current.path)return null;for(u=[],e=2,t=this.__leavelist.length;e<t;++e)s(u,this.__leavelist[e].path);return s(u,this.__current.path),u},D.prototype.type=function(){return this.current().type||this.__current.wrap},D.prototype.parents=function(){var e,t,n;for(n=[],e=1,t=this.__leavelist.length;e<t;++e)n.push(this.__leavelist[e].node);return n},D.prototype.current=function(){return this.__current.node},D.prototype.__execute=function(e,t){var n,r;return r=void 0,n=this.__current,this.__current=t,this.__state=null,e&&(r=e.call(this,t.node,this.__leavelist[this.__leavelist.length-1].node)),this.__current=n,r},D.prototype.notify=function(e){this.__state=e},D.prototype.skip=function(){this.notify(c)},D.prototype.break=function(){this.notify(h)},D.prototype.remove=function(){this.notify(l)},D.prototype.__initialize=function(e,t){this.visitor=t,this.root=e,this.__worklist=[],this.__leavelist=[],this.__current=null,this.__state=null,this.__fallback=null,"iteration"===t.fallback?this.__fallback=a:"function"==typeof t.fallback&&(this.__fallback=t.fallback),this.__keys=s,t.keys&&(this.__keys=function(e,t){var n,r,i,u=a(t);for(r=0,i=u.length;r<i;r+=1)e[n=u[r]]=t[n];return e}(o(this.__keys),t.keys))},D.prototype.traverse=function(e,t){var n,r,u,s,o,a,l,p,d,D,E,C;for(this.__initialize(e,t),C={},n=this.__worklist,r=this.__leavelist,n.push(new f(e,null,null,null)),r.push(new f(null,null,null,null));n.length;)if((u=n.pop())!==C){if(u.node){if(a=this.__execute(t.enter,u),this.__state===h||a===h)return;if(n.push(C),r.push(u),this.__state===c||a===c)continue;if(o=(s=u.node).type||u.wrap,!(D=this.__keys[o])){if(!this.__fallback)throw new Error("Unknown node type "+o+".");D=this.__fallback(s)}for(p=D.length;(p-=1)>=0;)if(E=s[l=D[p]])if(i(E)){for(d=E.length;(d-=1)>=0;)if(E[d]){if(A(o,D[p]))u=new f(E[d],[l,d],"Property",null);else{if(!m(E[d]))continue;u=new f(E[d],[l,d],null,null)}n.push(u)}}else m(E)&&n.push(new f(E,l,null,null))}}else if(u=r.pop(),a=this.__execute(t.leave,u),this.__state===h||a===h)return},D.prototype.replace=function(e,t){var n,r,u,s,o,a,p,D,E,C,g,x,F;function y(e){var t,r,i,u;if(e.ref.remove())for(r=e.ref.key,u=e.ref.parent,t=n.length;t--;)if((i=n[t]).ref&&i.ref.parent===u){if(i.ref.key<r)break;--i.ref.key}}for(this.__initialize(e,t),g={},n=this.__worklist,r=this.__leavelist,a=new f(e,null,null,new d(x={root:e},"root")),n.push(a),r.push(a);n.length;)if((a=n.pop())!==g){if(void 0!==(o=this.__execute(t.enter,a))&&o!==h&&o!==c&&o!==l&&(a.ref.replace(o),a.node=o),this.__state!==l&&o!==l||(y(a),a.node=null),this.__state===h||o===h)return x.root;if((u=a.node)&&(n.push(g),r.push(a),this.__state!==c&&o!==c)){if(s=u.type||a.wrap,!(E=this.__keys[s])){if(!this.__fallback)throw new Error("Unknown node type "+s+".");E=this.__fallback(u)}for(p=E.length;(p-=1)>=0;)if(C=u[F=E[p]])if(i(C)){for(D=C.length;(D-=1)>=0;)if(C[D]){if(A(s,E[p]))a=new f(C[D],[F,D],"Property",new d(C,D));else{if(!m(C[D]))continue;a=new f(C[D],[F,D],null,new d(C,D))}n.push(a)}}else m(C)&&n.push(new f(C,F,null,new d(u,F)))}}else if(a=r.pop(),void 0!==(o=this.__execute(t.leave,a))&&o!==h&&o!==c&&o!==l&&a.ref.replace(o),this.__state!==l&&o!==l||y(a),this.__state===h||o===h)return x.root;return x.root},t.version=n(19).version,t.Syntax=r,t.traverse=E,t.replace=function(e,t){return(new D).replace(e,t)},t.attachComments=function(e,t,n){var r,i,s,o,a=[];if(!e.range)throw new Error("attachComments needs range information");if(!n.length){if(t.length){for(s=0,i=t.length;s<i;s+=1)(r=p(t[s])).extendedRange=[0,e.range[0]],a.push(r);e.leadingComments=a}return e}for(s=0,i=t.length;s<i;s+=1)a.push(C(p(t[s]),n));return o=0,E(e,{enter:function(e){for(var t;o<a.length&&!((t=a[o]).extendedRange[1]>e.range[0]);)t.extendedRange[1]===e.range[0]?(e.leadingComments||(e.leadingComments=[]),e.leadingComments.push(t),a.splice(o,1)):o+=1;return o===a.length?u.Break:a[o].extendedRange[0]>e.range[1]?u.Skip:void 0}}),o=0,E(e,{leave:function(e){for(var t;o<a.length&&(t=a[o],!(e.range[1]<t.extendedRange[0]));)e.range[1]===t.extendedRange[0]?(e.trailingComments||(e.trailingComments=[]),e.trailingComments.push(t),a.splice(o,1)):o+=1;return o===a.length?u.Break:a[o].extendedRange[0]>e.range[1]?u.Skip:void 0}}),e},t.VisitorKeys=s,t.VisitorOption=u,t.Controller=D,t.cloneEnvironment=function(){return e({})},t}(t)},function(e){e.exports={_args:[["estraverse@^4.1.1","/home/maxbundy/git/progrem-viewer/node_modules/eslint-scope"]],_from:"estraverse@>=4.1.1 <5.0.0",_id:"estraverse@4.2.0",_inCache:!0,_installable:!0,_location:"/estraverse",_nodeVersion:"0.12.9",_npmOperationalInternal:{host:"packages-12-west.internal.npmjs.com",tmp:"tmp/estraverse-4.2.0.tgz_1457646738925_0.7118953282479197"},_npmUser:{email:"nicholas@nczconsulting.com",name:"nzakas"},_npmVersion:"2.14.9",_phantomChildren:{},_requested:{name:"estraverse",raw:"estraverse@^4.1.1",rawSpec:"^4.1.1",scope:null,spec:">=4.1.1 <5.0.0",type:"range"},_requiredBy:["/eslint-scope","/esrecurse"],_resolved:"https://registry.npmjs.org/estraverse/-/estraverse-4.2.0.tgz",_shasum:"0dee3fed31fcd469618ce7342099fc1afa0bdb13",_shrinkwrap:null,_spec:"estraverse@^4.1.1",_where:"/home/maxbundy/git/progrem-viewer/node_modules/eslint-scope",bugs:{url:"https://github.com/estools/estraverse/issues"},dependencies:{},description:"ECMAScript JS AST traversal functions",devDependencies:{"babel-preset-es2015":"^6.3.13","babel-register":"^6.3.13",chai:"^2.1.1",espree:"^1.11.0",gulp:"^3.8.10","gulp-bump":"^0.2.2","gulp-filter":"^2.0.0","gulp-git":"^1.0.1","gulp-tag-version":"^1.2.1",jshint:"^2.5.6",mocha:"^2.1.0"},directories:{},dist:{shasum:"0dee3fed31fcd469618ce7342099fc1afa0bdb13",tarball:"https://registry.npmjs.org/estraverse/-/estraverse-4.2.0.tgz"},engines:{node:">=0.10.0"},gitHead:"6f6a4e99653908e859c7c10d04d9518bf4844ede",homepage:"https://github.com/estools/estraverse",license:"BSD-2-Clause",main:"estraverse.js",maintainers:[{name:"constellation",email:"utatane.tea@gmail.com"},{name:"michaelficarra",email:"npm@michael.ficarra.me"},{name:"nzakas",email:"nicholas@nczconsulting.com"}],name:"estraverse",optionalDependencies:{},readme:"ERROR: No README data found!",repository:{type:"git",url:"git+ssh://git@github.com/estools/estraverse.git"},scripts:{lint:"jshint estraverse.js",test:"npm run-script lint && npm run-script unit-test","unit-test":"mocha --compilers js:babel-register"},version:"4.2.0"}},function(e,t,n){!function(){"use strict";t.ast=n(21),t.code=n(6),t.keyword=n(22)}()},function(e,t){!function(){"use strict";function t(e){if(null==e)return!1;switch(e.type){case"BlockStatement":case"BreakStatement":case"ContinueStatement":case"DebuggerStatement":case"DoWhileStatement":case"EmptyStatement":case"ExpressionStatement":case"ForInStatement":case"ForStatement":case"IfStatement":case"LabeledStatement":case"ReturnStatement":case"SwitchStatement":case"ThrowStatement":case"TryStatement":case"VariableDeclaration":case"WhileStatement":case"WithStatement":return!0}return!1}function n(e){switch(e.type){case"IfStatement":return null!=e.alternate?e.alternate:e.consequent;case"LabeledStatement":case"ForStatement":case"ForInStatement":case"WhileStatement":case"WithStatement":return e.body}return null}e.exports={isExpression:function(e){if(null==e)return!1;switch(e.type){case"ArrayExpression":case"AssignmentExpression":case"BinaryExpression":case"CallExpression":case"ConditionalExpression":case"FunctionExpression":case"Identifier":case"Literal":case"LogicalExpression":case"MemberExpression":case"NewExpression":case"ObjectExpression":case"SequenceExpression":case"ThisExpression":case"UnaryExpression":case"UpdateExpression":return!0}return!1},isStatement:t,isIterationStatement:function(e){if(null==e)return!1;switch(e.type){case"DoWhileStatement":case"ForInStatement":case"ForStatement":case"WhileStatement":return!0}return!1},isSourceElement:function(e){return t(e)||null!=e&&"FunctionDeclaration"===e.type},isProblematicIfStatement:function(e){var t;if("IfStatement"!==e.type)return!1;if(null==e.alternate)return!1;t=e.consequent;do{if("IfStatement"===t.type&&null==t.alternate)return!0;t=n(t)}while(t);return!1},trailingStatement:n}}()},function(e,t,n){!function(){"use strict";var t=n(6);function r(e,t){return!(!t&&"yield"===e)&&i(e,t)}function i(e,t){if(t&&function(e){switch(e){case"implements":case"interface":case"package":case"private":case"protected":case"public":case"static":case"let":return!0;default:return!1}}(e))return!0;switch(e.length){case 2:return"if"===e||"in"===e||"do"===e;case 3:return"var"===e||"for"===e||"new"===e||"try"===e;case 4:return"this"===e||"else"===e||"case"===e||"void"===e||"with"===e||"enum"===e;case 5:return"while"===e||"break"===e||"catch"===e||"throw"===e||"const"===e||"yield"===e||"class"===e||"super"===e;case 6:return"return"===e||"typeof"===e||"delete"===e||"switch"===e||"export"===e||"import"===e;case 7:return"default"===e||"finally"===e||"extends"===e;case 8:return"function"===e||"continue"===e||"debugger"===e;case 10:return"instanceof"===e;default:return!1}}function u(e,t){return"null"===e||"true"===e||"false"===e||r(e,t)}function s(e,t){return"null"===e||"true"===e||"false"===e||i(e,t)}function o(e){var n,r,i;if(0===e.length)return!1;if(i=e.charCodeAt(0),!t.isIdentifierStartES5(i))return!1;for(n=1,r=e.length;n<r;++n)if(i=e.charCodeAt(n),!t.isIdentifierPartES5(i))return!1;return!0}function a(e){var n,r,i,u,s;if(0===e.length)return!1;for(s=t.isIdentifierStartES6,n=0,r=e.length;n<r;++n){if(55296<=(i=e.charCodeAt(n))&&i<=56319){if(++n>=r)return!1;if(!(56320<=(u=e.charCodeAt(n))&&u<=57343))return!1;i=1024*(i-55296)+(u-56320)+65536}if(!s(i))return!1;s=t.isIdentifierPartES6}return!0}e.exports={isKeywordES5:r,isKeywordES6:i,isReservedWordES5:u,isReservedWordES6:s,isRestrictedWord:function(e){return"eval"===e||"arguments"===e},isIdentifierNameES5:o,isIdentifierNameES6:a,isIdentifierES5:function(e,t){return o(e)&&!u(e,t)},isIdentifierES6:function(e,t){return a(e)&&!s(e,t)}}}()},function(e,t,n){t.SourceMapGenerator=n(7).SourceMapGenerator,t.SourceMapConsumer=n(26).SourceMapConsumer,t.SourceNode=n(29).SourceNode},function(e,t){var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");t.encode=function(e){if(0<=e&&e<n.length)return n[e];throw new TypeError("Must be between 0 and 63: "+e)},t.decode=function(e){return 65<=e&&e<=90?e-65:97<=e&&e<=122?e-97+26:48<=e&&e<=57?e-48+52:43==e?62:47==e?63:-1}},function(e,t,n){var r=n(2);function i(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}i.prototype.unsortedForEach=function(e,t){this._array.forEach(e,t)},i.prototype.add=function(e){var t,n,i,u,s,o;t=this._last,n=e,i=t.generatedLine,u=n.generatedLine,s=t.generatedColumn,o=n.generatedColumn,u>i||u==i&&o>=s||r.compareByGeneratedPositionsInflated(t,n)<=0?(this._last=e,this._array.push(e)):(this._sorted=!1,this._array.push(e))},i.prototype.toArray=function(){return this._sorted||(this._array.sort(r.compareByGeneratedPositionsInflated),this._sorted=!0),this._array},t.MappingList=i},function(e,t,n){var r=n(2),i=n(27),u=n(9).ArraySet,s=n(8),o=n(28).quickSort;function a(e,t){var n=e;return"string"==typeof e&&(n=r.parseSourceMapInput(e)),null!=n.sections?new l(n,t):new h(n,t)}function h(e,t){var n=e;"string"==typeof e&&(n=r.parseSourceMapInput(e));var i=r.getArg(n,"version"),s=r.getArg(n,"sources"),o=r.getArg(n,"names",[]),a=r.getArg(n,"sourceRoot",null),h=r.getArg(n,"sourcesContent",null),c=r.getArg(n,"mappings"),l=r.getArg(n,"file",null);if(i!=this._version)throw new Error("Unsupported version: "+i);a&&(a=r.normalize(a)),s=s.map(String).map(r.normalize).map(function(e){return a&&r.isAbsolute(a)&&r.isAbsolute(e)?r.relative(a,e):e}),this._names=u.fromArray(o.map(String),!0),this._sources=u.fromArray(s,!0),this._absoluteSources=this._sources.toArray().map(function(e){return r.computeSourceURL(a,e,t)}),this.sourceRoot=a,this.sourcesContent=h,this._mappings=c,this._sourceMapURL=t,this.file=l}function c(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}function l(e,t){var n=e;"string"==typeof e&&(n=r.parseSourceMapInput(e));var i=r.getArg(n,"version"),s=r.getArg(n,"sections");if(i!=this._version)throw new Error("Unsupported version: "+i);this._sources=new u,this._names=new u;var o={line:-1,column:0};this._sections=s.map(function(e){if(e.url)throw new Error("Support for url field in sections not implemented.");var n=r.getArg(e,"offset"),i=r.getArg(n,"line"),u=r.getArg(n,"column");if(i<o.line||i===o.line&&u<o.column)throw new Error("Section offsets must be ordered and non-overlapping.");return o=n,{generatedOffset:{generatedLine:i+1,generatedColumn:u+1},consumer:new a(r.getArg(e,"map"),t)}})}a.fromSourceMap=function(e,t){return h.fromSourceMap(e,t)},a.prototype._version=3,a.prototype.__generatedMappings=null,Object.defineProperty(a.prototype,"_generatedMappings",{configurable:!0,enumerable:!0,get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}}),a.prototype.__originalMappings=null,Object.defineProperty(a.prototype,"_originalMappings",{configurable:!0,enumerable:!0,get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}}),a.prototype._charIsMappingSeparator=function(e,t){var n=e.charAt(t);return";"===n||","===n},a.prototype._parseMappings=function(e,t){throw new Error("Subclasses must implement _parseMappings")},a.GENERATED_ORDER=1,a.ORIGINAL_ORDER=2,a.GREATEST_LOWER_BOUND=1,a.LEAST_UPPER_BOUND=2,a.prototype.eachMapping=function(e,t,n){var i,u=t||null;switch(n||a.GENERATED_ORDER){case a.GENERATED_ORDER:i=this._generatedMappings;break;case a.ORIGINAL_ORDER:i=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var s=this.sourceRoot;i.map(function(e){var t=null===e.source?null:this._sources.at(e.source);return{source:t=r.computeSourceURL(s,t,this._sourceMapURL),generatedLine:e.generatedLine,generatedColumn:e.generatedColumn,originalLine:e.originalLine,originalColumn:e.originalColumn,name:null===e.name?null:this._names.at(e.name)}},this).forEach(e,u)},a.prototype.allGeneratedPositionsFor=function(e){var t=r.getArg(e,"line"),n={source:r.getArg(e,"source"),originalLine:t,originalColumn:r.getArg(e,"column",0)};if(n.source=this._findSourceIndex(n.source),n.source<0)return[];var u=[],s=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",r.compareByOriginalPositions,i.LEAST_UPPER_BOUND);if(s>=0){var o=this._originalMappings[s];if(void 0===e.column)for(var a=o.originalLine;o&&o.originalLine===a;)u.push({line:r.getArg(o,"generatedLine",null),column:r.getArg(o,"generatedColumn",null),lastColumn:r.getArg(o,"lastGeneratedColumn",null)}),o=this._originalMappings[++s];else for(var h=o.originalColumn;o&&o.originalLine===t&&o.originalColumn==h;)u.push({line:r.getArg(o,"generatedLine",null),column:r.getArg(o,"generatedColumn",null),lastColumn:r.getArg(o,"lastGeneratedColumn",null)}),o=this._originalMappings[++s]}return u},t.SourceMapConsumer=a,h.prototype=Object.create(a.prototype),h.prototype.consumer=a,h.prototype._findSourceIndex=function(e){var t,n=e;if(null!=this.sourceRoot&&(n=r.relative(this.sourceRoot,n)),this._sources.has(n))return this._sources.indexOf(n);for(t=0;t<this._absoluteSources.length;++t)if(this._absoluteSources[t]==e)return t;return-1},h.fromSourceMap=function(e,t){var n=Object.create(h.prototype),i=n._names=u.fromArray(e._names.toArray(),!0),s=n._sources=u.fromArray(e._sources.toArray(),!0);n.sourceRoot=e._sourceRoot,n.sourcesContent=e._generateSourcesContent(n._sources.toArray(),n.sourceRoot),n.file=e._file,n._sourceMapURL=t,n._absoluteSources=n._sources.toArray().map(function(e){return r.computeSourceURL(n.sourceRoot,e,t)});for(var a=e._mappings.toArray().slice(),l=n.__generatedMappings=[],p=n.__originalMappings=[],d=0,f=a.length;d<f;d++){var D=a[d],m=new c;m.generatedLine=D.generatedLine,m.generatedColumn=D.generatedColumn,D.source&&(m.source=s.indexOf(D.source),m.originalLine=D.originalLine,m.originalColumn=D.originalColumn,D.name&&(m.name=i.indexOf(D.name)),p.push(m)),l.push(m)}return o(n.__originalMappings,r.compareByOriginalPositions),n},h.prototype._version=3,Object.defineProperty(h.prototype,"sources",{get:function(){return this._absoluteSources.slice()}}),h.prototype._parseMappings=function(e,t){for(var n,i,u,a,h,l=1,p=0,d=0,f=0,D=0,m=0,A=e.length,E=0,C={},g={},x=[],F=[];E<A;)if(";"===e.charAt(E))l++,E++,p=0;else if(","===e.charAt(E))E++;else{for((n=new c).generatedLine=l,a=E;a<A&&!this._charIsMappingSeparator(e,a);a++);if(u=C[i=e.slice(E,a)])E+=i.length;else{for(u=[];E<a;)s.decode(e,E,g),h=g.value,E=g.rest,u.push(h);if(2===u.length)throw new Error("Found a source, but no line and column");if(3===u.length)throw new Error("Found a source and line, but no column");C[i]=u}n.generatedColumn=p+u[0],p=n.generatedColumn,u.length>1&&(n.source=D+u[1],D+=u[1],n.originalLine=d+u[2],d=n.originalLine,n.originalLine+=1,n.originalColumn=f+u[3],f=n.originalColumn,u.length>4&&(n.name=m+u[4],m+=u[4])),F.push(n),"number"==typeof n.originalLine&&x.push(n)}o(F,r.compareByGeneratedPositionsDeflated),this.__generatedMappings=F,o(x,r.compareByOriginalPositions),this.__originalMappings=x},h.prototype._findMapping=function(e,t,n,r,u,s){if(e[n]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+e[n]);if(e[r]<0)throw new TypeError("Column must be greater than or equal to 0, got "+e[r]);return i.search(e,t,u,s)},h.prototype.computeColumnSpans=function(){for(var e=0;e<this._generatedMappings.length;++e){var t=this._generatedMappings[e];if(e+1<this._generatedMappings.length){var n=this._generatedMappings[e+1];if(t.generatedLine===n.generatedLine){t.lastGeneratedColumn=n.generatedColumn-1;continue}}t.lastGeneratedColumn=1/0}},h.prototype.originalPositionFor=function(e){var t={generatedLine:r.getArg(e,"line"),generatedColumn:r.getArg(e,"column")},n=this._findMapping(t,this._generatedMappings,"generatedLine","generatedColumn",r.compareByGeneratedPositionsDeflated,r.getArg(e,"bias",a.GREATEST_LOWER_BOUND));if(n>=0){var i=this._generatedMappings[n];if(i.generatedLine===t.generatedLine){var u=r.getArg(i,"source",null);null!==u&&(u=this._sources.at(u),u=r.computeSourceURL(this.sourceRoot,u,this._sourceMapURL));var s=r.getArg(i,"name",null);return null!==s&&(s=this._names.at(s)),{source:u,line:r.getArg(i,"originalLine",null),column:r.getArg(i,"originalColumn",null),name:s}}}return{source:null,line:null,column:null,name:null}},h.prototype.hasContentsOfAllSources=function(){return!!this.sourcesContent&&(this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some(function(e){return null==e}))},h.prototype.sourceContentFor=function(e,t){if(!this.sourcesContent)return null;var n=this._findSourceIndex(e);if(n>=0)return this.sourcesContent[n];var i,u=e;if(null!=this.sourceRoot&&(u=r.relative(this.sourceRoot,u)),null!=this.sourceRoot&&(i=r.urlParse(this.sourceRoot))){var s=u.replace(/^file:\/\//,"");if("file"==i.scheme&&this._sources.has(s))return this.sourcesContent[this._sources.indexOf(s)];if((!i.path||"/"==i.path)&&this._sources.has("/"+u))return this.sourcesContent[this._sources.indexOf("/"+u)]}if(t)return null;throw new Error('"'+u+'" is not in the SourceMap.')},h.prototype.generatedPositionFor=function(e){var t=r.getArg(e,"source");if((t=this._findSourceIndex(t))<0)return{line:null,column:null,lastColumn:null};var n={source:t,originalLine:r.getArg(e,"line"),originalColumn:r.getArg(e,"column")},i=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",r.compareByOriginalPositions,r.getArg(e,"bias",a.GREATEST_LOWER_BOUND));if(i>=0){var u=this._originalMappings[i];if(u.source===n.source)return{line:r.getArg(u,"generatedLine",null),column:r.getArg(u,"generatedColumn",null),lastColumn:r.getArg(u,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}},t.BasicSourceMapConsumer=h,l.prototype=Object.create(a.prototype),l.prototype.constructor=a,l.prototype._version=3,Object.defineProperty(l.prototype,"sources",{get:function(){for(var e=[],t=0;t<this._sections.length;t++)for(var n=0;n<this._sections[t].consumer.sources.length;n++)e.push(this._sections[t].consumer.sources[n]);return e}}),l.prototype.originalPositionFor=function(e){var t={generatedLine:r.getArg(e,"line"),generatedColumn:r.getArg(e,"column")},n=i.search(t,this._sections,function(e,t){var n=e.generatedLine-t.generatedOffset.generatedLine;return n||e.generatedColumn-t.generatedOffset.generatedColumn}),u=this._sections[n];return u?u.consumer.originalPositionFor({line:t.generatedLine-(u.generatedOffset.generatedLine-1),column:t.generatedColumn-(u.generatedOffset.generatedLine===t.generatedLine?u.generatedOffset.generatedColumn-1:0),bias:e.bias}):{source:null,line:null,column:null,name:null}},l.prototype.hasContentsOfAllSources=function(){return this._sections.every(function(e){return e.consumer.hasContentsOfAllSources()})},l.prototype.sourceContentFor=function(e,t){for(var n=0;n<this._sections.length;n++){var r=this._sections[n].consumer.sourceContentFor(e,!0);if(r)return r}if(t)return null;throw new Error('"'+e+'" is not in the SourceMap.')},l.prototype.generatedPositionFor=function(e){for(var t=0;t<this._sections.length;t++){var n=this._sections[t];if(-1!==n.consumer._findSourceIndex(r.getArg(e,"source"))){var i=n.consumer.generatedPositionFor(e);if(i)return{line:i.line+(n.generatedOffset.generatedLine-1),column:i.column+(n.generatedOffset.generatedLine===i.line?n.generatedOffset.generatedColumn-1:0)}}}return{line:null,column:null}},l.prototype._parseMappings=function(e,t){this.__generatedMappings=[],this.__originalMappings=[];for(var n=0;n<this._sections.length;n++)for(var i=this._sections[n],u=i.consumer._generatedMappings,s=0;s<u.length;s++){var a=u[s],h=i.consumer._sources.at(a.source);h=r.computeSourceURL(i.consumer.sourceRoot,h,this._sourceMapURL),this._sources.add(h),h=this._sources.indexOf(h);var c=null;a.name&&(c=i.consumer._names.at(a.name),this._names.add(c),c=this._names.indexOf(c));var l={source:h,generatedLine:a.generatedLine+(i.generatedOffset.generatedLine-1),generatedColumn:a.generatedColumn+(i.generatedOffset.generatedLine===a.generatedLine?i.generatedOffset.generatedColumn-1:0),originalLine:a.originalLine,originalColumn:a.originalColumn,name:c};this.__generatedMappings.push(l),"number"==typeof l.originalLine&&this.__originalMappings.push(l)}o(this.__generatedMappings,r.compareByGeneratedPositionsDeflated),o(this.__originalMappings,r.compareByOriginalPositions)},t.IndexedSourceMapConsumer=l},function(e,t){t.GREATEST_LOWER_BOUND=1,t.LEAST_UPPER_BOUND=2,t.search=function(e,n,r,i){if(0===n.length)return-1;var u=function e(n,r,i,u,s,o){var a=Math.floor((r-n)/2)+n,h=s(i,u[a],!0);return 0===h?a:h>0?r-a>1?e(a,r,i,u,s,o):o==t.LEAST_UPPER_BOUND?r<u.length?r:-1:a:a-n>1?e(n,a,i,u,s,o):o==t.LEAST_UPPER_BOUND?a:n<0?-1:n}(-1,n.length,e,n,r,i||t.GREATEST_LOWER_BOUND);if(u<0)return-1;for(;u-1>=0&&0===r(n[u],n[u-1],!0);)--u;return u}},function(e,t){function n(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function r(e,t,i,u){if(i<u){var s=i-1;n(e,(c=i,l=u,Math.round(c+Math.random()*(l-c))),u);for(var o=e[u],a=i;a<u;a++)t(e[a],o)<=0&&n(e,s+=1,a);n(e,s+1,a);var h=s+1;r(e,t,i,h-1),r(e,t,h+1,u)}var c,l}t.quickSort=function(e,t){r(e,t,0,e.length-1)}},function(e,t,n){var r=n(7).SourceMapGenerator,i=n(2),u=/(\r?\n)/,s="$$$isSourceNode$$$";function o(e,t,n,r,i){this.children=[],this.sourceContents={},this.line=null==e?null:e,this.column=null==t?null:t,this.source=null==n?null:n,this.name=null==i?null:i,this[s]=!0,null!=r&&this.add(r)}o.fromStringWithSourceMap=function(e,t,n){var r=new o,s=e.split(u),a=0,h=function(){return e()+(e()||"");function e(){return a<s.length?s[a++]:void 0}},c=1,l=0,p=null;return t.eachMapping(function(e){if(null!==p){if(!(c<e.generatedLine)){var t=(n=s[a]||"").substr(0,e.generatedColumn-l);return s[a]=n.substr(e.generatedColumn-l),l=e.generatedColumn,d(p,t),void(p=e)}d(p,h()),c++,l=0}for(;c<e.generatedLine;)r.add(h()),c++;if(l<e.generatedColumn){var n=s[a]||"";r.add(n.substr(0,e.generatedColumn)),s[a]=n.substr(e.generatedColumn),l=e.generatedColumn}p=e},this),a<s.length&&(p&&d(p,h()),r.add(s.splice(a).join(""))),t.sources.forEach(function(e){var u=t.sourceContentFor(e);null!=u&&(null!=n&&(e=i.join(n,e)),r.setSourceContent(e,u))}),r;function d(e,t){if(null===e||void 0===e.source)r.add(t);else{var u=n?i.join(n,e.source):e.source;r.add(new o(e.originalLine,e.originalColumn,u,t,e.name))}}},o.prototype.add=function(e){if(Array.isArray(e))e.forEach(function(e){this.add(e)},this);else{if(!e[s]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);e&&this.children.push(e)}return this},o.prototype.prepend=function(e){if(Array.isArray(e))for(var t=e.length-1;t>=0;t--)this.prepend(e[t]);else{if(!e[s]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);this.children.unshift(e)}return this},o.prototype.walk=function(e){for(var t,n=0,r=this.children.length;n<r;n++)(t=this.children[n])[s]?t.walk(e):""!==t&&e(t,{source:this.source,line:this.line,column:this.column,name:this.name})},o.prototype.join=function(e){var t,n,r=this.children.length;if(r>0){for(t=[],n=0;n<r-1;n++)t.push(this.children[n]),t.push(e);t.push(this.children[n]),this.children=t}return this},o.prototype.replaceRight=function(e,t){var n=this.children[this.children.length-1];return n[s]?n.replaceRight(e,t):"string"==typeof n?this.children[this.children.length-1]=n.replace(e,t):this.children.push("".replace(e,t)),this},o.prototype.setSourceContent=function(e,t){this.sourceContents[i.toSetString(e)]=t},o.prototype.walkSourceContents=function(e){for(var t=0,n=this.children.length;t<n;t++)this.children[t][s]&&this.children[t].walkSourceContents(e);var r=Object.keys(this.sourceContents);for(t=0,n=r.length;t<n;t++)e(i.fromSetString(r[t]),this.sourceContents[r[t]])},o.prototype.toString=function(){var e="";return this.walk(function(t){e+=t}),e},o.prototype.toStringWithSourceMap=function(e){var t={code:"",line:1,column:0},n=new r(e),i=!1,u=null,s=null,o=null,a=null;return this.walk(function(e,r){t.code+=e,null!==r.source&&null!==r.line&&null!==r.column?(u===r.source&&s===r.line&&o===r.column&&a===r.name||n.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:t.line,column:t.column},name:r.name}),u=r.source,s=r.line,o=r.column,a=r.name,i=!0):i&&(n.addMapping({generated:{line:t.line,column:t.column}}),u=null,i=!1);for(var h=0,c=e.length;h<c;h++)10===e.charCodeAt(h)?(t.line++,t.column=0,h+1===c?(u=null,i=!1):i&&n.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:t.line,column:t.column},name:r.name})):t.column++}),this.walkSourceContents(function(e,t){n.setSourceContent(e,t)}),{code:t.code,map:n}},t.SourceNode=o},function(e){e.exports={_args:[["escodegen","/home/maxbundy/git/progrem-viewer"]],_from:"escodegen@latest",_hasShrinkwrap:!1,_id:"escodegen@1.11.1",_inCache:!0,_installable:!0,_location:"/escodegen",_nodeVersion:"11.6.0",_npmOperationalInternal:{host:"s3://npm-registry-packages",tmp:"tmp/escodegen_1.11.1_1550586685457_0.004158698030969132"},_npmUser:{email:"npm@michael.ficarra.me",name:"michaelficarra"},_npmVersion:"6.5.0-next.0",_phantomChildren:{},_requested:{name:"escodegen",raw:"escodegen",rawSpec:"",scope:null,spec:"latest",type:"tag"},_requiredBy:["/"],_resolved:"https://registry.npmjs.org/escodegen/-/escodegen-1.11.1.tgz",_shasum:"c485ff8d6b4cdb89e27f4a856e91f118401ca510",_shrinkwrap:null,_spec:"escodegen",_where:"/home/maxbundy/git/progrem-viewer",bin:{escodegen:"./bin/escodegen.js",esgenerate:"./bin/esgenerate.js"},bugs:{url:"https://github.com/estools/escodegen/issues"},dependencies:{esprima:"^3.1.3",estraverse:"^4.2.0",esutils:"^2.0.2",optionator:"^0.8.1","source-map":"~0.6.1"},description:"ECMAScript code generator",devDependencies:{acorn:"^4.0.4",bluebird:"^3.4.7","bower-registry-client":"^1.0.0",chai:"^3.5.0","commonjs-everywhere":"^0.9.7",gulp:"^3.8.10","gulp-eslint":"^3.0.1","gulp-mocha":"^3.0.1",semver:"^5.1.0"},directories:{},dist:{fileCount:6,integrity:"sha512-JwiqFD9KdGVVpeuRa68yU3zZnBEOcPs0nKW7wZzXky8Z7tffdYUHbe11bPCV5jYlK6DVdKLWLm0f5I/QlL0Kmw==","npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcbBM+CRA9TVsSAnZWagAAnkEP/06UJ97j32aJDg5KEQ6g\nKIL7BbgPL0DfDi+rZrhK1O+Ex6scdcoXbtqW1TjnOgK0xAfoVuMfQYRVR8Oa\nCXTFpSDYer9Sj9wiW7WVR/zwlY8+EyFzMzStSeWxhw+apsP82JjsQY6YfyQV\neE1I/MFnMv3BlKmfmim1fyU7KdT25k5/afNbSiIwhA6aS+z+/JjYOLpqwCzx\nK9BEBUcp5/XB4Or2Oh/yufrYsC8HeDcw90+0NDqypfT5+L6uYOiXcanFMaTb\n/NBAYK4VoG/O9raBkBi4dWKB4OIAEzph4vTQAydMxVmp8luBGNEqsOq/8mIj\nfvVQus1HNKjDDJS4U3VUJolQTFlvBOQ/QBktL6Fw0Xu+lr/6zoUZ2o63/vtb\n5UPXu1vAdDKDejWatzcdyhzfX2fxfmUzLIDMiru/eCHl4X2U/eNRIJc9/GSY\nTEqFohxuv6UrZmHTR0dzBl0vwj8/L90c1YRvAm3enYYLjxqGVZaCSurOoYm4\nX987/jmOsZik9ZPOXJncHf+ZYAqEZPcYcOCMpXHxUQmmwmj+jci+7oPxcqHB\nUSOapFL9wd4H4cxhDVzTWQwXeI6V78TH3Hoc16u8OMtWNWazhetqaUdR7S+K\nWRx4cwhdLcx0t0UBqEe2KhIR0MhE9NAcaB4N+bFRDKUNkoOaOWknBHFoDCQJ\nLzku\r\n=cmBR\r\n-----END PGP SIGNATURE-----\r\n",shasum:"c485ff8d6b4cdb89e27f4a856e91f118401ca510",tarball:"https://registry.npmjs.org/escodegen/-/escodegen-1.11.1.tgz",unpackedSize:106130},engines:{node:">=4.0"},gitHead:"4a93ffc24378722dbfd8859d633746ef5916ce86",homepage:"http://github.com/estools/escodegen",license:"BSD-2-Clause",main:"escodegen.js",maintainers:[{name:"constellation",email:"utatane.tea@gmail.com"},{name:"michaelficarra",email:"npm@michael.ficarra.me"}],name:"escodegen",optionalDependencies:{"source-map":"~0.6.1"},readme:"ERROR: No README data found!",repository:{type:"git",url:"git+ssh://git@github.com/estools/escodegen.git"},scripts:{build:"cjsify -a path: tools/entry-point.js > escodegen.browser.js","build-min":"cjsify -ma path: tools/entry-point.js > escodegen.browser.min.js",lint:"gulp lint",release:"node tools/release.js",test:"gulp travis","unit-test":"gulp test"},version:"1.11.1"}},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(32)),u=r(n(33)),s=r(n(5)),o=function(){return function(e){this.node=e}}();t.CodeStatement=o;var a=function(){function e(){}return e.prototype.build=function(e){if(e)return new o(e);throw new Error("Unable to build non statement code !")},e}(),h=function(){function e(e,t){this.rootNode=e,this.state=t,this.stack=[],this.codeStatementFactory=new a,this.returnValue=null,this.finished=!1,this.stack.push(e)}return e.prototype.declareProgremArguments=function(){var e=this.state.colonne,t=this.state.ligne,n=this.state.contexte;this.state.eval("var colonne = "+e+", ligne = "+t+";"),this.state.eval("var contexte = "+JSON.stringify(n))},e.prototype.executeNext=function(){var e=this;do{var t,n=this.stack.shift();if(!n)throw new Error("Stack should not be empty !");switch(n.type){case"FunctionDeclaration":var r=n;this.stack.unshift(r.body),this.declareProgremArguments();break;case"BlockStatement":n.body.slice().reverse().map(function(t){e.stack.unshift(t)});break;case"IfStatement":t=n;var i=s.generate(t.test);return this.state.eval(i)?this.stack.unshift(t.consequent):t.alternate&&this.stack.unshift(t.alternate),this.codeStatementFactory.build(t.test);case"ReturnStatement":return t=n,this.returnValue=this.state.eval(s.generate(t.argument)),this.finished=!0,this.codeStatementFactory.build(t);default:var u=s.generate(n);this.state.eval(u);return this.codeStatementFactory.build(n)}}while(this.stack.length>0);throw new Error("Iterator has no more code to execute !")},e.prototype.hasNext=function(){if(this.finished)return!1;for(var e=this.stack.slice(0),t=function(){var t=e.shift();if(t){if("BlockStatement"!==t.type)return{value:!0};var n=[],r=t;n.push(r);for(var i=!1;!i&&n.length>0;){var u=n.shift();u&&u.body.map(function(e){"BlockStatement"!==e.type?i=!0:n.push(e)})}return{value:i}}};e.length>0;){var n=t();if("object"==typeof n)return n.value}return!1},e}(),c=function(){function e(e){this.esprimaProgram=i.parseModule(e)}return e.prototype.initialiserProgremFunction=function(){var e=null;if(u.walk(this.esprimaProgram,function(t){"FunctionDeclaration"===t.type&&t.id&&"initialiserProgrem"===t.id.name&&(e=t)}),e)return e;throw new Error("Impossible de trouver une fonction colorerProgrem() !")},e.prototype.colorerProgremFunction=function(){var e=null;if(u.walk(this.esprimaProgram,function(t){"FunctionDeclaration"===t.type&&t.id&&"colorerProgrem"===t.id.name&&(e=t)}),e)return e;throw new Error("Impossible de trouver une fonction colorerProgrem() !")},e.prototype.iterator=function(e){return new h(this.colorerProgremFunction(),e)},e}();t.EsprimaProgremCode=c;var l=function(){function e(){}return e.prototype.build=function(e){return new c(e)},e}();!function(e){e.progremCodeFactory=new l,e.loadProgrem=function(e){return new Promise(function(t,n){var r=new XMLHttpRequest;r.open("GET",e),r.onload=function(){var e=r.responseText;console.log("CodeService: Progrem loaded successfully.",e),t(e)},r.onerror=function(){return n(r.statusText)},r.send()})}}(t.CodeService||(t.CodeService={}))},function(e,t,n){var r;r=function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={exports:{},id:r,loaded:!1};return e[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}return n.m=e,n.c=t,n.p="",n(0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(3),u=n(8),s=n(15);function o(e,t,n){var s=null,o=function(e,t){n&&n(e,t),s&&s.visit(e,t)},a="function"==typeof n?o:null,h=!1;if(t){h="boolean"==typeof t.comment&&t.comment;var c="boolean"==typeof t.attachComment&&t.attachComment;(h||c)&&((s=new r.CommentHandler).attach=c,t.comment=!0,a=o)}var l,p=!1;t&&"string"==typeof t.sourceType&&(p="module"===t.sourceType),l=t&&"boolean"==typeof t.jsx&&t.jsx?new i.JSXParser(e,t,a):new u.Parser(e,t,a);var d=p?l.parseModule():l.parseScript();return h&&s&&(d.comments=s.comments),l.config.tokens&&(d.tokens=l.tokens),l.config.tolerant&&(d.errors=l.errorHandler.errors),d}t.parse=o,t.parseModule=function(e,t,n){var r=t||{};return r.sourceType="module",o(e,r,n)},t.parseScript=function(e,t,n){var r=t||{};return r.sourceType="script",o(e,r,n)},t.tokenize=function(e,t,n){var r,i=new s.Tokenizer(e,t);r=[];try{for(;;){var u=i.getNextToken();if(!u)break;n&&(u=n(u)),r.push(u)}}catch(e){i.errorHandler.tolerate(e)}return i.errorHandler.tolerant&&(r.errors=i.errors()),r};var a=n(2);t.Syntax=a.Syntax,t.version="4.0.1"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=function(){function e(){this.attach=!1,this.comments=[],this.stack=[],this.leading=[],this.trailing=[]}return e.prototype.insertInnerComments=function(e,t){if(e.type===r.Syntax.BlockStatement&&0===e.body.length){for(var n=[],i=this.leading.length-1;i>=0;--i){var u=this.leading[i];t.end.offset>=u.start&&(n.unshift(u.comment),this.leading.splice(i,1),this.trailing.splice(i,1))}n.length&&(e.innerComments=n)}},e.prototype.findTrailingComments=function(e){var t=[];if(this.trailing.length>0){for(var n=this.trailing.length-1;n>=0;--n){var r=this.trailing[n];r.start>=e.end.offset&&t.unshift(r.comment)}return this.trailing.length=0,t}var i=this.stack[this.stack.length-1];if(i&&i.node.trailingComments){var u=i.node.trailingComments[0];u&&u.range[0]>=e.end.offset&&(t=i.node.trailingComments,delete i.node.trailingComments)}return t},e.prototype.findLeadingComments=function(e){for(var t,n=[];this.stack.length>0;){if(!((u=this.stack[this.stack.length-1])&&u.start>=e.start.offset))break;t=u.node,this.stack.pop()}if(t){for(var r=(t.leadingComments?t.leadingComments.length:0)-1;r>=0;--r){var i=t.leadingComments[r];i.range[1]<=e.start.offset&&(n.unshift(i),t.leadingComments.splice(r,1))}return t.leadingComments&&0===t.leadingComments.length&&delete t.leadingComments,n}for(r=this.leading.length-1;r>=0;--r){var u;(u=this.leading[r]).start<=e.start.offset&&(n.unshift(u.comment),this.leading.splice(r,1))}return n},e.prototype.visitNode=function(e,t){if(!(e.type===r.Syntax.Program&&e.body.length>0)){this.insertInnerComments(e,t);var n=this.findTrailingComments(t),i=this.findLeadingComments(t);i.length>0&&(e.leadingComments=i),n.length>0&&(e.trailingComments=n),this.stack.push({node:e,start:t.start.offset})}},e.prototype.visitComment=function(e,t){var n="L"===e.type[0]?"Line":"Block",r={type:n,value:e.value};if(e.range&&(r.range=e.range),e.loc&&(r.loc=e.loc),this.comments.push(r),this.attach){var i={comment:{type:n,value:e.value,range:[t.start.offset,t.end.offset]},start:t.start.offset};e.loc&&(i.comment.loc=e.loc),e.type=n,this.leading.push(i),this.trailing.push(i)}},e.prototype.visit=function(e,t){"LineComment"===e.type?this.visitComment(e,t):"BlockComment"===e.type?this.visitComment(e,t):this.attach&&this.visitNode(e,t)},e}();t.CommentHandler=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Syntax={AssignmentExpression:"AssignmentExpression",AssignmentPattern:"AssignmentPattern",ArrayExpression:"ArrayExpression",ArrayPattern:"ArrayPattern",ArrowFunctionExpression:"ArrowFunctionExpression",AwaitExpression:"AwaitExpression",BlockStatement:"BlockStatement",BinaryExpression:"BinaryExpression",BreakStatement:"BreakStatement",CallExpression:"CallExpression",CatchClause:"CatchClause",ClassBody:"ClassBody",ClassDeclaration:"ClassDeclaration",ClassExpression:"ClassExpression",ConditionalExpression:"ConditionalExpression",ContinueStatement:"ContinueStatement",DoWhileStatement:"DoWhileStatement",DebuggerStatement:"DebuggerStatement",EmptyStatement:"EmptyStatement",ExportAllDeclaration:"ExportAllDeclaration",ExportDefaultDeclaration:"ExportDefaultDeclaration",ExportNamedDeclaration:"ExportNamedDeclaration",ExportSpecifier:"ExportSpecifier",ExpressionStatement:"ExpressionStatement",ForStatement:"ForStatement",ForOfStatement:"ForOfStatement",ForInStatement:"ForInStatement",FunctionDeclaration:"FunctionDeclaration",FunctionExpression:"FunctionExpression",Identifier:"Identifier",IfStatement:"IfStatement",ImportDeclaration:"ImportDeclaration",ImportDefaultSpecifier:"ImportDefaultSpecifier",ImportNamespaceSpecifier:"ImportNamespaceSpecifier",ImportSpecifier:"ImportSpecifier",Literal:"Literal",LabeledStatement:"LabeledStatement",LogicalExpression:"LogicalExpression",MemberExpression:"MemberExpression",MetaProperty:"MetaProperty",MethodDefinition:"MethodDefinition",NewExpression:"NewExpression",ObjectExpression:"ObjectExpression",ObjectPattern:"ObjectPattern",Program:"Program",Property:"Property",RestElement:"RestElement",ReturnStatement:"ReturnStatement",SequenceExpression:"SequenceExpression",SpreadElement:"SpreadElement",Super:"Super",SwitchCase:"SwitchCase",SwitchStatement:"SwitchStatement",TaggedTemplateExpression:"TaggedTemplateExpression",TemplateElement:"TemplateElement",TemplateLiteral:"TemplateLiteral",ThisExpression:"ThisExpression",ThrowStatement:"ThrowStatement",TryStatement:"TryStatement",UnaryExpression:"UnaryExpression",UpdateExpression:"UpdateExpression",VariableDeclaration:"VariableDeclaration",VariableDeclarator:"VariableDeclarator",WhileStatement:"WhileStatement",WithStatement:"WithStatement",YieldExpression:"YieldExpression"}},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var u=n(4),s=n(5),o=n(6),a=n(7),h=n(8),c=n(13),l=n(14);function p(e){var t;switch(e.type){case o.JSXSyntax.JSXIdentifier:t=e.name;break;case o.JSXSyntax.JSXNamespacedName:var n=e;t=p(n.namespace)+":"+p(n.name);break;case o.JSXSyntax.JSXMemberExpression:var r=e;t=p(r.object)+"."+p(r.property)}return t}c.TokenName[100]="JSXIdentifier",c.TokenName[101]="JSXText";var d=function(e){function t(t,n,r){return e.call(this,t,n,r)||this}return i(t,e),t.prototype.parsePrimaryExpression=function(){return this.match("<")?this.parseJSXRoot():e.prototype.parsePrimaryExpression.call(this)},t.prototype.startJSX=function(){this.scanner.index=this.startMarker.index,this.scanner.lineNumber=this.startMarker.line,this.scanner.lineStart=this.startMarker.index-this.startMarker.column},t.prototype.finishJSX=function(){this.nextToken()},t.prototype.reenterJSX=function(){this.startJSX(),this.expectJSX("}"),this.config.tokens&&this.tokens.pop()},t.prototype.createJSXNode=function(){return this.collectComments(),{index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}},t.prototype.createJSXChildNode=function(){return{index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}},t.prototype.scanXHTMLEntity=function(e){for(var t="&",n=!0,r=!1,i=!1,s=!1;!this.scanner.eof()&&n&&!r;){var o=this.scanner.source[this.scanner.index];if(o===e)break;if(r=";"===o,t+=o,++this.scanner.index,!r)switch(t.length){case 2:i="#"===o;break;case 3:i&&(n=(s="x"===o)||u.Character.isDecimalDigit(o.charCodeAt(0)),i=i&&!s);break;default:n=(n=n&&!(i&&!u.Character.isDecimalDigit(o.charCodeAt(0))))&&!(s&&!u.Character.isHexDigit(o.charCodeAt(0)))}}if(n&&r&&t.length>2){var a=t.substr(1,t.length-2);i&&a.length>1?t=String.fromCharCode(parseInt(a.substr(1),10)):s&&a.length>2?t=String.fromCharCode(parseInt("0"+a.substr(1),16)):i||s||!l.XHTMLEntities[a]||(t=l.XHTMLEntities[a])}return t},t.prototype.lexJSX=function(){var e=this.scanner.source.charCodeAt(this.scanner.index);if(60===e||62===e||47===e||58===e||61===e||123===e||125===e)return{type:7,value:o=this.scanner.source[this.scanner.index++],lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:this.scanner.index-1,end:this.scanner.index};if(34===e||39===e){for(var t=this.scanner.index,n=this.scanner.source[this.scanner.index++],r="";!this.scanner.eof();){if((a=this.scanner.source[this.scanner.index++])===n)break;r+="&"===a?this.scanXHTMLEntity(n):a}return{type:8,value:r,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}if(46===e){var i=this.scanner.source.charCodeAt(this.scanner.index+1),s=this.scanner.source.charCodeAt(this.scanner.index+2),o=46===i&&46===s?"...":".";t=this.scanner.index;return this.scanner.index+=o.length,{type:7,value:o,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}if(96===e)return{type:10,value:"",lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:this.scanner.index,end:this.scanner.index};if(u.Character.isIdentifierStart(e)&&92!==e){t=this.scanner.index;for(++this.scanner.index;!this.scanner.eof();){var a=this.scanner.source.charCodeAt(this.scanner.index);if(u.Character.isIdentifierPart(a)&&92!==a)++this.scanner.index;else{if(45!==a)break;++this.scanner.index}}return{type:100,value:this.scanner.source.slice(t,this.scanner.index),lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}return this.scanner.lex()},t.prototype.nextJSXToken=function(){this.collectComments(),this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart;var e=this.lexJSX();return this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.config.tokens&&this.tokens.push(this.convertToken(e)),e},t.prototype.nextJSXText=function(){this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart;for(var e=this.scanner.index,t="";!this.scanner.eof();){var n=this.scanner.source[this.scanner.index];if("{"===n||"<"===n)break;++this.scanner.index,t+=n,u.Character.isLineTerminator(n.charCodeAt(0))&&(++this.scanner.lineNumber,"\r"===n&&"\n"===this.scanner.source[this.scanner.index]&&++this.scanner.index,this.scanner.lineStart=this.scanner.index)}this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart;var r={type:101,value:t,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:e,end:this.scanner.index};return t.length>0&&this.config.tokens&&this.tokens.push(this.convertToken(r)),r},t.prototype.peekJSXToken=function(){var e=this.scanner.saveState();this.scanner.scanComments();var t=this.lexJSX();return this.scanner.restoreState(e),t},t.prototype.expectJSX=function(e){var t=this.nextJSXToken();7===t.type&&t.value===e||this.throwUnexpectedToken(t)},t.prototype.matchJSX=function(e){var t=this.peekJSXToken();return 7===t.type&&t.value===e},t.prototype.parseJSXIdentifier=function(){var e=this.createJSXNode(),t=this.nextJSXToken();return 100!==t.type&&this.throwUnexpectedToken(t),this.finalize(e,new s.JSXIdentifier(t.value))},t.prototype.parseJSXElementName=function(){var e=this.createJSXNode(),t=this.parseJSXIdentifier();if(this.matchJSX(":")){var n=t;this.expectJSX(":");var r=this.parseJSXIdentifier();t=this.finalize(e,new s.JSXNamespacedName(n,r))}else if(this.matchJSX("."))for(;this.matchJSX(".");){var i=t;this.expectJSX(".");var u=this.parseJSXIdentifier();t=this.finalize(e,new s.JSXMemberExpression(i,u))}return t},t.prototype.parseJSXAttributeName=function(){var e,t=this.createJSXNode(),n=this.parseJSXIdentifier();if(this.matchJSX(":")){var r=n;this.expectJSX(":");var i=this.parseJSXIdentifier();e=this.finalize(t,new s.JSXNamespacedName(r,i))}else e=n;return e},t.prototype.parseJSXStringLiteralAttribute=function(){var e=this.createJSXNode(),t=this.nextJSXToken();8!==t.type&&this.throwUnexpectedToken(t);var n=this.getTokenRaw(t);return this.finalize(e,new a.Literal(t.value,n))},t.prototype.parseJSXExpressionAttribute=function(){var e=this.createJSXNode();this.expectJSX("{"),this.finishJSX(),this.match("}")&&this.tolerateError("JSX attributes must only be assigned a non-empty expression");var t=this.parseAssignmentExpression();return this.reenterJSX(),this.finalize(e,new s.JSXExpressionContainer(t))},t.prototype.parseJSXAttributeValue=function(){return this.matchJSX("{")?this.parseJSXExpressionAttribute():this.matchJSX("<")?this.parseJSXElement():this.parseJSXStringLiteralAttribute()},t.prototype.parseJSXNameValueAttribute=function(){var e=this.createJSXNode(),t=this.parseJSXAttributeName(),n=null;return this.matchJSX("=")&&(this.expectJSX("="),n=this.parseJSXAttributeValue()),this.finalize(e,new s.JSXAttribute(t,n))},t.prototype.parseJSXSpreadAttribute=function(){var e=this.createJSXNode();this.expectJSX("{"),this.expectJSX("..."),this.finishJSX();var t=this.parseAssignmentExpression();return this.reenterJSX(),this.finalize(e,new s.JSXSpreadAttribute(t))},t.prototype.parseJSXAttributes=function(){for(var e=[];!this.matchJSX("/")&&!this.matchJSX(">");){var t=this.matchJSX("{")?this.parseJSXSpreadAttribute():this.parseJSXNameValueAttribute();e.push(t)}return e},t.prototype.parseJSXOpeningElement=function(){var e=this.createJSXNode();this.expectJSX("<");var t=this.parseJSXElementName(),n=this.parseJSXAttributes(),r=this.matchJSX("/");return r&&this.expectJSX("/"),this.expectJSX(">"),this.finalize(e,new s.JSXOpeningElement(t,r,n))},t.prototype.parseJSXBoundaryElement=function(){var e=this.createJSXNode();if(this.expectJSX("<"),this.matchJSX("/")){this.expectJSX("/");var t=this.parseJSXElementName();return this.expectJSX(">"),this.finalize(e,new s.JSXClosingElement(t))}var n=this.parseJSXElementName(),r=this.parseJSXAttributes(),i=this.matchJSX("/");return i&&this.expectJSX("/"),this.expectJSX(">"),this.finalize(e,new s.JSXOpeningElement(n,i,r))},t.prototype.parseJSXEmptyExpression=function(){var e=this.createJSXChildNode();return this.collectComments(),this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.finalize(e,new s.JSXEmptyExpression)},t.prototype.parseJSXExpressionContainer=function(){var e,t=this.createJSXNode();return this.expectJSX("{"),this.matchJSX("}")?(e=this.parseJSXEmptyExpression(),this.expectJSX("}")):(this.finishJSX(),e=this.parseAssignmentExpression(),this.reenterJSX()),this.finalize(t,new s.JSXExpressionContainer(e))},t.prototype.parseJSXChildren=function(){for(var e=[];!this.scanner.eof();){var t=this.createJSXChildNode(),n=this.nextJSXText();if(n.start<n.end){var r=this.getTokenRaw(n),i=this.finalize(t,new s.JSXText(n.value,r));e.push(i)}if("{"!==this.scanner.source[this.scanner.index])break;var u=this.parseJSXExpressionContainer();e.push(u)}return e},t.prototype.parseComplexJSXElement=function(e){for(var t=[];!this.scanner.eof();){e.children=e.children.concat(this.parseJSXChildren());var n=this.createJSXChildNode(),r=this.parseJSXBoundaryElement();if(r.type===o.JSXSyntax.JSXOpeningElement){var i=r;if(i.selfClosing){var u=this.finalize(n,new s.JSXElement(i,[],null));e.children.push(u)}else t.push(e),e={node:n,opening:i,closing:null,children:[]}}if(r.type===o.JSXSyntax.JSXClosingElement){e.closing=r;var a=p(e.opening.name);if(a!==p(e.closing.name)&&this.tolerateError("Expected corresponding JSX closing tag for %0",a),!(t.length>0))break;u=this.finalize(e.node,new s.JSXElement(e.opening,e.children,e.closing));(e=t[t.length-1]).children.push(u),t.pop()}}return e},t.prototype.parseJSXElement=function(){var e=this.createJSXNode(),t=this.parseJSXOpeningElement(),n=[],r=null;if(!t.selfClosing){var i=this.parseComplexJSXElement({node:e,opening:t,closing:r,children:n});n=i.children,r=i.closing}return this.finalize(e,new s.JSXElement(t,n,r))},t.prototype.parseJSXRoot=function(){this.config.tokens&&this.tokens.pop(),this.startJSX();var e=this.parseJSXElement();return this.finishJSX(),e},t.prototype.isStartOfExpression=function(){return e.prototype.isStartOfExpression.call(this)||this.match("<")},t}(h.Parser);t.JSXParser=d},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={NonAsciiIdentifierStart:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,NonAsciiIdentifierPart:/[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/};t.Character={fromCodePoint:function(e){return e<65536?String.fromCharCode(e):String.fromCharCode(55296+(e-65536>>10))+String.fromCharCode(56320+(e-65536&1023))},isWhiteSpace:function(e){return 32===e||9===e||11===e||12===e||160===e||e>=5760&&[5760,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279].indexOf(e)>=0},isLineTerminator:function(e){return 10===e||13===e||8232===e||8233===e},isIdentifierStart:function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||92===e||e>=128&&n.NonAsciiIdentifierStart.test(t.Character.fromCodePoint(e))},isIdentifierPart:function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||e>=48&&e<=57||92===e||e>=128&&n.NonAsciiIdentifierPart.test(t.Character.fromCodePoint(e))},isDecimalDigit:function(e){return e>=48&&e<=57},isHexDigit:function(e){return e>=48&&e<=57||e>=65&&e<=70||e>=97&&e<=102},isOctalDigit:function(e){return e>=48&&e<=55}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6),i=function(){return function(e){this.type=r.JSXSyntax.JSXClosingElement,this.name=e}}();t.JSXClosingElement=i;var u=function(){return function(e,t,n){this.type=r.JSXSyntax.JSXElement,this.openingElement=e,this.children=t,this.closingElement=n}}();t.JSXElement=u;var s=function(){return function(){this.type=r.JSXSyntax.JSXEmptyExpression}}();t.JSXEmptyExpression=s;var o=function(){return function(e){this.type=r.JSXSyntax.JSXExpressionContainer,this.expression=e}}();t.JSXExpressionContainer=o;var a=function(){return function(e){this.type=r.JSXSyntax.JSXIdentifier,this.name=e}}();t.JSXIdentifier=a;var h=function(){return function(e,t){this.type=r.JSXSyntax.JSXMemberExpression,this.object=e,this.property=t}}();t.JSXMemberExpression=h;var c=function(){return function(e,t){this.type=r.JSXSyntax.JSXAttribute,this.name=e,this.value=t}}();t.JSXAttribute=c;var l=function(){return function(e,t){this.type=r.JSXSyntax.JSXNamespacedName,this.namespace=e,this.name=t}}();t.JSXNamespacedName=l;var p=function(){return function(e,t,n){this.type=r.JSXSyntax.JSXOpeningElement,this.name=e,this.selfClosing=t,this.attributes=n}}();t.JSXOpeningElement=p;var d=function(){return function(e){this.type=r.JSXSyntax.JSXSpreadAttribute,this.argument=e}}();t.JSXSpreadAttribute=d;var f=function(){return function(e,t){this.type=r.JSXSyntax.JSXText,this.value=e,this.raw=t}}();t.JSXText=f},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JSXSyntax={JSXAttribute:"JSXAttribute",JSXClosingElement:"JSXClosingElement",JSXElement:"JSXElement",JSXEmptyExpression:"JSXEmptyExpression",JSXExpressionContainer:"JSXExpressionContainer",JSXIdentifier:"JSXIdentifier",JSXMemberExpression:"JSXMemberExpression",JSXNamespacedName:"JSXNamespacedName",JSXOpeningElement:"JSXOpeningElement",JSXSpreadAttribute:"JSXSpreadAttribute",JSXText:"JSXText"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=function(){return function(e){this.type=r.Syntax.ArrayExpression,this.elements=e}}();t.ArrayExpression=i;var u=function(){return function(e){this.type=r.Syntax.ArrayPattern,this.elements=e}}();t.ArrayPattern=u;var s=function(){return function(e,t,n){this.type=r.Syntax.ArrowFunctionExpression,this.id=null,this.params=e,this.body=t,this.generator=!1,this.expression=n,this.async=!1}}();t.ArrowFunctionExpression=s;var o=function(){return function(e,t,n){this.type=r.Syntax.AssignmentExpression,this.operator=e,this.left=t,this.right=n}}();t.AssignmentExpression=o;var a=function(){return function(e,t){this.type=r.Syntax.AssignmentPattern,this.left=e,this.right=t}}();t.AssignmentPattern=a;var h=function(){return function(e,t,n){this.type=r.Syntax.ArrowFunctionExpression,this.id=null,this.params=e,this.body=t,this.generator=!1,this.expression=n,this.async=!0}}();t.AsyncArrowFunctionExpression=h;var c=function(){return function(e,t,n){this.type=r.Syntax.FunctionDeclaration,this.id=e,this.params=t,this.body=n,this.generator=!1,this.expression=!1,this.async=!0}}();t.AsyncFunctionDeclaration=c;var l=function(){return function(e,t,n){this.type=r.Syntax.FunctionExpression,this.id=e,this.params=t,this.body=n,this.generator=!1,this.expression=!1,this.async=!0}}();t.AsyncFunctionExpression=l;var p=function(){return function(e){this.type=r.Syntax.AwaitExpression,this.argument=e}}();t.AwaitExpression=p;var d=function(){return function(e,t,n){var i="||"===e||"&&"===e;this.type=i?r.Syntax.LogicalExpression:r.Syntax.BinaryExpression,this.operator=e,this.left=t,this.right=n}}();t.BinaryExpression=d;var f=function(){return function(e){this.type=r.Syntax.BlockStatement,this.body=e}}();t.BlockStatement=f;var D=function(){return function(e){this.type=r.Syntax.BreakStatement,this.label=e}}();t.BreakStatement=D;var m=function(){return function(e,t){this.type=r.Syntax.CallExpression,this.callee=e,this.arguments=t}}();t.CallExpression=m;var A=function(){return function(e,t){this.type=r.Syntax.CatchClause,this.param=e,this.body=t}}();t.CatchClause=A;var E=function(){return function(e){this.type=r.Syntax.ClassBody,this.body=e}}();t.ClassBody=E;var C=function(){return function(e,t,n){this.type=r.Syntax.ClassDeclaration,this.id=e,this.superClass=t,this.body=n}}();t.ClassDeclaration=C;var g=function(){return function(e,t,n){this.type=r.Syntax.ClassExpression,this.id=e,this.superClass=t,this.body=n}}();t.ClassExpression=g;var x=function(){return function(e,t){this.type=r.Syntax.MemberExpression,this.computed=!0,this.object=e,this.property=t}}();t.ComputedMemberExpression=x;var F=function(){return function(e,t,n){this.type=r.Syntax.ConditionalExpression,this.test=e,this.consequent=t,this.alternate=n}}();t.ConditionalExpression=F;var y=function(){return function(e){this.type=r.Syntax.ContinueStatement,this.label=e}}();t.ContinueStatement=y;var v=function(){return function(){this.type=r.Syntax.DebuggerStatement}}();t.DebuggerStatement=v;var S=function(){return function(e,t){this.type=r.Syntax.ExpressionStatement,this.expression=e,this.directive=t}}();t.Directive=S;var B=function(){return function(e,t){this.type=r.Syntax.DoWhileStatement,this.body=e,this.test=t}}();t.DoWhileStatement=B;var b=function(){return function(){this.type=r.Syntax.EmptyStatement}}();t.EmptyStatement=b;var w=function(){return function(e){this.type=r.Syntax.ExportAllDeclaration,this.source=e}}();t.ExportAllDeclaration=w;var k=function(){return function(e){this.type=r.Syntax.ExportDefaultDeclaration,this.declaration=e}}();t.ExportDefaultDeclaration=k;var I=function(){return function(e,t,n){this.type=r.Syntax.ExportNamedDeclaration,this.declaration=e,this.specifiers=t,this.source=n}}();t.ExportNamedDeclaration=I;var T=function(){return function(e,t){this.type=r.Syntax.ExportSpecifier,this.exported=t,this.local=e}}();t.ExportSpecifier=T;var _=function(){return function(e){this.type=r.Syntax.ExpressionStatement,this.expression=e}}();t.ExpressionStatement=_;var N=function(){return function(e,t,n){this.type=r.Syntax.ForInStatement,this.left=e,this.right=t,this.body=n,this.each=!1}}();t.ForInStatement=N;var P=function(){return function(e,t,n){this.type=r.Syntax.ForOfStatement,this.left=e,this.right=t,this.body=n}}();t.ForOfStatement=P;var M=function(){return function(e,t,n,i){this.type=r.Syntax.ForStatement,this.init=e,this.test=t,this.update=n,this.body=i}}();t.ForStatement=M;var L=function(){return function(e,t,n,i){this.type=r.Syntax.FunctionDeclaration,this.id=e,this.params=t,this.body=n,this.generator=i,this.expression=!1,this.async=!1}}();t.FunctionDeclaration=L;var O=function(){return function(e,t,n,i){this.type=r.Syntax.FunctionExpression,this.id=e,this.params=t,this.body=n,this.generator=i,this.expression=!1,this.async=!1}}();t.FunctionExpression=O;var R=function(){return function(e){this.type=r.Syntax.Identifier,this.name=e}}();t.Identifier=R;var U=function(){return function(e,t,n){this.type=r.Syntax.IfStatement,this.test=e,this.consequent=t,this.alternate=n}}();t.IfStatement=U;var z=function(){return function(e,t){this.type=r.Syntax.ImportDeclaration,this.specifiers=e,this.source=t}}();t.ImportDeclaration=z;var X=function(){return function(e){this.type=r.Syntax.ImportDefaultSpecifier,this.local=e}}();t.ImportDefaultSpecifier=X;var j=function(){return function(e){this.type=r.Syntax.ImportNamespaceSpecifier,this.local=e}}();t.ImportNamespaceSpecifier=j;var J=function(){return function(e,t){this.type=r.Syntax.ImportSpecifier,this.local=e,this.imported=t}}();t.ImportSpecifier=J;var q=function(){return function(e,t){this.type=r.Syntax.LabeledStatement,this.label=e,this.body=t}}();t.LabeledStatement=q;var K=function(){return function(e,t){this.type=r.Syntax.Literal,this.value=e,this.raw=t}}();t.Literal=K;var H=function(){return function(e,t){this.type=r.Syntax.MetaProperty,this.meta=e,this.property=t}}();t.MetaProperty=H;var W=function(){return function(e,t,n,i,u){this.type=r.Syntax.MethodDefinition,this.key=e,this.computed=t,this.value=n,this.kind=i,this.static=u}}();t.MethodDefinition=W;var V=function(){return function(e){this.type=r.Syntax.Program,this.body=e,this.sourceType="module"}}();t.Module=V;var G=function(){return function(e,t){this.type=r.Syntax.NewExpression,this.callee=e,this.arguments=t}}();t.NewExpression=G;var Y=function(){return function(e){this.type=r.Syntax.ObjectExpression,this.properties=e}}();t.ObjectExpression=Y;var $=function(){return function(e){this.type=r.Syntax.ObjectPattern,this.properties=e}}();t.ObjectPattern=$;var Q=function(){return function(e,t,n,i,u,s){this.type=r.Syntax.Property,this.key=t,this.computed=n,this.value=i,this.kind=e,this.method=u,this.shorthand=s}}();t.Property=Q;var Z=function(){return function(e,t,n,i){this.type=r.Syntax.Literal,this.value=e,this.raw=t,this.regex={pattern:n,flags:i}}}();t.RegexLiteral=Z;var ee=function(){return function(e){this.type=r.Syntax.RestElement,this.argument=e}}();t.RestElement=ee;var te=function(){return function(e){this.type=r.Syntax.ReturnStatement,this.argument=e}}();t.ReturnStatement=te;var ne=function(){return function(e){this.type=r.Syntax.Program,this.body=e,this.sourceType="script"}}();t.Script=ne;var re=function(){return function(e){this.type=r.Syntax.SequenceExpression,this.expressions=e}}();t.SequenceExpression=re;var ie=function(){return function(e){this.type=r.Syntax.SpreadElement,this.argument=e}}();t.SpreadElement=ie;var ue=function(){return function(e,t){this.type=r.Syntax.MemberExpression,this.computed=!1,this.object=e,this.property=t}}();t.StaticMemberExpression=ue;var se=function(){return function(){this.type=r.Syntax.Super}}();t.Super=se;var oe=function(){return function(e,t){this.type=r.Syntax.SwitchCase,this.test=e,this.consequent=t}}();t.SwitchCase=oe;var ae=function(){return function(e,t){this.type=r.Syntax.SwitchStatement,this.discriminant=e,this.cases=t}}();t.SwitchStatement=ae;var he=function(){return function(e,t){this.type=r.Syntax.TaggedTemplateExpression,this.tag=e,this.quasi=t}}();t.TaggedTemplateExpression=he;var ce=function(){return function(e,t){this.type=r.Syntax.TemplateElement,this.value=e,this.tail=t}}();t.TemplateElement=ce;var le=function(){return function(e,t){this.type=r.Syntax.TemplateLiteral,this.quasis=e,this.expressions=t}}();t.TemplateLiteral=le;var pe=function(){return function(){this.type=r.Syntax.ThisExpression}}();t.ThisExpression=pe;var de=function(){return function(e){this.type=r.Syntax.ThrowStatement,this.argument=e}}();t.ThrowStatement=de;var fe=function(){return function(e,t,n){this.type=r.Syntax.TryStatement,this.block=e,this.handler=t,this.finalizer=n}}();t.TryStatement=fe;var De=function(){return function(e,t){this.type=r.Syntax.UnaryExpression,this.operator=e,this.argument=t,this.prefix=!0}}();t.UnaryExpression=De;var me=function(){return function(e,t,n){this.type=r.Syntax.UpdateExpression,this.operator=e,this.argument=t,this.prefix=n}}();t.UpdateExpression=me;var Ae=function(){return function(e,t){this.type=r.Syntax.VariableDeclaration,this.declarations=e,this.kind=t}}();t.VariableDeclaration=Ae;var Ee=function(){return function(e,t){this.type=r.Syntax.VariableDeclarator,this.id=e,this.init=t}}();t.VariableDeclarator=Ee;var Ce=function(){return function(e,t){this.type=r.Syntax.WhileStatement,this.test=e,this.body=t}}();t.WhileStatement=Ce;var ge=function(){return function(e,t){this.type=r.Syntax.WithStatement,this.object=e,this.body=t}}();t.WithStatement=ge;var xe=function(){return function(e,t){this.type=r.Syntax.YieldExpression,this.argument=e,this.delegate=t}}();t.YieldExpression=xe},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9),i=n(10),u=n(11),s=n(7),o=n(12),a=n(2),h=n(13),c=function(){function e(e,t,n){void 0===t&&(t={}),this.config={range:"boolean"==typeof t.range&&t.range,loc:"boolean"==typeof t.loc&&t.loc,source:null,tokens:"boolean"==typeof t.tokens&&t.tokens,comment:"boolean"==typeof t.comment&&t.comment,tolerant:"boolean"==typeof t.tolerant&&t.tolerant},this.config.loc&&t.source&&null!==t.source&&(this.config.source=String(t.source)),this.delegate=n,this.errorHandler=new i.ErrorHandler,this.errorHandler.tolerant=this.config.tolerant,this.scanner=new o.Scanner(e,this.errorHandler),this.scanner.trackComment=this.config.comment,this.operatorPrecedence={")":0,";":0,",":0,"=":0,"]":0,"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":11,"/":11,"%":11},this.lookahead={type:2,value:"",lineNumber:this.scanner.lineNumber,lineStart:0,start:0,end:0},this.hasLineTerminator=!1,this.context={isModule:!1,await:!1,allowIn:!0,allowStrictDirective:!0,allowYield:!0,firstCoverInitializedNameError:null,isAssignmentTarget:!1,isBindingElement:!1,inFunctionBody:!1,inIteration:!1,inSwitch:!1,labelSet:{},strict:!1},this.tokens=[],this.startMarker={index:0,line:this.scanner.lineNumber,column:0},this.lastMarker={index:0,line:this.scanner.lineNumber,column:0},this.nextToken(),this.lastMarker={index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}}return e.prototype.throwError=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var i=Array.prototype.slice.call(arguments,1),u=e.replace(/%(\d)/g,function(e,t){return r.assert(t<i.length,"Message reference must be in range"),i[t]}),s=this.lastMarker.index,o=this.lastMarker.line,a=this.lastMarker.column+1;throw this.errorHandler.createError(s,o,a,u)},e.prototype.tolerateError=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var i=Array.prototype.slice.call(arguments,1),u=e.replace(/%(\d)/g,function(e,t){return r.assert(t<i.length,"Message reference must be in range"),i[t]}),s=this.lastMarker.index,o=this.scanner.lineNumber,a=this.lastMarker.column+1;this.errorHandler.tolerateError(s,o,a,u)},e.prototype.unexpectedTokenError=function(e,t){var n,r=t||u.Messages.UnexpectedToken;if(e?(t||(r=2===e.type?u.Messages.UnexpectedEOS:3===e.type?u.Messages.UnexpectedIdentifier:6===e.type?u.Messages.UnexpectedNumber:8===e.type?u.Messages.UnexpectedString:10===e.type?u.Messages.UnexpectedTemplate:u.Messages.UnexpectedToken,4===e.type&&(this.scanner.isFutureReservedWord(e.value)?r=u.Messages.UnexpectedReserved:this.context.strict&&this.scanner.isStrictModeReservedWord(e.value)&&(r=u.Messages.StrictReservedWord))),n=e.value):n="ILLEGAL",r=r.replace("%0",n),e&&"number"==typeof e.lineNumber){var i=e.start,s=e.lineNumber,o=this.lastMarker.index-this.lastMarker.column,a=e.start-o+1;return this.errorHandler.createError(i,s,a,r)}i=this.lastMarker.index,s=this.lastMarker.line,a=this.lastMarker.column+1;return this.errorHandler.createError(i,s,a,r)},e.prototype.throwUnexpectedToken=function(e,t){throw this.unexpectedTokenError(e,t)},e.prototype.tolerateUnexpectedToken=function(e,t){this.errorHandler.tolerate(this.unexpectedTokenError(e,t))},e.prototype.collectComments=function(){if(this.config.comment){var e=this.scanner.scanComments();if(e.length>0&&this.delegate)for(var t=0;t<e.length;++t){var n=e[t],r=void 0;r={type:n.multiLine?"BlockComment":"LineComment",value:this.scanner.source.slice(n.slice[0],n.slice[1])},this.config.range&&(r.range=n.range),this.config.loc&&(r.loc=n.loc);var i={start:{line:n.loc.start.line,column:n.loc.start.column,offset:n.range[0]},end:{line:n.loc.end.line,column:n.loc.end.column,offset:n.range[1]}};this.delegate(r,i)}}else this.scanner.scanComments()},e.prototype.getTokenRaw=function(e){return this.scanner.source.slice(e.start,e.end)},e.prototype.convertToken=function(e){var t={type:h.TokenName[e.type],value:this.getTokenRaw(e)};if(this.config.range&&(t.range=[e.start,e.end]),this.config.loc&&(t.loc={start:{line:this.startMarker.line,column:this.startMarker.column},end:{line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}}),9===e.type){var n=e.pattern,r=e.flags;t.regex={pattern:n,flags:r}}return t},e.prototype.nextToken=function(){var e=this.lookahead;this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.collectComments(),this.scanner.index!==this.startMarker.index&&(this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart);var t=this.scanner.lex();return this.hasLineTerminator=e.lineNumber!==t.lineNumber,t&&this.context.strict&&3===t.type&&this.scanner.isStrictModeReservedWord(t.value)&&(t.type=4),this.lookahead=t,this.config.tokens&&2!==t.type&&this.tokens.push(this.convertToken(t)),e},e.prototype.nextRegexToken=function(){this.collectComments();var e=this.scanner.scanRegExp();return this.config.tokens&&(this.tokens.pop(),this.tokens.push(this.convertToken(e))),this.lookahead=e,this.nextToken(),e},e.prototype.createNode=function(){return{index:this.startMarker.index,line:this.startMarker.line,column:this.startMarker.column}},e.prototype.startNode=function(e,t){void 0===t&&(t=0);var n=e.start-e.lineStart,r=e.lineNumber;return n<0&&(n+=t,r--),{index:e.start,line:r,column:n}},e.prototype.finalize=function(e,t){if(this.config.range&&(t.range=[e.index,this.lastMarker.index]),this.config.loc&&(t.loc={start:{line:e.line,column:e.column},end:{line:this.lastMarker.line,column:this.lastMarker.column}},this.config.source&&(t.loc.source=this.config.source)),this.delegate){var n={start:{line:e.line,column:e.column,offset:e.index},end:{line:this.lastMarker.line,column:this.lastMarker.column,offset:this.lastMarker.index}};this.delegate(t,n)}return t},e.prototype.expect=function(e){var t=this.nextToken();7===t.type&&t.value===e||this.throwUnexpectedToken(t)},e.prototype.expectCommaSeparator=function(){if(this.config.tolerant){var e=this.lookahead;7===e.type&&","===e.value?this.nextToken():7===e.type&&";"===e.value?(this.nextToken(),this.tolerateUnexpectedToken(e)):this.tolerateUnexpectedToken(e,u.Messages.UnexpectedToken)}else this.expect(",")},e.prototype.expectKeyword=function(e){var t=this.nextToken();4===t.type&&t.value===e||this.throwUnexpectedToken(t)},e.prototype.match=function(e){return 7===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchKeyword=function(e){return 4===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchContextualKeyword=function(e){return 3===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchAssign=function(){if(7!==this.lookahead.type)return!1;var e=this.lookahead.value;return"="===e||"*="===e||"**="===e||"/="===e||"%="===e||"+="===e||"-="===e||"<<="===e||">>="===e||">>>="===e||"&="===e||"^="===e||"|="===e},e.prototype.isolateCoverGrammar=function(e){var t=this.context.isBindingElement,n=this.context.isAssignmentTarget,r=this.context.firstCoverInitializedNameError;this.context.isBindingElement=!0,this.context.isAssignmentTarget=!0,this.context.firstCoverInitializedNameError=null;var i=e.call(this);return null!==this.context.firstCoverInitializedNameError&&this.throwUnexpectedToken(this.context.firstCoverInitializedNameError),this.context.isBindingElement=t,this.context.isAssignmentTarget=n,this.context.firstCoverInitializedNameError=r,i},e.prototype.inheritCoverGrammar=function(e){var t=this.context.isBindingElement,n=this.context.isAssignmentTarget,r=this.context.firstCoverInitializedNameError;this.context.isBindingElement=!0,this.context.isAssignmentTarget=!0,this.context.firstCoverInitializedNameError=null;var i=e.call(this);return this.context.isBindingElement=this.context.isBindingElement&&t,this.context.isAssignmentTarget=this.context.isAssignmentTarget&&n,this.context.firstCoverInitializedNameError=r||this.context.firstCoverInitializedNameError,i},e.prototype.consumeSemicolon=function(){this.match(";")?this.nextToken():this.hasLineTerminator||(2===this.lookahead.type||this.match("}")||this.throwUnexpectedToken(this.lookahead),this.lastMarker.index=this.startMarker.index,this.lastMarker.line=this.startMarker.line,this.lastMarker.column=this.startMarker.column)},e.prototype.parsePrimaryExpression=function(){var e,t,n,r=this.createNode();switch(this.lookahead.type){case 3:(this.context.isModule||this.context.await)&&"await"===this.lookahead.value&&this.tolerateUnexpectedToken(this.lookahead),e=this.matchAsyncFunction()?this.parseFunctionExpression():this.finalize(r,new s.Identifier(this.nextToken().value));break;case 6:case 8:this.context.strict&&this.lookahead.octal&&this.tolerateUnexpectedToken(this.lookahead,u.Messages.StrictOctalLiteral),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),n=this.getTokenRaw(t),e=this.finalize(r,new s.Literal(t.value,n));break;case 1:this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),n=this.getTokenRaw(t),e=this.finalize(r,new s.Literal("true"===t.value,n));break;case 5:this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),n=this.getTokenRaw(t),e=this.finalize(r,new s.Literal(null,n));break;case 10:e=this.parseTemplateLiteral();break;case 7:switch(this.lookahead.value){case"(":this.context.isBindingElement=!1,e=this.inheritCoverGrammar(this.parseGroupExpression);break;case"[":e=this.inheritCoverGrammar(this.parseArrayInitializer);break;case"{":e=this.inheritCoverGrammar(this.parseObjectInitializer);break;case"/":case"/=":this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.scanner.index=this.startMarker.index,t=this.nextRegexToken(),n=this.getTokenRaw(t),e=this.finalize(r,new s.RegexLiteral(t.regex,n,t.pattern,t.flags));break;default:e=this.throwUnexpectedToken(this.nextToken())}break;case 4:!this.context.strict&&this.context.allowYield&&this.matchKeyword("yield")?e=this.parseIdentifierName():!this.context.strict&&this.matchKeyword("let")?e=this.finalize(r,new s.Identifier(this.nextToken().value)):(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.matchKeyword("function")?e=this.parseFunctionExpression():this.matchKeyword("this")?(this.nextToken(),e=this.finalize(r,new s.ThisExpression)):e=this.matchKeyword("class")?this.parseClassExpression():this.throwUnexpectedToken(this.nextToken()));break;default:e=this.throwUnexpectedToken(this.nextToken())}return e},e.prototype.parseSpreadElement=function(){var e=this.createNode();this.expect("...");var t=this.inheritCoverGrammar(this.parseAssignmentExpression);return this.finalize(e,new s.SpreadElement(t))},e.prototype.parseArrayInitializer=function(){var e=this.createNode(),t=[];for(this.expect("[");!this.match("]");)if(this.match(","))this.nextToken(),t.push(null);else if(this.match("...")){var n=this.parseSpreadElement();this.match("]")||(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.expect(",")),t.push(n)}else t.push(this.inheritCoverGrammar(this.parseAssignmentExpression)),this.match("]")||this.expect(",");return this.expect("]"),this.finalize(e,new s.ArrayExpression(t))},e.prototype.parsePropertyMethod=function(e){this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var t=this.context.strict,n=this.context.allowStrictDirective;this.context.allowStrictDirective=e.simple;var r=this.isolateCoverGrammar(this.parseFunctionSourceElements);return this.context.strict&&e.firstRestricted&&this.tolerateUnexpectedToken(e.firstRestricted,e.message),this.context.strict&&e.stricted&&this.tolerateUnexpectedToken(e.stricted,e.message),this.context.strict=t,this.context.allowStrictDirective=n,r},e.prototype.parsePropertyMethodFunction=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var n=this.parseFormalParameters(),r=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new s.FunctionExpression(null,n.params,r,!1))},e.prototype.parsePropertyMethodAsyncFunction=function(){var e=this.createNode(),t=this.context.allowYield,n=this.context.await;this.context.allowYield=!1,this.context.await=!0;var r=this.parseFormalParameters(),i=this.parsePropertyMethod(r);return this.context.allowYield=t,this.context.await=n,this.finalize(e,new s.AsyncFunctionExpression(null,r.params,i))},e.prototype.parseObjectPropertyKey=function(){var e,t=this.createNode(),n=this.nextToken();switch(n.type){case 8:case 6:this.context.strict&&n.octal&&this.tolerateUnexpectedToken(n,u.Messages.StrictOctalLiteral);var r=this.getTokenRaw(n);e=this.finalize(t,new s.Literal(n.value,r));break;case 3:case 1:case 5:case 4:e=this.finalize(t,new s.Identifier(n.value));break;case 7:"["===n.value?(e=this.isolateCoverGrammar(this.parseAssignmentExpression),this.expect("]")):e=this.throwUnexpectedToken(n);break;default:e=this.throwUnexpectedToken(n)}return e},e.prototype.isPropertyKey=function(e,t){return e.type===a.Syntax.Identifier&&e.name===t||e.type===a.Syntax.Literal&&e.value===t},e.prototype.parseObjectProperty=function(e){var t,n=this.createNode(),r=this.lookahead,i=null,o=null,a=!1,h=!1,c=!1,l=!1;if(3===r.type){var p=r.value;this.nextToken(),a=this.match("["),i=(l=!(this.hasLineTerminator||"async"!==p||this.match(":")||this.match("(")||this.match("*")||this.match(",")))?this.parseObjectPropertyKey():this.finalize(n,new s.Identifier(p))}else this.match("*")?this.nextToken():(a=this.match("["),i=this.parseObjectPropertyKey());var d=this.qualifiedPropertyName(this.lookahead);if(3===r.type&&!l&&"get"===r.value&&d)t="get",a=this.match("["),i=this.parseObjectPropertyKey(),this.context.allowYield=!1,o=this.parseGetterMethod();else if(3===r.type&&!l&&"set"===r.value&&d)t="set",a=this.match("["),i=this.parseObjectPropertyKey(),o=this.parseSetterMethod();else if(7===r.type&&"*"===r.value&&d)t="init",a=this.match("["),i=this.parseObjectPropertyKey(),o=this.parseGeneratorMethod(),h=!0;else if(i||this.throwUnexpectedToken(this.lookahead),t="init",this.match(":")&&!l)!a&&this.isPropertyKey(i,"__proto__")&&(e.value&&this.tolerateError(u.Messages.DuplicateProtoProperty),e.value=!0),this.nextToken(),o=this.inheritCoverGrammar(this.parseAssignmentExpression);else if(this.match("("))o=l?this.parsePropertyMethodAsyncFunction():this.parsePropertyMethodFunction(),h=!0;else if(3===r.type){p=this.finalize(n,new s.Identifier(r.value));if(this.match("=")){this.context.firstCoverInitializedNameError=this.lookahead,this.nextToken(),c=!0;var f=this.isolateCoverGrammar(this.parseAssignmentExpression);o=this.finalize(n,new s.AssignmentPattern(p,f))}else c=!0,o=p}else this.throwUnexpectedToken(this.nextToken());return this.finalize(n,new s.Property(t,i,a,o,h,c))},e.prototype.parseObjectInitializer=function(){var e=this.createNode();this.expect("{");for(var t=[],n={value:!1};!this.match("}");)t.push(this.parseObjectProperty(n)),this.match("}")||this.expectCommaSeparator();return this.expect("}"),this.finalize(e,new s.ObjectExpression(t))},e.prototype.parseTemplateHead=function(){r.assert(this.lookahead.head,"Template literal must start with a template head");var e=this.createNode(),t=this.nextToken(),n=t.value,i=t.cooked;return this.finalize(e,new s.TemplateElement({raw:n,cooked:i},t.tail))},e.prototype.parseTemplateElement=function(){10!==this.lookahead.type&&this.throwUnexpectedToken();var e=this.createNode(),t=this.nextToken(),n=t.value,r=t.cooked;return this.finalize(e,new s.TemplateElement({raw:n,cooked:r},t.tail))},e.prototype.parseTemplateLiteral=function(){var e=this.createNode(),t=[],n=[],r=this.parseTemplateHead();for(n.push(r);!r.tail;)t.push(this.parseExpression()),r=this.parseTemplateElement(),n.push(r);return this.finalize(e,new s.TemplateLiteral(n,t))},e.prototype.reinterpretExpressionAsPattern=function(e){switch(e.type){case a.Syntax.Identifier:case a.Syntax.MemberExpression:case a.Syntax.RestElement:case a.Syntax.AssignmentPattern:break;case a.Syntax.SpreadElement:e.type=a.Syntax.RestElement,this.reinterpretExpressionAsPattern(e.argument);break;case a.Syntax.ArrayExpression:e.type=a.Syntax.ArrayPattern;for(var t=0;t<e.elements.length;t++)null!==e.elements[t]&&this.reinterpretExpressionAsPattern(e.elements[t]);break;case a.Syntax.ObjectExpression:e.type=a.Syntax.ObjectPattern;for(t=0;t<e.properties.length;t++)this.reinterpretExpressionAsPattern(e.properties[t].value);break;case a.Syntax.AssignmentExpression:e.type=a.Syntax.AssignmentPattern,delete e.operator,this.reinterpretExpressionAsPattern(e.left)}},e.prototype.parseGroupExpression=function(){var e;if(this.expect("("),this.match(")"))this.nextToken(),this.match("=>")||this.expect("=>"),e={type:"ArrowParameterPlaceHolder",params:[],async:!1};else{var t=this.lookahead,n=[];if(this.match("..."))e=this.parseRestElement(n),this.expect(")"),this.match("=>")||this.expect("=>"),e={type:"ArrowParameterPlaceHolder",params:[e],async:!1};else{var r=!1;if(this.context.isBindingElement=!0,e=this.inheritCoverGrammar(this.parseAssignmentExpression),this.match(",")){var i=[];for(this.context.isAssignmentTarget=!1,i.push(e);2!==this.lookahead.type&&this.match(",");){if(this.nextToken(),this.match(")")){this.nextToken();for(var u=0;u<i.length;u++)this.reinterpretExpressionAsPattern(i[u]);r=!0,e={type:"ArrowParameterPlaceHolder",params:i,async:!1}}else if(this.match("...")){this.context.isBindingElement||this.throwUnexpectedToken(this.lookahead),i.push(this.parseRestElement(n)),this.expect(")"),this.match("=>")||this.expect("=>"),this.context.isBindingElement=!1;for(u=0;u<i.length;u++)this.reinterpretExpressionAsPattern(i[u]);r=!0,e={type:"ArrowParameterPlaceHolder",params:i,async:!1}}else i.push(this.inheritCoverGrammar(this.parseAssignmentExpression));if(r)break}r||(e=this.finalize(this.startNode(t),new s.SequenceExpression(i)))}if(!r){if(this.expect(")"),this.match("=>")&&(e.type===a.Syntax.Identifier&&"yield"===e.name&&(r=!0,e={type:"ArrowParameterPlaceHolder",params:[e],async:!1}),!r)){if(this.context.isBindingElement||this.throwUnexpectedToken(this.lookahead),e.type===a.Syntax.SequenceExpression)for(u=0;u<e.expressions.length;u++)this.reinterpretExpressionAsPattern(e.expressions[u]);else this.reinterpretExpressionAsPattern(e);e={type:"ArrowParameterPlaceHolder",params:e.type===a.Syntax.SequenceExpression?e.expressions:[e],async:!1}}this.context.isBindingElement=!1}}}return e},e.prototype.parseArguments=function(){this.expect("(");var e=[];if(!this.match(")"))for(;;){var t=this.match("...")?this.parseSpreadElement():this.isolateCoverGrammar(this.parseAssignmentExpression);if(e.push(t),this.match(")"))break;if(this.expectCommaSeparator(),this.match(")"))break}return this.expect(")"),e},e.prototype.isIdentifierName=function(e){return 3===e.type||4===e.type||1===e.type||5===e.type},e.prototype.parseIdentifierName=function(){var e=this.createNode(),t=this.nextToken();return this.isIdentifierName(t)||this.throwUnexpectedToken(t),this.finalize(e,new s.Identifier(t.value))},e.prototype.parseNewExpression=function(){var e,t=this.createNode(),n=this.parseIdentifierName();if(r.assert("new"===n.name,"New expression must start with `new`"),this.match("."))if(this.nextToken(),3===this.lookahead.type&&this.context.inFunctionBody&&"target"===this.lookahead.value){var i=this.parseIdentifierName();e=new s.MetaProperty(n,i)}else this.throwUnexpectedToken(this.lookahead);else{var u=this.isolateCoverGrammar(this.parseLeftHandSideExpression),o=this.match("(")?this.parseArguments():[];e=new s.NewExpression(u,o),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}return this.finalize(t,e)},e.prototype.parseAsyncArgument=function(){var e=this.parseAssignmentExpression();return this.context.firstCoverInitializedNameError=null,e},e.prototype.parseAsyncArguments=function(){this.expect("(");var e=[];if(!this.match(")"))for(;;){var t=this.match("...")?this.parseSpreadElement():this.isolateCoverGrammar(this.parseAsyncArgument);if(e.push(t),this.match(")"))break;if(this.expectCommaSeparator(),this.match(")"))break}return this.expect(")"),e},e.prototype.parseLeftHandSideExpressionAllowCall=function(){var e,t=this.lookahead,n=this.matchContextualKeyword("async"),r=this.context.allowIn;for(this.context.allowIn=!0,this.matchKeyword("super")&&this.context.inFunctionBody?(e=this.createNode(),this.nextToken(),e=this.finalize(e,new s.Super),this.match("(")||this.match(".")||this.match("[")||this.throwUnexpectedToken(this.lookahead)):e=this.inheritCoverGrammar(this.matchKeyword("new")?this.parseNewExpression:this.parsePrimaryExpression);;)if(this.match(".")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect(".");var i=this.parseIdentifierName();e=this.finalize(this.startNode(t),new s.StaticMemberExpression(e,i))}else if(this.match("(")){var u=n&&t.lineNumber===this.lookahead.lineNumber;this.context.isBindingElement=!1,this.context.isAssignmentTarget=!1;var o=u?this.parseAsyncArguments():this.parseArguments();if(e=this.finalize(this.startNode(t),new s.CallExpression(e,o)),u&&this.match("=>")){for(var a=0;a<o.length;++a)this.reinterpretExpressionAsPattern(o[a]);e={type:"ArrowParameterPlaceHolder",params:o,async:!0}}}else if(this.match("[")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect("[");i=this.isolateCoverGrammar(this.parseExpression);this.expect("]"),e=this.finalize(this.startNode(t),new s.ComputedMemberExpression(e,i))}else{if(10!==this.lookahead.type||!this.lookahead.head)break;var h=this.parseTemplateLiteral();e=this.finalize(this.startNode(t),new s.TaggedTemplateExpression(e,h))}return this.context.allowIn=r,e},e.prototype.parseSuper=function(){var e=this.createNode();return this.expectKeyword("super"),this.match("[")||this.match(".")||this.throwUnexpectedToken(this.lookahead),this.finalize(e,new s.Super)},e.prototype.parseLeftHandSideExpression=function(){r.assert(this.context.allowIn,"callee of new expression always allow in keyword.");for(var e=this.startNode(this.lookahead),t=this.matchKeyword("super")&&this.context.inFunctionBody?this.parseSuper():this.inheritCoverGrammar(this.matchKeyword("new")?this.parseNewExpression:this.parsePrimaryExpression);;)if(this.match("[")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect("[");var n=this.isolateCoverGrammar(this.parseExpression);this.expect("]"),t=this.finalize(e,new s.ComputedMemberExpression(t,n))}else if(this.match(".")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect(".");n=this.parseIdentifierName();t=this.finalize(e,new s.StaticMemberExpression(t,n))}else{if(10!==this.lookahead.type||!this.lookahead.head)break;var i=this.parseTemplateLiteral();t=this.finalize(e,new s.TaggedTemplateExpression(t,i))}return t},e.prototype.parseUpdateExpression=function(){var e,t=this.lookahead;if(this.match("++")||this.match("--")){var n=this.startNode(t),r=this.nextToken();e=this.inheritCoverGrammar(this.parseUnaryExpression),this.context.strict&&e.type===a.Syntax.Identifier&&this.scanner.isRestrictedWord(e.name)&&this.tolerateError(u.Messages.StrictLHSPrefix),this.context.isAssignmentTarget||this.tolerateError(u.Messages.InvalidLHSInAssignment);var i=!0;e=this.finalize(n,new s.UpdateExpression(r.value,e,i)),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}else if(e=this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall),!this.hasLineTerminator&&7===this.lookahead.type&&(this.match("++")||this.match("--"))){this.context.strict&&e.type===a.Syntax.Identifier&&this.scanner.isRestrictedWord(e.name)&&this.tolerateError(u.Messages.StrictLHSPostfix),this.context.isAssignmentTarget||this.tolerateError(u.Messages.InvalidLHSInAssignment),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var o=this.nextToken().value;i=!1;e=this.finalize(this.startNode(t),new s.UpdateExpression(o,e,i))}return e},e.prototype.parseAwaitExpression=function(){var e=this.createNode();this.nextToken();var t=this.parseUnaryExpression();return this.finalize(e,new s.AwaitExpression(t))},e.prototype.parseUnaryExpression=function(){var e;if(this.match("+")||this.match("-")||this.match("~")||this.match("!")||this.matchKeyword("delete")||this.matchKeyword("void")||this.matchKeyword("typeof")){var t=this.startNode(this.lookahead),n=this.nextToken();e=this.inheritCoverGrammar(this.parseUnaryExpression),e=this.finalize(t,new s.UnaryExpression(n.value,e)),this.context.strict&&"delete"===e.operator&&e.argument.type===a.Syntax.Identifier&&this.tolerateError(u.Messages.StrictDelete),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}else e=this.context.await&&this.matchContextualKeyword("await")?this.parseAwaitExpression():this.parseUpdateExpression();return e},e.prototype.parseExponentiationExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseUnaryExpression);if(t.type!==a.Syntax.UnaryExpression&&this.match("**")){this.nextToken(),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var n=t,r=this.isolateCoverGrammar(this.parseExponentiationExpression);t=this.finalize(this.startNode(e),new s.BinaryExpression("**",n,r))}return t},e.prototype.binaryPrecedence=function(e){var t=e.value;return 7===e.type?this.operatorPrecedence[t]||0:4===e.type&&("instanceof"===t||this.context.allowIn&&"in"===t)?7:0},e.prototype.parseBinaryExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseExponentiationExpression),n=this.lookahead,r=this.binaryPrecedence(n);if(r>0){this.nextToken(),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;for(var i=[e,this.lookahead],u=t,o=this.isolateCoverGrammar(this.parseExponentiationExpression),a=[u,n.value,o],h=[r];!((r=this.binaryPrecedence(this.lookahead))<=0);){for(;a.length>2&&r<=h[h.length-1];){o=a.pop();var c=a.pop();h.pop(),u=a.pop(),i.pop();var l=this.startNode(i[i.length-1]);a.push(this.finalize(l,new s.BinaryExpression(c,u,o)))}a.push(this.nextToken().value),h.push(r),i.push(this.lookahead),a.push(this.isolateCoverGrammar(this.parseExponentiationExpression))}var p=a.length-1;t=a[p];for(var d=i.pop();p>1;){var f=i.pop(),D=d&&d.lineStart;l=this.startNode(f,D),c=a[p-1];t=this.finalize(l,new s.BinaryExpression(c,a[p-2],t)),p-=2,d=f}}return t},e.prototype.parseConditionalExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseBinaryExpression);if(this.match("?")){this.nextToken();var n=this.context.allowIn;this.context.allowIn=!0;var r=this.isolateCoverGrammar(this.parseAssignmentExpression);this.context.allowIn=n,this.expect(":");var i=this.isolateCoverGrammar(this.parseAssignmentExpression);t=this.finalize(this.startNode(e),new s.ConditionalExpression(t,r,i)),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}return t},e.prototype.checkPatternParam=function(e,t){switch(t.type){case a.Syntax.Identifier:this.validateParam(e,t,t.name);break;case a.Syntax.RestElement:this.checkPatternParam(e,t.argument);break;case a.Syntax.AssignmentPattern:this.checkPatternParam(e,t.left);break;case a.Syntax.ArrayPattern:for(var n=0;n<t.elements.length;n++)null!==t.elements[n]&&this.checkPatternParam(e,t.elements[n]);break;case a.Syntax.ObjectPattern:for(n=0;n<t.properties.length;n++)this.checkPatternParam(e,t.properties[n].value)}e.simple=e.simple&&t instanceof s.Identifier},e.prototype.reinterpretAsCoverFormalsList=function(e){var t,n=[e],r=!1;switch(e.type){case a.Syntax.Identifier:break;case"ArrowParameterPlaceHolder":n=e.params,r=e.async;break;default:return null}t={simple:!0,paramSet:{}};for(var i=0;i<n.length;++i){(s=n[i]).type===a.Syntax.AssignmentPattern?s.right.type===a.Syntax.YieldExpression&&(s.right.argument&&this.throwUnexpectedToken(this.lookahead),s.right.type=a.Syntax.Identifier,s.right.name="yield",delete s.right.argument,delete s.right.delegate):r&&s.type===a.Syntax.Identifier&&"await"===s.name&&this.throwUnexpectedToken(this.lookahead),this.checkPatternParam(t,s),n[i]=s}if(this.context.strict||!this.context.allowYield)for(i=0;i<n.length;++i){var s;(s=n[i]).type===a.Syntax.YieldExpression&&this.throwUnexpectedToken(this.lookahead)}if(t.message===u.Messages.StrictParamDupe){var o=this.context.strict?t.stricted:t.firstRestricted;this.throwUnexpectedToken(o,t.message)}return{simple:t.simple,params:n,stricted:t.stricted,firstRestricted:t.firstRestricted,message:t.message}},e.prototype.parseAssignmentExpression=function(){var e;if(!this.context.allowYield&&this.matchKeyword("yield"))e=this.parseYieldExpression();else{var t=this.lookahead,n=t;if(e=this.parseConditionalExpression(),3===n.type&&n.lineNumber===this.lookahead.lineNumber&&"async"===n.value&&(3===this.lookahead.type||this.matchKeyword("yield"))){var r=this.parsePrimaryExpression();this.reinterpretExpressionAsPattern(r),e={type:"ArrowParameterPlaceHolder",params:[r],async:!0}}if("ArrowParameterPlaceHolder"===e.type||this.match("=>")){this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var i=e.async,o=this.reinterpretAsCoverFormalsList(e);if(o){this.hasLineTerminator&&this.tolerateUnexpectedToken(this.lookahead),this.context.firstCoverInitializedNameError=null;var h=this.context.strict,c=this.context.allowStrictDirective;this.context.allowStrictDirective=o.simple;var l=this.context.allowYield,p=this.context.await;this.context.allowYield=!0,this.context.await=i;var d=this.startNode(t);this.expect("=>");var f=void 0;if(this.match("{")){var D=this.context.allowIn;this.context.allowIn=!0,f=this.parseFunctionSourceElements(),this.context.allowIn=D}else f=this.isolateCoverGrammar(this.parseAssignmentExpression);var m=f.type!==a.Syntax.BlockStatement;this.context.strict&&o.firstRestricted&&this.throwUnexpectedToken(o.firstRestricted,o.message),this.context.strict&&o.stricted&&this.tolerateUnexpectedToken(o.stricted,o.message),e=i?this.finalize(d,new s.AsyncArrowFunctionExpression(o.params,f,m)):this.finalize(d,new s.ArrowFunctionExpression(o.params,f,m)),this.context.strict=h,this.context.allowStrictDirective=c,this.context.allowYield=l,this.context.await=p}}else if(this.matchAssign()){if(this.context.isAssignmentTarget||this.tolerateError(u.Messages.InvalidLHSInAssignment),this.context.strict&&e.type===a.Syntax.Identifier){var A=e;this.scanner.isRestrictedWord(A.name)&&this.tolerateUnexpectedToken(n,u.Messages.StrictLHSAssignment),this.scanner.isStrictModeReservedWord(A.name)&&this.tolerateUnexpectedToken(n,u.Messages.StrictReservedWord)}this.match("=")?this.reinterpretExpressionAsPattern(e):(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1);var E=(n=this.nextToken()).value,C=this.isolateCoverGrammar(this.parseAssignmentExpression);e=this.finalize(this.startNode(t),new s.AssignmentExpression(E,e,C)),this.context.firstCoverInitializedNameError=null}}return e},e.prototype.parseExpression=function(){var e=this.lookahead,t=this.isolateCoverGrammar(this.parseAssignmentExpression);if(this.match(",")){var n=[];for(n.push(t);2!==this.lookahead.type&&this.match(",");)this.nextToken(),n.push(this.isolateCoverGrammar(this.parseAssignmentExpression));t=this.finalize(this.startNode(e),new s.SequenceExpression(n))}return t},e.prototype.parseStatementListItem=function(){var e;if(this.context.isAssignmentTarget=!0,this.context.isBindingElement=!0,4===this.lookahead.type)switch(this.lookahead.value){case"export":this.context.isModule||this.tolerateUnexpectedToken(this.lookahead,u.Messages.IllegalExportDeclaration),e=this.parseExportDeclaration();break;case"import":this.context.isModule||this.tolerateUnexpectedToken(this.lookahead,u.Messages.IllegalImportDeclaration),e=this.parseImportDeclaration();break;case"const":e=this.parseLexicalDeclaration({inFor:!1});break;case"function":e=this.parseFunctionDeclaration();break;case"class":e=this.parseClassDeclaration();break;case"let":e=this.isLexicalDeclaration()?this.parseLexicalDeclaration({inFor:!1}):this.parseStatement();break;default:e=this.parseStatement()}else e=this.parseStatement();return e},e.prototype.parseBlock=function(){var e=this.createNode();this.expect("{");for(var t=[];!this.match("}");)t.push(this.parseStatementListItem());return this.expect("}"),this.finalize(e,new s.BlockStatement(t))},e.prototype.parseLexicalBinding=function(e,t){var n=this.createNode(),r=this.parsePattern([],e);this.context.strict&&r.type===a.Syntax.Identifier&&this.scanner.isRestrictedWord(r.name)&&this.tolerateError(u.Messages.StrictVarName);var i=null;return"const"===e?this.matchKeyword("in")||this.matchContextualKeyword("of")||(this.match("=")?(this.nextToken(),i=this.isolateCoverGrammar(this.parseAssignmentExpression)):this.throwError(u.Messages.DeclarationMissingInitializer,"const")):(!t.inFor&&r.type!==a.Syntax.Identifier||this.match("="))&&(this.expect("="),i=this.isolateCoverGrammar(this.parseAssignmentExpression)),this.finalize(n,new s.VariableDeclarator(r,i))},e.prototype.parseBindingList=function(e,t){for(var n=[this.parseLexicalBinding(e,t)];this.match(",");)this.nextToken(),n.push(this.parseLexicalBinding(e,t));return n},e.prototype.isLexicalDeclaration=function(){var e=this.scanner.saveState();this.scanner.scanComments();var t=this.scanner.lex();return this.scanner.restoreState(e),3===t.type||7===t.type&&"["===t.value||7===t.type&&"{"===t.value||4===t.type&&"let"===t.value||4===t.type&&"yield"===t.value},e.prototype.parseLexicalDeclaration=function(e){var t=this.createNode(),n=this.nextToken().value;r.assert("let"===n||"const"===n,"Lexical declaration must be either let or const");var i=this.parseBindingList(n,e);return this.consumeSemicolon(),this.finalize(t,new s.VariableDeclaration(i,n))},e.prototype.parseBindingRestElement=function(e,t){var n=this.createNode();this.expect("...");var r=this.parsePattern(e,t);return this.finalize(n,new s.RestElement(r))},e.prototype.parseArrayPattern=function(e,t){var n=this.createNode();this.expect("[");for(var r=[];!this.match("]");)if(this.match(","))this.nextToken(),r.push(null);else{if(this.match("...")){r.push(this.parseBindingRestElement(e,t));break}r.push(this.parsePatternWithDefault(e,t)),this.match("]")||this.expect(",")}return this.expect("]"),this.finalize(n,new s.ArrayPattern(r))},e.prototype.parsePropertyPattern=function(e,t){var n,r,i=this.createNode(),u=!1,o=!1;if(3===this.lookahead.type){var a=this.lookahead;n=this.parseVariableIdentifier();var h=this.finalize(i,new s.Identifier(a.value));if(this.match("=")){e.push(a),o=!0,this.nextToken();var c=this.parseAssignmentExpression();r=this.finalize(this.startNode(a),new s.AssignmentPattern(h,c))}else this.match(":")?(this.expect(":"),r=this.parsePatternWithDefault(e,t)):(e.push(a),o=!0,r=h)}else u=this.match("["),n=this.parseObjectPropertyKey(),this.expect(":"),r=this.parsePatternWithDefault(e,t);return this.finalize(i,new s.Property("init",n,u,r,!1,o))},e.prototype.parseObjectPattern=function(e,t){var n=this.createNode(),r=[];for(this.expect("{");!this.match("}");)r.push(this.parsePropertyPattern(e,t)),this.match("}")||this.expect(",");return this.expect("}"),this.finalize(n,new s.ObjectPattern(r))},e.prototype.parsePattern=function(e,t){var n;return this.match("[")?n=this.parseArrayPattern(e,t):this.match("{")?n=this.parseObjectPattern(e,t):(!this.matchKeyword("let")||"const"!==t&&"let"!==t||this.tolerateUnexpectedToken(this.lookahead,u.Messages.LetInLexicalBinding),e.push(this.lookahead),n=this.parseVariableIdentifier(t)),n},e.prototype.parsePatternWithDefault=function(e,t){var n=this.lookahead,r=this.parsePattern(e,t);if(this.match("=")){this.nextToken();var i=this.context.allowYield;this.context.allowYield=!0;var u=this.isolateCoverGrammar(this.parseAssignmentExpression);this.context.allowYield=i,r=this.finalize(this.startNode(n),new s.AssignmentPattern(r,u))}return r},e.prototype.parseVariableIdentifier=function(e){var t=this.createNode(),n=this.nextToken();return 4===n.type&&"yield"===n.value?this.context.strict?this.tolerateUnexpectedToken(n,u.Messages.StrictReservedWord):this.context.allowYield||this.throwUnexpectedToken(n):3!==n.type?this.context.strict&&4===n.type&&this.scanner.isStrictModeReservedWord(n.value)?this.tolerateUnexpectedToken(n,u.Messages.StrictReservedWord):(this.context.strict||"let"!==n.value||"var"!==e)&&this.throwUnexpectedToken(n):(this.context.isModule||this.context.await)&&3===n.type&&"await"===n.value&&this.tolerateUnexpectedToken(n),this.finalize(t,new s.Identifier(n.value))},e.prototype.parseVariableDeclaration=function(e){var t=this.createNode(),n=this.parsePattern([],"var");this.context.strict&&n.type===a.Syntax.Identifier&&this.scanner.isRestrictedWord(n.name)&&this.tolerateError(u.Messages.StrictVarName);var r=null;return this.match("=")?(this.nextToken(),r=this.isolateCoverGrammar(this.parseAssignmentExpression)):n.type===a.Syntax.Identifier||e.inFor||this.expect("="),this.finalize(t,new s.VariableDeclarator(n,r))},e.prototype.parseVariableDeclarationList=function(e){var t={inFor:e.inFor},n=[];for(n.push(this.parseVariableDeclaration(t));this.match(",");)this.nextToken(),n.push(this.parseVariableDeclaration(t));return n},e.prototype.parseVariableStatement=function(){var e=this.createNode();this.expectKeyword("var");var t=this.parseVariableDeclarationList({inFor:!1});return this.consumeSemicolon(),this.finalize(e,new s.VariableDeclaration(t,"var"))},e.prototype.parseEmptyStatement=function(){var e=this.createNode();return this.expect(";"),this.finalize(e,new s.EmptyStatement)},e.prototype.parseExpressionStatement=function(){var e=this.createNode(),t=this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new s.ExpressionStatement(t))},e.prototype.parseIfClause=function(){return this.context.strict&&this.matchKeyword("function")&&this.tolerateError(u.Messages.StrictFunction),this.parseStatement()},e.prototype.parseIfStatement=function(){var e,t=this.createNode(),n=null;this.expectKeyword("if"),this.expect("(");var r=this.parseExpression();return!this.match(")")&&this.config.tolerant?(this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new s.EmptyStatement)):(this.expect(")"),e=this.parseIfClause(),this.matchKeyword("else")&&(this.nextToken(),n=this.parseIfClause())),this.finalize(t,new s.IfStatement(r,e,n))},e.prototype.parseDoWhileStatement=function(){var e=this.createNode();this.expectKeyword("do");var t=this.context.inIteration;this.context.inIteration=!0;var n=this.parseStatement();this.context.inIteration=t,this.expectKeyword("while"),this.expect("(");var r=this.parseExpression();return!this.match(")")&&this.config.tolerant?this.tolerateUnexpectedToken(this.nextToken()):(this.expect(")"),this.match(";")&&this.nextToken()),this.finalize(e,new s.DoWhileStatement(n,r))},e.prototype.parseWhileStatement=function(){var e,t=this.createNode();this.expectKeyword("while"),this.expect("(");var n=this.parseExpression();if(!this.match(")")&&this.config.tolerant)this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new s.EmptyStatement);else{this.expect(")");var r=this.context.inIteration;this.context.inIteration=!0,e=this.parseStatement(),this.context.inIteration=r}return this.finalize(t,new s.WhileStatement(n,e))},e.prototype.parseForStatement=function(){var e,t,n,r=null,i=null,o=null,h=!0,c=this.createNode();if(this.expectKeyword("for"),this.expect("("),this.match(";"))this.nextToken();else if(this.matchKeyword("var")){r=this.createNode(),this.nextToken();var l=this.context.allowIn;this.context.allowIn=!1;var p=this.parseVariableDeclarationList({inFor:!0});if(this.context.allowIn=l,1===p.length&&this.matchKeyword("in")){var d=p[0];d.init&&(d.id.type===a.Syntax.ArrayPattern||d.id.type===a.Syntax.ObjectPattern||this.context.strict)&&this.tolerateError(u.Messages.ForInOfLoopInitializer,"for-in"),r=this.finalize(r,new s.VariableDeclaration(p,"var")),this.nextToken(),e=r,t=this.parseExpression(),r=null}else 1===p.length&&null===p[0].init&&this.matchContextualKeyword("of")?(r=this.finalize(r,new s.VariableDeclaration(p,"var")),this.nextToken(),e=r,t=this.parseAssignmentExpression(),r=null,h=!1):(r=this.finalize(r,new s.VariableDeclaration(p,"var")),this.expect(";"))}else if(this.matchKeyword("const")||this.matchKeyword("let")){r=this.createNode();var f=this.nextToken().value;if(this.context.strict||"in"!==this.lookahead.value){l=this.context.allowIn;this.context.allowIn=!1;p=this.parseBindingList(f,{inFor:!0});this.context.allowIn=l,1===p.length&&null===p[0].init&&this.matchKeyword("in")?(r=this.finalize(r,new s.VariableDeclaration(p,f)),this.nextToken(),e=r,t=this.parseExpression(),r=null):1===p.length&&null===p[0].init&&this.matchContextualKeyword("of")?(r=this.finalize(r,new s.VariableDeclaration(p,f)),this.nextToken(),e=r,t=this.parseAssignmentExpression(),r=null,h=!1):(this.consumeSemicolon(),r=this.finalize(r,new s.VariableDeclaration(p,f)))}else r=this.finalize(r,new s.Identifier(f)),this.nextToken(),e=r,t=this.parseExpression(),r=null}else{var D=this.lookahead;l=this.context.allowIn;if(this.context.allowIn=!1,r=this.inheritCoverGrammar(this.parseAssignmentExpression),this.context.allowIn=l,this.matchKeyword("in"))this.context.isAssignmentTarget&&r.type!==a.Syntax.AssignmentExpression||this.tolerateError(u.Messages.InvalidLHSInForIn),this.nextToken(),this.reinterpretExpressionAsPattern(r),e=r,t=this.parseExpression(),r=null;else if(this.matchContextualKeyword("of"))this.context.isAssignmentTarget&&r.type!==a.Syntax.AssignmentExpression||this.tolerateError(u.Messages.InvalidLHSInForLoop),this.nextToken(),this.reinterpretExpressionAsPattern(r),e=r,t=this.parseAssignmentExpression(),r=null,h=!1;else{if(this.match(",")){for(var m=[r];this.match(",");)this.nextToken(),m.push(this.isolateCoverGrammar(this.parseAssignmentExpression));r=this.finalize(this.startNode(D),new s.SequenceExpression(m))}this.expect(";")}}if(void 0===e&&(this.match(";")||(i=this.parseExpression()),this.expect(";"),this.match(")")||(o=this.parseExpression())),!this.match(")")&&this.config.tolerant)this.tolerateUnexpectedToken(this.nextToken()),n=this.finalize(this.createNode(),new s.EmptyStatement);else{this.expect(")");var A=this.context.inIteration;this.context.inIteration=!0,n=this.isolateCoverGrammar(this.parseStatement),this.context.inIteration=A}return void 0===e?this.finalize(c,new s.ForStatement(r,i,o,n)):h?this.finalize(c,new s.ForInStatement(e,t,n)):this.finalize(c,new s.ForOfStatement(e,t,n))},e.prototype.parseContinueStatement=function(){var e=this.createNode();this.expectKeyword("continue");var t=null;if(3===this.lookahead.type&&!this.hasLineTerminator){var n=this.parseVariableIdentifier();t=n;var r="$"+n.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,r)||this.throwError(u.Messages.UnknownLabel,n.name)}return this.consumeSemicolon(),null!==t||this.context.inIteration||this.throwError(u.Messages.IllegalContinue),this.finalize(e,new s.ContinueStatement(t))},e.prototype.parseBreakStatement=function(){var e=this.createNode();this.expectKeyword("break");var t=null;if(3===this.lookahead.type&&!this.hasLineTerminator){var n=this.parseVariableIdentifier(),r="$"+n.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,r)||this.throwError(u.Messages.UnknownLabel,n.name),t=n}return this.consumeSemicolon(),null!==t||this.context.inIteration||this.context.inSwitch||this.throwError(u.Messages.IllegalBreak),this.finalize(e,new s.BreakStatement(t))},e.prototype.parseReturnStatement=function(){this.context.inFunctionBody||this.tolerateError(u.Messages.IllegalReturn);var e=this.createNode();this.expectKeyword("return");var t=!this.match(";")&&!this.match("}")&&!this.hasLineTerminator&&2!==this.lookahead.type||8===this.lookahead.type||10===this.lookahead.type?this.parseExpression():null;return this.consumeSemicolon(),this.finalize(e,new s.ReturnStatement(t))},e.prototype.parseWithStatement=function(){this.context.strict&&this.tolerateError(u.Messages.StrictModeWith);var e,t=this.createNode();this.expectKeyword("with"),this.expect("(");var n=this.parseExpression();return!this.match(")")&&this.config.tolerant?(this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new s.EmptyStatement)):(this.expect(")"),e=this.parseStatement()),this.finalize(t,new s.WithStatement(n,e))},e.prototype.parseSwitchCase=function(){var e,t=this.createNode();this.matchKeyword("default")?(this.nextToken(),e=null):(this.expectKeyword("case"),e=this.parseExpression()),this.expect(":");for(var n=[];!(this.match("}")||this.matchKeyword("default")||this.matchKeyword("case"));)n.push(this.parseStatementListItem());return this.finalize(t,new s.SwitchCase(e,n))},e.prototype.parseSwitchStatement=function(){var e=this.createNode();this.expectKeyword("switch"),this.expect("(");var t=this.parseExpression();this.expect(")");var n=this.context.inSwitch;this.context.inSwitch=!0;var r=[],i=!1;for(this.expect("{");!this.match("}");){var o=this.parseSwitchCase();null===o.test&&(i&&this.throwError(u.Messages.MultipleDefaultsInSwitch),i=!0),r.push(o)}return this.expect("}"),this.context.inSwitch=n,this.finalize(e,new s.SwitchStatement(t,r))},e.prototype.parseLabelledStatement=function(){var e,t=this.createNode(),n=this.parseExpression();if(n.type===a.Syntax.Identifier&&this.match(":")){this.nextToken();var r=n,i="$"+r.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,i)&&this.throwError(u.Messages.Redeclaration,"Label",r.name),this.context.labelSet[i]=!0;var o=void 0;if(this.matchKeyword("class"))this.tolerateUnexpectedToken(this.lookahead),o=this.parseClassDeclaration();else if(this.matchKeyword("function")){var h=this.lookahead,c=this.parseFunctionDeclaration();this.context.strict?this.tolerateUnexpectedToken(h,u.Messages.StrictFunction):c.generator&&this.tolerateUnexpectedToken(h,u.Messages.GeneratorInLegacyContext),o=c}else o=this.parseStatement();delete this.context.labelSet[i],e=new s.LabeledStatement(r,o)}else this.consumeSemicolon(),e=new s.ExpressionStatement(n);return this.finalize(t,e)},e.prototype.parseThrowStatement=function(){var e=this.createNode();this.expectKeyword("throw"),this.hasLineTerminator&&this.throwError(u.Messages.NewlineAfterThrow);var t=this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new s.ThrowStatement(t))},e.prototype.parseCatchClause=function(){var e=this.createNode();this.expectKeyword("catch"),this.expect("("),this.match(")")&&this.throwUnexpectedToken(this.lookahead);for(var t=[],n=this.parsePattern(t),r={},i=0;i<t.length;i++){var o="$"+t[i].value;Object.prototype.hasOwnProperty.call(r,o)&&this.tolerateError(u.Messages.DuplicateBinding,t[i].value),r[o]=!0}this.context.strict&&n.type===a.Syntax.Identifier&&this.scanner.isRestrictedWord(n.name)&&this.tolerateError(u.Messages.StrictCatchVariable),this.expect(")");var h=this.parseBlock();return this.finalize(e,new s.CatchClause(n,h))},e.prototype.parseFinallyClause=function(){return this.expectKeyword("finally"),this.parseBlock()},e.prototype.parseTryStatement=function(){var e=this.createNode();this.expectKeyword("try");var t=this.parseBlock(),n=this.matchKeyword("catch")?this.parseCatchClause():null,r=this.matchKeyword("finally")?this.parseFinallyClause():null;return n||r||this.throwError(u.Messages.NoCatchOrFinally),this.finalize(e,new s.TryStatement(t,n,r))},e.prototype.parseDebuggerStatement=function(){var e=this.createNode();return this.expectKeyword("debugger"),this.consumeSemicolon(),this.finalize(e,new s.DebuggerStatement)},e.prototype.parseStatement=function(){var e;switch(this.lookahead.type){case 1:case 5:case 6:case 8:case 10:case 9:e=this.parseExpressionStatement();break;case 7:var t=this.lookahead.value;e="{"===t?this.parseBlock():"("===t?this.parseExpressionStatement():";"===t?this.parseEmptyStatement():this.parseExpressionStatement();break;case 3:e=this.matchAsyncFunction()?this.parseFunctionDeclaration():this.parseLabelledStatement();break;case 4:switch(this.lookahead.value){case"break":e=this.parseBreakStatement();break;case"continue":e=this.parseContinueStatement();break;case"debugger":e=this.parseDebuggerStatement();break;case"do":e=this.parseDoWhileStatement();break;case"for":e=this.parseForStatement();break;case"function":e=this.parseFunctionDeclaration();break;case"if":e=this.parseIfStatement();break;case"return":e=this.parseReturnStatement();break;case"switch":e=this.parseSwitchStatement();break;case"throw":e=this.parseThrowStatement();break;case"try":e=this.parseTryStatement();break;case"var":e=this.parseVariableStatement();break;case"while":e=this.parseWhileStatement();break;case"with":e=this.parseWithStatement();break;default:e=this.parseExpressionStatement()}break;default:e=this.throwUnexpectedToken(this.lookahead)}return e},e.prototype.parseFunctionSourceElements=function(){var e=this.createNode();this.expect("{");var t=this.parseDirectivePrologues(),n=this.context.labelSet,r=this.context.inIteration,i=this.context.inSwitch,u=this.context.inFunctionBody;for(this.context.labelSet={},this.context.inIteration=!1,this.context.inSwitch=!1,this.context.inFunctionBody=!0;2!==this.lookahead.type&&!this.match("}");)t.push(this.parseStatementListItem());return this.expect("}"),this.context.labelSet=n,this.context.inIteration=r,this.context.inSwitch=i,this.context.inFunctionBody=u,this.finalize(e,new s.BlockStatement(t))},e.prototype.validateParam=function(e,t,n){var r="$"+n;this.context.strict?(this.scanner.isRestrictedWord(n)&&(e.stricted=t,e.message=u.Messages.StrictParamName),Object.prototype.hasOwnProperty.call(e.paramSet,r)&&(e.stricted=t,e.message=u.Messages.StrictParamDupe)):e.firstRestricted||(this.scanner.isRestrictedWord(n)?(e.firstRestricted=t,e.message=u.Messages.StrictParamName):this.scanner.isStrictModeReservedWord(n)?(e.firstRestricted=t,e.message=u.Messages.StrictReservedWord):Object.prototype.hasOwnProperty.call(e.paramSet,r)&&(e.stricted=t,e.message=u.Messages.StrictParamDupe)),"function"==typeof Object.defineProperty?Object.defineProperty(e.paramSet,r,{value:!0,enumerable:!0,writable:!0,configurable:!0}):e.paramSet[r]=!0},e.prototype.parseRestElement=function(e){var t=this.createNode();this.expect("...");var n=this.parsePattern(e);return this.match("=")&&this.throwError(u.Messages.DefaultRestParameter),this.match(")")||this.throwError(u.Messages.ParameterAfterRestParameter),this.finalize(t,new s.RestElement(n))},e.prototype.parseFormalParameter=function(e){for(var t=[],n=this.match("...")?this.parseRestElement(t):this.parsePatternWithDefault(t),r=0;r<t.length;r++)this.validateParam(e,t[r],t[r].value);e.simple=e.simple&&n instanceof s.Identifier,e.params.push(n)},e.prototype.parseFormalParameters=function(e){var t;if(t={simple:!0,params:[],firstRestricted:e},this.expect("("),!this.match(")"))for(t.paramSet={};2!==this.lookahead.type&&(this.parseFormalParameter(t),!this.match(")"))&&(this.expect(","),!this.match(")")););return this.expect(")"),{simple:t.simple,params:t.params,stricted:t.stricted,firstRestricted:t.firstRestricted,message:t.message}},e.prototype.matchAsyncFunction=function(){var e=this.matchContextualKeyword("async");if(e){var t=this.scanner.saveState();this.scanner.scanComments();var n=this.scanner.lex();this.scanner.restoreState(t),e=t.lineNumber===n.lineNumber&&4===n.type&&"function"===n.value}return e},e.prototype.parseFunctionDeclaration=function(e){var t=this.createNode(),n=this.matchContextualKeyword("async");n&&this.nextToken(),this.expectKeyword("function");var r,i=!n&&this.match("*");i&&this.nextToken();var o=null,a=null;if(!e||!this.match("(")){var h=this.lookahead;o=this.parseVariableIdentifier(),this.context.strict?this.scanner.isRestrictedWord(h.value)&&this.tolerateUnexpectedToken(h,u.Messages.StrictFunctionName):this.scanner.isRestrictedWord(h.value)?(a=h,r=u.Messages.StrictFunctionName):this.scanner.isStrictModeReservedWord(h.value)&&(a=h,r=u.Messages.StrictReservedWord)}var c=this.context.await,l=this.context.allowYield;this.context.await=n,this.context.allowYield=!i;var p=this.parseFormalParameters(a),d=p.params,f=p.stricted;a=p.firstRestricted,p.message&&(r=p.message);var D=this.context.strict,m=this.context.allowStrictDirective;this.context.allowStrictDirective=p.simple;var A=this.parseFunctionSourceElements();return this.context.strict&&a&&this.throwUnexpectedToken(a,r),this.context.strict&&f&&this.tolerateUnexpectedToken(f,r),this.context.strict=D,this.context.allowStrictDirective=m,this.context.await=c,this.context.allowYield=l,n?this.finalize(t,new s.AsyncFunctionDeclaration(o,d,A)):this.finalize(t,new s.FunctionDeclaration(o,d,A,i))},e.prototype.parseFunctionExpression=function(){var e=this.createNode(),t=this.matchContextualKeyword("async");t&&this.nextToken(),this.expectKeyword("function");var n,r=!t&&this.match("*");r&&this.nextToken();var i,o=null,a=this.context.await,h=this.context.allowYield;if(this.context.await=t,this.context.allowYield=!r,!this.match("(")){var c=this.lookahead;o=this.context.strict||r||!this.matchKeyword("yield")?this.parseVariableIdentifier():this.parseIdentifierName(),this.context.strict?this.scanner.isRestrictedWord(c.value)&&this.tolerateUnexpectedToken(c,u.Messages.StrictFunctionName):this.scanner.isRestrictedWord(c.value)?(i=c,n=u.Messages.StrictFunctionName):this.scanner.isStrictModeReservedWord(c.value)&&(i=c,n=u.Messages.StrictReservedWord)}var l=this.parseFormalParameters(i),p=l.params,d=l.stricted;i=l.firstRestricted,l.message&&(n=l.message);var f=this.context.strict,D=this.context.allowStrictDirective;this.context.allowStrictDirective=l.simple;var m=this.parseFunctionSourceElements();return this.context.strict&&i&&this.throwUnexpectedToken(i,n),this.context.strict&&d&&this.tolerateUnexpectedToken(d,n),this.context.strict=f,this.context.allowStrictDirective=D,this.context.await=a,this.context.allowYield=h,t?this.finalize(e,new s.AsyncFunctionExpression(o,p,m)):this.finalize(e,new s.FunctionExpression(o,p,m,r))},e.prototype.parseDirective=function(){var e=this.lookahead,t=this.createNode(),n=this.parseExpression(),r=n.type===a.Syntax.Literal?this.getTokenRaw(e).slice(1,-1):null;return this.consumeSemicolon(),this.finalize(t,r?new s.Directive(n,r):new s.ExpressionStatement(n))},e.prototype.parseDirectivePrologues=function(){for(var e=null,t=[];;){var n=this.lookahead;if(8!==n.type)break;var r=this.parseDirective();t.push(r);var i=r.directive;if("string"!=typeof i)break;"use strict"===i?(this.context.strict=!0,e&&this.tolerateUnexpectedToken(e,u.Messages.StrictOctalLiteral),this.context.allowStrictDirective||this.tolerateUnexpectedToken(n,u.Messages.IllegalLanguageModeDirective)):!e&&n.octal&&(e=n)}return t},e.prototype.qualifiedPropertyName=function(e){switch(e.type){case 3:case 8:case 1:case 5:case 6:case 4:return!0;case 7:return"["===e.value}return!1},e.prototype.parseGetterMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var n=this.parseFormalParameters();n.params.length>0&&this.tolerateError(u.Messages.BadGetterArity);var r=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new s.FunctionExpression(null,n.params,r,!1))},e.prototype.parseSetterMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var n=this.parseFormalParameters();1!==n.params.length?this.tolerateError(u.Messages.BadSetterArity):n.params[0]instanceof s.RestElement&&this.tolerateError(u.Messages.BadSetterRestParameter);var r=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new s.FunctionExpression(null,n.params,r,!1))},e.prototype.parseGeneratorMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var n=this.parseFormalParameters();this.context.allowYield=!1;var r=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new s.FunctionExpression(null,n.params,r,!0))},e.prototype.isStartOfExpression=function(){var e=!0,t=this.lookahead.value;switch(this.lookahead.type){case 7:e="["===t||"("===t||"{"===t||"+"===t||"-"===t||"!"===t||"~"===t||"++"===t||"--"===t||"/"===t||"/="===t;break;case 4:e="class"===t||"delete"===t||"function"===t||"let"===t||"new"===t||"super"===t||"this"===t||"typeof"===t||"void"===t||"yield"===t}return e},e.prototype.parseYieldExpression=function(){var e=this.createNode();this.expectKeyword("yield");var t=null,n=!1;if(!this.hasLineTerminator){var r=this.context.allowYield;this.context.allowYield=!1,(n=this.match("*"))?(this.nextToken(),t=this.parseAssignmentExpression()):this.isStartOfExpression()&&(t=this.parseAssignmentExpression()),this.context.allowYield=r}return this.finalize(e,new s.YieldExpression(t,n))},e.prototype.parseClassElement=function(e){var t=this.lookahead,n=this.createNode(),r="",i=null,o=null,a=!1,h=!1,c=!1,l=!1;if(this.match("*"))this.nextToken();else if(a=this.match("["),"static"===(i=this.parseObjectPropertyKey()).name&&(this.qualifiedPropertyName(this.lookahead)||this.match("*"))&&(t=this.lookahead,c=!0,a=this.match("["),this.match("*")?this.nextToken():i=this.parseObjectPropertyKey()),3===t.type&&!this.hasLineTerminator&&"async"===t.value){var p=this.lookahead.value;":"!==p&&"("!==p&&"*"!==p&&(l=!0,t=this.lookahead,i=this.parseObjectPropertyKey(),3===t.type&&"constructor"===t.value&&this.tolerateUnexpectedToken(t,u.Messages.ConstructorIsAsync))}var d=this.qualifiedPropertyName(this.lookahead);return 3===t.type?"get"===t.value&&d?(r="get",a=this.match("["),i=this.parseObjectPropertyKey(),this.context.allowYield=!1,o=this.parseGetterMethod()):"set"===t.value&&d&&(r="set",a=this.match("["),i=this.parseObjectPropertyKey(),o=this.parseSetterMethod()):7===t.type&&"*"===t.value&&d&&(r="init",a=this.match("["),i=this.parseObjectPropertyKey(),o=this.parseGeneratorMethod(),h=!0),!r&&i&&this.match("(")&&(r="init",o=l?this.parsePropertyMethodAsyncFunction():this.parsePropertyMethodFunction(),h=!0),r||this.throwUnexpectedToken(this.lookahead),"init"===r&&(r="method"),a||(c&&this.isPropertyKey(i,"prototype")&&this.throwUnexpectedToken(t,u.Messages.StaticPrototype),!c&&this.isPropertyKey(i,"constructor")&&(("method"!==r||!h||o&&o.generator)&&this.throwUnexpectedToken(t,u.Messages.ConstructorSpecialMethod),e.value?this.throwUnexpectedToken(t,u.Messages.DuplicateConstructor):e.value=!0,r="constructor")),this.finalize(n,new s.MethodDefinition(i,a,o,r,c))},e.prototype.parseClassElementList=function(){var e=[],t={value:!1};for(this.expect("{");!this.match("}");)this.match(";")?this.nextToken():e.push(this.parseClassElement(t));return this.expect("}"),e},e.prototype.parseClassBody=function(){var e=this.createNode(),t=this.parseClassElementList();return this.finalize(e,new s.ClassBody(t))},e.prototype.parseClassDeclaration=function(e){var t=this.createNode(),n=this.context.strict;this.context.strict=!0,this.expectKeyword("class");var r=e&&3!==this.lookahead.type?null:this.parseVariableIdentifier(),i=null;this.matchKeyword("extends")&&(this.nextToken(),i=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));var u=this.parseClassBody();return this.context.strict=n,this.finalize(t,new s.ClassDeclaration(r,i,u))},e.prototype.parseClassExpression=function(){var e=this.createNode(),t=this.context.strict;this.context.strict=!0,this.expectKeyword("class");var n=3===this.lookahead.type?this.parseVariableIdentifier():null,r=null;this.matchKeyword("extends")&&(this.nextToken(),r=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));var i=this.parseClassBody();return this.context.strict=t,this.finalize(e,new s.ClassExpression(n,r,i))},e.prototype.parseModule=function(){this.context.strict=!0,this.context.isModule=!0,this.scanner.isModule=!0;for(var e=this.createNode(),t=this.parseDirectivePrologues();2!==this.lookahead.type;)t.push(this.parseStatementListItem());return this.finalize(e,new s.Module(t))},e.prototype.parseScript=function(){for(var e=this.createNode(),t=this.parseDirectivePrologues();2!==this.lookahead.type;)t.push(this.parseStatementListItem());return this.finalize(e,new s.Script(t))},e.prototype.parseModuleSpecifier=function(){var e=this.createNode();8!==this.lookahead.type&&this.throwError(u.Messages.InvalidModuleSpecifier);var t=this.nextToken(),n=this.getTokenRaw(t);return this.finalize(e,new s.Literal(t.value,n))},e.prototype.parseImportSpecifier=function(){var e,t,n=this.createNode();return 3===this.lookahead.type?(t=e=this.parseVariableIdentifier(),this.matchContextualKeyword("as")&&(this.nextToken(),t=this.parseVariableIdentifier())):(t=e=this.parseIdentifierName(),this.matchContextualKeyword("as")?(this.nextToken(),t=this.parseVariableIdentifier()):this.throwUnexpectedToken(this.nextToken())),this.finalize(n,new s.ImportSpecifier(t,e))},e.prototype.parseNamedImports=function(){this.expect("{");for(var e=[];!this.match("}");)e.push(this.parseImportSpecifier()),this.match("}")||this.expect(",");return this.expect("}"),e},e.prototype.parseImportDefaultSpecifier=function(){var e=this.createNode(),t=this.parseIdentifierName();return this.finalize(e,new s.ImportDefaultSpecifier(t))},e.prototype.parseImportNamespaceSpecifier=function(){var e=this.createNode();this.expect("*"),this.matchContextualKeyword("as")||this.throwError(u.Messages.NoAsAfterImportNamespace),this.nextToken();var t=this.parseIdentifierName();return this.finalize(e,new s.ImportNamespaceSpecifier(t))},e.prototype.parseImportDeclaration=function(){this.context.inFunctionBody&&this.throwError(u.Messages.IllegalImportDeclaration);var e,t=this.createNode();this.expectKeyword("import");var n=[];if(8===this.lookahead.type)e=this.parseModuleSpecifier();else{if(this.match("{")?n=n.concat(this.parseNamedImports()):this.match("*")?n.push(this.parseImportNamespaceSpecifier()):this.isIdentifierName(this.lookahead)&&!this.matchKeyword("default")?(n.push(this.parseImportDefaultSpecifier()),this.match(",")&&(this.nextToken(),this.match("*")?n.push(this.parseImportNamespaceSpecifier()):this.match("{")?n=n.concat(this.parseNamedImports()):this.throwUnexpectedToken(this.lookahead))):this.throwUnexpectedToken(this.nextToken()),!this.matchContextualKeyword("from")){var r=this.lookahead.value?u.Messages.UnexpectedToken:u.Messages.MissingFromClause;this.throwError(r,this.lookahead.value)}this.nextToken(),e=this.parseModuleSpecifier()}return this.consumeSemicolon(),this.finalize(t,new s.ImportDeclaration(n,e))},e.prototype.parseExportSpecifier=function(){var e=this.createNode(),t=this.parseIdentifierName(),n=t;return this.matchContextualKeyword("as")&&(this.nextToken(),n=this.parseIdentifierName()),this.finalize(e,new s.ExportSpecifier(t,n))},e.prototype.parseExportDeclaration=function(){this.context.inFunctionBody&&this.throwError(u.Messages.IllegalExportDeclaration);var e,t=this.createNode();if(this.expectKeyword("export"),this.matchKeyword("default"))if(this.nextToken(),this.matchKeyword("function")){var n=this.parseFunctionDeclaration(!0);e=this.finalize(t,new s.ExportDefaultDeclaration(n))}else if(this.matchKeyword("class")){n=this.parseClassDeclaration(!0);e=this.finalize(t,new s.ExportDefaultDeclaration(n))}else if(this.matchContextualKeyword("async")){n=this.matchAsyncFunction()?this.parseFunctionDeclaration(!0):this.parseAssignmentExpression();e=this.finalize(t,new s.ExportDefaultDeclaration(n))}else{this.matchContextualKeyword("from")&&this.throwError(u.Messages.UnexpectedToken,this.lookahead.value);n=this.match("{")?this.parseObjectInitializer():this.match("[")?this.parseArrayInitializer():this.parseAssignmentExpression();this.consumeSemicolon(),e=this.finalize(t,new s.ExportDefaultDeclaration(n))}else if(this.match("*")){if(this.nextToken(),!this.matchContextualKeyword("from")){var r=this.lookahead.value?u.Messages.UnexpectedToken:u.Messages.MissingFromClause;this.throwError(r,this.lookahead.value)}this.nextToken();var i=this.parseModuleSpecifier();this.consumeSemicolon(),e=this.finalize(t,new s.ExportAllDeclaration(i))}else if(4===this.lookahead.type){n=void 0;switch(this.lookahead.value){case"let":case"const":n=this.parseLexicalDeclaration({inFor:!1});break;case"var":case"class":case"function":n=this.parseStatementListItem();break;default:this.throwUnexpectedToken(this.lookahead)}e=this.finalize(t,new s.ExportNamedDeclaration(n,[],null))}else if(this.matchAsyncFunction()){n=this.parseFunctionDeclaration();e=this.finalize(t,new s.ExportNamedDeclaration(n,[],null))}else{var o=[],a=null,h=!1;for(this.expect("{");!this.match("}");)h=h||this.matchKeyword("default"),o.push(this.parseExportSpecifier()),this.match("}")||this.expect(",");if(this.expect("}"),this.matchContextualKeyword("from"))this.nextToken(),a=this.parseModuleSpecifier(),this.consumeSemicolon();else if(h){r=this.lookahead.value?u.Messages.UnexpectedToken:u.Messages.MissingFromClause;this.throwError(r,this.lookahead.value)}else this.consumeSemicolon();e=this.finalize(t,new s.ExportNamedDeclaration(null,o,a))}return e},e}();t.Parser=c},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assert=function(e,t){if(!e)throw new Error("ASSERT: "+t)}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.errors=[],this.tolerant=!1}return e.prototype.recordError=function(e){this.errors.push(e)},e.prototype.tolerate=function(e){if(!this.tolerant)throw e;this.recordError(e)},e.prototype.constructError=function(e,t){var n=new Error(e);try{throw n}catch(e){Object.create&&Object.defineProperty&&(n=Object.create(e),Object.defineProperty(n,"column",{value:t}))}return n},e.prototype.createError=function(e,t,n,r){var i="Line "+t+": "+r,u=this.constructError(i,n);return u.index=e,u.lineNumber=t,u.description=r,u},e.prototype.throwError=function(e,t,n,r){throw this.createError(e,t,n,r)},e.prototype.tolerateError=function(e,t,n,r){var i=this.createError(e,t,n,r);if(!this.tolerant)throw i;this.recordError(i)},e}();t.ErrorHandler=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Messages={BadGetterArity:"Getter must not have any formal parameters",BadSetterArity:"Setter must have exactly one formal parameter",BadSetterRestParameter:"Setter function argument must not be a rest parameter",ConstructorIsAsync:"Class constructor may not be an async method",ConstructorSpecialMethod:"Class constructor may not be an accessor",DeclarationMissingInitializer:"Missing initializer in %0 declaration",DefaultRestParameter:"Unexpected token =",DuplicateBinding:"Duplicate binding %0",DuplicateConstructor:"A class may only have one constructor",DuplicateProtoProperty:"Duplicate __proto__ fields are not allowed in object literals",ForInOfLoopInitializer:"%0 loop variable declaration may not have an initializer",GeneratorInLegacyContext:"Generator declarations are not allowed in legacy contexts",IllegalBreak:"Illegal break statement",IllegalContinue:"Illegal continue statement",IllegalExportDeclaration:"Unexpected token",IllegalImportDeclaration:"Unexpected token",IllegalLanguageModeDirective:"Illegal 'use strict' directive in function with non-simple parameter list",IllegalReturn:"Illegal return statement",InvalidEscapedReservedWord:"Keyword must not contain escaped characters",InvalidHexEscapeSequence:"Invalid hexadecimal escape sequence",InvalidLHSInAssignment:"Invalid left-hand side in assignment",InvalidLHSInForIn:"Invalid left-hand side in for-in",InvalidLHSInForLoop:"Invalid left-hand side in for-loop",InvalidModuleSpecifier:"Unexpected token",InvalidRegExp:"Invalid regular expression",LetInLexicalBinding:"let is disallowed as a lexically bound name",MissingFromClause:"Unexpected token",MultipleDefaultsInSwitch:"More than one default clause in switch statement",NewlineAfterThrow:"Illegal newline after throw",NoAsAfterImportNamespace:"Unexpected token",NoCatchOrFinally:"Missing catch or finally after try",ParameterAfterRestParameter:"Rest parameter must be last formal parameter",Redeclaration:"%0 '%1' has already been declared",StaticPrototype:"Classes may not have static property named prototype",StrictCatchVariable:"Catch variable may not be eval or arguments in strict mode",StrictDelete:"Delete of an unqualified identifier in strict mode.",StrictFunction:"In strict mode code, functions can only be declared at top level or inside a block",StrictFunctionName:"Function name may not be eval or arguments in strict mode",StrictLHSAssignment:"Assignment to eval or arguments is not allowed in strict mode",StrictLHSPostfix:"Postfix increment/decrement may not have eval or arguments operand in strict mode",StrictLHSPrefix:"Prefix increment/decrement may not have eval or arguments operand in strict mode",StrictModeWith:"Strict mode code may not include a with statement",StrictOctalLiteral:"Octal literals are not allowed in strict mode.",StrictParamDupe:"Strict mode function may not have duplicate parameter names",StrictParamName:"Parameter name eval or arguments is not allowed in strict mode",StrictReservedWord:"Use of future reserved word in strict mode",StrictVarName:"Variable name may not be eval or arguments in strict mode",TemplateOctalLiteral:"Octal literals are not allowed in template strings.",UnexpectedEOS:"Unexpected end of input",UnexpectedIdentifier:"Unexpected identifier",UnexpectedNumber:"Unexpected number",UnexpectedReserved:"Unexpected reserved word",UnexpectedString:"Unexpected string",UnexpectedTemplate:"Unexpected quasi %0",UnexpectedToken:"Unexpected token %0",UnexpectedTokenIllegal:"Unexpected token ILLEGAL",UnknownLabel:"Undefined label '%0'",UnterminatedRegExp:"Invalid regular expression: missing /"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9),i=n(4),u=n(11);function s(e){return"0123456789abcdef".indexOf(e.toLowerCase())}function o(e){return"01234567".indexOf(e)}var a=function(){function e(e,t){this.source=e,this.errorHandler=t,this.trackComment=!1,this.isModule=!1,this.length=e.length,this.index=0,this.lineNumber=e.length>0?1:0,this.lineStart=0,this.curlyStack=[]}return e.prototype.saveState=function(){return{index:this.index,lineNumber:this.lineNumber,lineStart:this.lineStart}},e.prototype.restoreState=function(e){this.index=e.index,this.lineNumber=e.lineNumber,this.lineStart=e.lineStart},e.prototype.eof=function(){return this.index>=this.length},e.prototype.throwUnexpectedToken=function(e){return void 0===e&&(e=u.Messages.UnexpectedTokenIllegal),this.errorHandler.throwError(this.index,this.lineNumber,this.index-this.lineStart+1,e)},e.prototype.tolerateUnexpectedToken=function(e){void 0===e&&(e=u.Messages.UnexpectedTokenIllegal),this.errorHandler.tolerateError(this.index,this.lineNumber,this.index-this.lineStart+1,e)},e.prototype.skipSingleLineComment=function(e){var t,n,r=[];for(this.trackComment&&(r=[],t=this.index-e,n={start:{line:this.lineNumber,column:this.index-this.lineStart-e},end:{}});!this.eof();){var u=this.source.charCodeAt(this.index);if(++this.index,i.Character.isLineTerminator(u)){if(this.trackComment){n.end={line:this.lineNumber,column:this.index-this.lineStart-1};var s={multiLine:!1,slice:[t+e,this.index-1],range:[t,this.index-1],loc:n};r.push(s)}return 13===u&&10===this.source.charCodeAt(this.index)&&++this.index,++this.lineNumber,this.lineStart=this.index,r}}if(this.trackComment){n.end={line:this.lineNumber,column:this.index-this.lineStart};s={multiLine:!1,slice:[t+e,this.index],range:[t,this.index],loc:n};r.push(s)}return r},e.prototype.skipMultiLineComment=function(){var e,t,n=[];for(this.trackComment&&(n=[],e=this.index-2,t={start:{line:this.lineNumber,column:this.index-this.lineStart-2},end:{}});!this.eof();){var r=this.source.charCodeAt(this.index);if(i.Character.isLineTerminator(r))13===r&&10===this.source.charCodeAt(this.index+1)&&++this.index,++this.lineNumber,++this.index,this.lineStart=this.index;else if(42===r){if(47===this.source.charCodeAt(this.index+1)){if(this.index+=2,this.trackComment){t.end={line:this.lineNumber,column:this.index-this.lineStart};var u={multiLine:!0,slice:[e+2,this.index-2],range:[e,this.index],loc:t};n.push(u)}return n}++this.index}else++this.index}if(this.trackComment){t.end={line:this.lineNumber,column:this.index-this.lineStart};u={multiLine:!0,slice:[e+2,this.index],range:[e,this.index],loc:t};n.push(u)}return this.tolerateUnexpectedToken(),n},e.prototype.scanComments=function(){var e;this.trackComment&&(e=[]);for(var t=0===this.index;!this.eof();){var n=this.source.charCodeAt(this.index);if(i.Character.isWhiteSpace(n))++this.index;else if(i.Character.isLineTerminator(n))++this.index,13===n&&10===this.source.charCodeAt(this.index)&&++this.index,++this.lineNumber,this.lineStart=this.index,t=!0;else if(47===n)if(47===(n=this.source.charCodeAt(this.index+1))){this.index+=2;var r=this.skipSingleLineComment(2);this.trackComment&&(e=e.concat(r)),t=!0}else{if(42!==n)break;this.index+=2;r=this.skipMultiLineComment();this.trackComment&&(e=e.concat(r))}else if(t&&45===n){if(45!==this.source.charCodeAt(this.index+1)||62!==this.source.charCodeAt(this.index+2))break;this.index+=3;r=this.skipSingleLineComment(3);this.trackComment&&(e=e.concat(r))}else{if(60!==n||this.isModule)break;if("!--"!==this.source.slice(this.index+1,this.index+4))break;this.index+=4;r=this.skipSingleLineComment(4);this.trackComment&&(e=e.concat(r))}}return e},e.prototype.isFutureReservedWord=function(e){switch(e){case"enum":case"export":case"import":case"super":return!0;default:return!1}},e.prototype.isStrictModeReservedWord=function(e){switch(e){case"implements":case"interface":case"package":case"private":case"protected":case"public":case"static":case"yield":case"let":return!0;default:return!1}},e.prototype.isRestrictedWord=function(e){return"eval"===e||"arguments"===e},e.prototype.isKeyword=function(e){switch(e.length){case 2:return"if"===e||"in"===e||"do"===e;case 3:return"var"===e||"for"===e||"new"===e||"try"===e||"let"===e;case 4:return"this"===e||"else"===e||"case"===e||"void"===e||"with"===e||"enum"===e;case 5:return"while"===e||"break"===e||"catch"===e||"throw"===e||"const"===e||"yield"===e||"class"===e||"super"===e;case 6:return"return"===e||"typeof"===e||"delete"===e||"switch"===e||"export"===e||"import"===e;case 7:return"default"===e||"finally"===e||"extends"===e;case 8:return"function"===e||"continue"===e||"debugger"===e;case 10:return"instanceof"===e;default:return!1}},e.prototype.codePointAt=function(e){var t=this.source.charCodeAt(e);if(t>=55296&&t<=56319){var n=this.source.charCodeAt(e+1);if(n>=56320&&n<=57343)t=1024*(t-55296)+n-56320+65536}return t},e.prototype.scanHexEscape=function(e){for(var t="u"===e?4:2,n=0,r=0;r<t;++r){if(this.eof()||!i.Character.isHexDigit(this.source.charCodeAt(this.index)))return null;n=16*n+s(this.source[this.index++])}return String.fromCharCode(n)},e.prototype.scanUnicodeCodePointEscape=function(){var e=this.source[this.index],t=0;for("}"===e&&this.throwUnexpectedToken();!this.eof()&&(e=this.source[this.index++],i.Character.isHexDigit(e.charCodeAt(0)));)t=16*t+s(e);return(t>1114111||"}"!==e)&&this.throwUnexpectedToken(),i.Character.fromCodePoint(t)},e.prototype.getIdentifier=function(){for(var e=this.index++;!this.eof();){var t=this.source.charCodeAt(this.index);if(92===t)return this.index=e,this.getComplexIdentifier();if(t>=55296&&t<57343)return this.index=e,this.getComplexIdentifier();if(!i.Character.isIdentifierPart(t))break;++this.index}return this.source.slice(e,this.index)},e.prototype.getComplexIdentifier=function(){var e,t=this.codePointAt(this.index),n=i.Character.fromCodePoint(t);for(this.index+=n.length,92===t&&(117!==this.source.charCodeAt(this.index)&&this.throwUnexpectedToken(),++this.index,"{"===this.source[this.index]?(++this.index,e=this.scanUnicodeCodePointEscape()):null!==(e=this.scanHexEscape("u"))&&"\\"!==e&&i.Character.isIdentifierStart(e.charCodeAt(0))||this.throwUnexpectedToken(),n=e);!this.eof()&&(t=this.codePointAt(this.index),i.Character.isIdentifierPart(t));)n+=e=i.Character.fromCodePoint(t),this.index+=e.length,92===t&&(n=n.substr(0,n.length-1),117!==this.source.charCodeAt(this.index)&&this.throwUnexpectedToken(),++this.index,"{"===this.source[this.index]?(++this.index,e=this.scanUnicodeCodePointEscape()):null!==(e=this.scanHexEscape("u"))&&"\\"!==e&&i.Character.isIdentifierPart(e.charCodeAt(0))||this.throwUnexpectedToken(),n+=e);return n},e.prototype.octalToDecimal=function(e){var t="0"!==e,n=o(e);return!this.eof()&&i.Character.isOctalDigit(this.source.charCodeAt(this.index))&&(t=!0,n=8*n+o(this.source[this.index++]),"0123".indexOf(e)>=0&&!this.eof()&&i.Character.isOctalDigit(this.source.charCodeAt(this.index))&&(n=8*n+o(this.source[this.index++]))),{code:n,octal:t}},e.prototype.scanIdentifier=function(){var e,t=this.index,n=92===this.source.charCodeAt(t)?this.getComplexIdentifier():this.getIdentifier();if(3!==(e=1===n.length?3:this.isKeyword(n)?4:"null"===n?5:"true"===n||"false"===n?1:3)&&t+n.length!==this.index){var r=this.index;this.index=t,this.tolerateUnexpectedToken(u.Messages.InvalidEscapedReservedWord),this.index=r}return{type:e,value:n,lineNumber:this.lineNumber,lineStart:this.lineStart,start:t,end:this.index}},e.prototype.scanPunctuator=function(){var e=this.index,t=this.source[this.index];switch(t){case"(":case"{":"{"===t&&this.curlyStack.push("{"),++this.index;break;case".":++this.index,"."===this.source[this.index]&&"."===this.source[this.index+1]&&(this.index+=2,t="...");break;case"}":++this.index,this.curlyStack.pop();break;case")":case";":case",":case"[":case"]":case":":case"?":case"~":++this.index;break;default:">>>="===(t=this.source.substr(this.index,4))?this.index+=4:"==="===(t=t.substr(0,3))||"!=="===t||">>>"===t||"<<="===t||">>="===t||"**="===t?this.index+=3:"&&"===(t=t.substr(0,2))||"||"===t||"=="===t||"!="===t||"+="===t||"-="===t||"*="===t||"/="===t||"++"===t||"--"===t||"<<"===t||">>"===t||"&="===t||"|="===t||"^="===t||"%="===t||"<="===t||">="===t||"=>"===t||"**"===t?this.index+=2:(t=this.source[this.index],"<>=!+-*%&|^/".indexOf(t)>=0&&++this.index)}return this.index===e&&this.throwUnexpectedToken(),{type:7,value:t,lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanHexLiteral=function(e){for(var t="";!this.eof()&&i.Character.isHexDigit(this.source.charCodeAt(this.index));)t+=this.source[this.index++];return 0===t.length&&this.throwUnexpectedToken(),i.Character.isIdentifierStart(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(),{type:6,value:parseInt("0x"+t,16),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanBinaryLiteral=function(e){for(var t,n="";!this.eof()&&("0"===(t=this.source[this.index])||"1"===t);)n+=this.source[this.index++];return 0===n.length&&this.throwUnexpectedToken(),this.eof()||(t=this.source.charCodeAt(this.index),(i.Character.isIdentifierStart(t)||i.Character.isDecimalDigit(t))&&this.throwUnexpectedToken()),{type:6,value:parseInt(n,2),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanOctalLiteral=function(e,t){var n="",r=!1;for(i.Character.isOctalDigit(e.charCodeAt(0))?(r=!0,n="0"+this.source[this.index++]):++this.index;!this.eof()&&i.Character.isOctalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];return r||0!==n.length||this.throwUnexpectedToken(),(i.Character.isIdentifierStart(this.source.charCodeAt(this.index))||i.Character.isDecimalDigit(this.source.charCodeAt(this.index)))&&this.throwUnexpectedToken(),{type:6,value:parseInt(n,8),octal:r,lineNumber:this.lineNumber,lineStart:this.lineStart,start:t,end:this.index}},e.prototype.isImplicitOctalLiteral=function(){for(var e=this.index+1;e<this.length;++e){var t=this.source[e];if("8"===t||"9"===t)return!1;if(!i.Character.isOctalDigit(t.charCodeAt(0)))return!0}return!0},e.prototype.scanNumericLiteral=function(){var e=this.index,t=this.source[e];r.assert(i.Character.isDecimalDigit(t.charCodeAt(0))||"."===t,"Numeric literal must start with a decimal digit or a decimal point");var n="";if("."!==t){if(n=this.source[this.index++],t=this.source[this.index],"0"===n){if("x"===t||"X"===t)return++this.index,this.scanHexLiteral(e);if("b"===t||"B"===t)return++this.index,this.scanBinaryLiteral(e);if("o"===t||"O"===t)return this.scanOctalLiteral(t,e);if(t&&i.Character.isOctalDigit(t.charCodeAt(0))&&this.isImplicitOctalLiteral())return this.scanOctalLiteral(t,e)}for(;i.Character.isDecimalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];t=this.source[this.index]}if("."===t){for(n+=this.source[this.index++];i.Character.isDecimalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];t=this.source[this.index]}if("e"===t||"E"===t)if(n+=this.source[this.index++],"+"!==(t=this.source[this.index])&&"-"!==t||(n+=this.source[this.index++]),i.Character.isDecimalDigit(this.source.charCodeAt(this.index)))for(;i.Character.isDecimalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];else this.throwUnexpectedToken();return i.Character.isIdentifierStart(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(),{type:6,value:parseFloat(n),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanStringLiteral=function(){var e=this.index,t=this.source[e];r.assert("'"===t||'"'===t,"String literal must starts with a quote"),++this.index;for(var n=!1,s="";!this.eof();){var o=this.source[this.index++];if(o===t){t="";break}if("\\"===o)if((o=this.source[this.index++])&&i.Character.isLineTerminator(o.charCodeAt(0)))++this.lineNumber,"\r"===o&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index;else switch(o){case"u":if("{"===this.source[this.index])++this.index,s+=this.scanUnicodeCodePointEscape();else{var a=this.scanHexEscape(o);null===a&&this.throwUnexpectedToken(),s+=a}break;case"x":var h=this.scanHexEscape(o);null===h&&this.throwUnexpectedToken(u.Messages.InvalidHexEscapeSequence),s+=h;break;case"n":s+="\n";break;case"r":s+="\r";break;case"t":s+="\t";break;case"b":s+="\b";break;case"f":s+="\f";break;case"v":s+="\v";break;case"8":case"9":s+=o,this.tolerateUnexpectedToken();break;default:if(o&&i.Character.isOctalDigit(o.charCodeAt(0))){var c=this.octalToDecimal(o);n=c.octal||n,s+=String.fromCharCode(c.code)}else s+=o}else{if(i.Character.isLineTerminator(o.charCodeAt(0)))break;s+=o}}return""!==t&&(this.index=e,this.throwUnexpectedToken()),{type:8,value:s,octal:n,lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanTemplate=function(){var e="",t=!1,n=this.index,r="`"===this.source[n],s=!1,o=2;for(++this.index;!this.eof();){var a=this.source[this.index++];if("`"===a){o=1,s=!0,t=!0;break}if("$"===a){if("{"===this.source[this.index]){this.curlyStack.push("${"),++this.index,t=!0;break}e+=a}else if("\\"===a)if(a=this.source[this.index++],i.Character.isLineTerminator(a.charCodeAt(0)))++this.lineNumber,"\r"===a&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index;else switch(a){case"n":e+="\n";break;case"r":e+="\r";break;case"t":e+="\t";break;case"u":if("{"===this.source[this.index])++this.index,e+=this.scanUnicodeCodePointEscape();else{var h=this.index,c=this.scanHexEscape(a);null!==c?e+=c:(this.index=h,e+=a)}break;case"x":var l=this.scanHexEscape(a);null===l&&this.throwUnexpectedToken(u.Messages.InvalidHexEscapeSequence),e+=l;break;case"b":e+="\b";break;case"f":e+="\f";break;case"v":e+="\v";break;default:"0"===a?(i.Character.isDecimalDigit(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(u.Messages.TemplateOctalLiteral),e+="\0"):i.Character.isOctalDigit(a.charCodeAt(0))?this.throwUnexpectedToken(u.Messages.TemplateOctalLiteral):e+=a}else i.Character.isLineTerminator(a.charCodeAt(0))?(++this.lineNumber,"\r"===a&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index,e+="\n"):e+=a}return t||this.throwUnexpectedToken(),r||this.curlyStack.pop(),{type:10,value:this.source.slice(n+1,this.index-o),cooked:e,head:r,tail:s,lineNumber:this.lineNumber,lineStart:this.lineStart,start:n,end:this.index}},e.prototype.testRegExp=function(e,t){var n=e,r=this;t.indexOf("u")>=0&&(n=n.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g,function(e,t,n){var i=parseInt(t||n,16);return i>1114111&&r.throwUnexpectedToken(u.Messages.InvalidRegExp),i<=65535?String.fromCharCode(i):"￿"}).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"￿"));try{RegExp(n)}catch(e){this.throwUnexpectedToken(u.Messages.InvalidRegExp)}try{return new RegExp(e,t)}catch(e){return null}},e.prototype.scanRegExpBody=function(){var e=this.source[this.index];r.assert("/"===e,"Regular expression literal must start with a slash");for(var t=this.source[this.index++],n=!1,s=!1;!this.eof();)if(t+=e=this.source[this.index++],"\\"===e)e=this.source[this.index++],i.Character.isLineTerminator(e.charCodeAt(0))&&this.throwUnexpectedToken(u.Messages.UnterminatedRegExp),t+=e;else if(i.Character.isLineTerminator(e.charCodeAt(0)))this.throwUnexpectedToken(u.Messages.UnterminatedRegExp);else if(n)"]"===e&&(n=!1);else{if("/"===e){s=!0;break}"["===e&&(n=!0)}return s||this.throwUnexpectedToken(u.Messages.UnterminatedRegExp),t.substr(1,t.length-2)},e.prototype.scanRegExpFlags=function(){for(var e="";!this.eof();){var t=this.source[this.index];if(!i.Character.isIdentifierPart(t.charCodeAt(0)))break;if(++this.index,"\\"!==t||this.eof())e+=t,t;else if("u"===(t=this.source[this.index])){++this.index;var n=this.index,r=this.scanHexEscape("u");if(null!==r)for(e+=r,"\\u";n<this.index;++n)this.source[n];else this.index=n,e+="u","\\u";this.tolerateUnexpectedToken()}else"\\",this.tolerateUnexpectedToken()}return e},e.prototype.scanRegExp=function(){var e=this.index,t=this.scanRegExpBody(),n=this.scanRegExpFlags();return{type:9,value:"",pattern:t,flags:n,regex:this.testRegExp(t,n),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.lex=function(){if(this.eof())return{type:2,value:"",lineNumber:this.lineNumber,lineStart:this.lineStart,start:this.index,end:this.index};var e=this.source.charCodeAt(this.index);return i.Character.isIdentifierStart(e)?this.scanIdentifier():40===e||41===e||59===e?this.scanPunctuator():39===e||34===e?this.scanStringLiteral():46===e?i.Character.isDecimalDigit(this.source.charCodeAt(this.index+1))?this.scanNumericLiteral():this.scanPunctuator():i.Character.isDecimalDigit(e)?this.scanNumericLiteral():96===e||125===e&&"${"===this.curlyStack[this.curlyStack.length-1]?this.scanTemplate():e>=55296&&e<57343&&i.Character.isIdentifierStart(this.codePointAt(this.index))?this.scanIdentifier():this.scanPunctuator()},e}();t.Scanner=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TokenName={},t.TokenName[1]="Boolean",t.TokenName[2]="<end>",t.TokenName[3]="Identifier",t.TokenName[4]="Keyword",t.TokenName[5]="Null",t.TokenName[6]="Numeric",t.TokenName[7]="Punctuator",t.TokenName[8]="String",t.TokenName[9]="RegularExpression",t.TokenName[10]="Template"},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.XHTMLEntities={quot:'"',amp:"&",apos:"'",gt:">",nbsp:" ",iexcl:"¡",cent:"¢",pound:"£",curren:"¤",yen:"¥",brvbar:"¦",sect:"§",uml:"¨",copy:"©",ordf:"ª",laquo:"«",not:"¬",shy:"­",reg:"®",macr:"¯",deg:"°",plusmn:"±",sup2:"²",sup3:"³",acute:"´",micro:"µ",para:"¶",middot:"·",cedil:"¸",sup1:"¹",ordm:"º",raquo:"»",frac14:"¼",frac12:"½",frac34:"¾",iquest:"¿",Agrave:"À",Aacute:"Á",Acirc:"Â",Atilde:"Ã",Auml:"Ä",Aring:"Å",AElig:"Æ",Ccedil:"Ç",Egrave:"È",Eacute:"É",Ecirc:"Ê",Euml:"Ë",Igrave:"Ì",Iacute:"Í",Icirc:"Î",Iuml:"Ï",ETH:"Ð",Ntilde:"Ñ",Ograve:"Ò",Oacute:"Ó",Ocirc:"Ô",Otilde:"Õ",Ouml:"Ö",times:"×",Oslash:"Ø",Ugrave:"Ù",Uacute:"Ú",Ucirc:"Û",Uuml:"Ü",Yacute:"Ý",THORN:"Þ",szlig:"ß",agrave:"à",aacute:"á",acirc:"â",atilde:"ã",auml:"ä",aring:"å",aelig:"æ",ccedil:"ç",egrave:"è",eacute:"é",ecirc:"ê",euml:"ë",igrave:"ì",iacute:"í",icirc:"î",iuml:"ï",eth:"ð",ntilde:"ñ",ograve:"ò",oacute:"ó",ocirc:"ô",otilde:"õ",ouml:"ö",divide:"÷",oslash:"ø",ugrave:"ù",uacute:"ú",ucirc:"û",uuml:"ü",yacute:"ý",thorn:"þ",yuml:"ÿ",OElig:"Œ",oelig:"œ",Scaron:"Š",scaron:"š",Yuml:"Ÿ",fnof:"ƒ",circ:"ˆ",tilde:"˜",Alpha:"Α",Beta:"Β",Gamma:"Γ",Delta:"Δ",Epsilon:"Ε",Zeta:"Ζ",Eta:"Η",Theta:"Θ",Iota:"Ι",Kappa:"Κ",Lambda:"Λ",Mu:"Μ",Nu:"Ν",Xi:"Ξ",Omicron:"Ο",Pi:"Π",Rho:"Ρ",Sigma:"Σ",Tau:"Τ",Upsilon:"Υ",Phi:"Φ",Chi:"Χ",Psi:"Ψ",Omega:"Ω",alpha:"α",beta:"β",gamma:"γ",delta:"δ",epsilon:"ε",zeta:"ζ",eta:"η",theta:"θ",iota:"ι",kappa:"κ",lambda:"λ",mu:"μ",nu:"ν",xi:"ξ",omicron:"ο",pi:"π",rho:"ρ",sigmaf:"ς",sigma:"σ",tau:"τ",upsilon:"υ",phi:"φ",chi:"χ",psi:"ψ",omega:"ω",thetasym:"ϑ",upsih:"ϒ",piv:"ϖ",ensp:" ",emsp:" ",thinsp:" ",zwnj:"‌",zwj:"‍",lrm:"‎",rlm:"‏",ndash:"–",mdash:"—",lsquo:"‘",rsquo:"’",sbquo:"‚",ldquo:"“",rdquo:"”",bdquo:"„",dagger:"†",Dagger:"‡",bull:"•",hellip:"…",permil:"‰",prime:"′",Prime:"″",lsaquo:"‹",rsaquo:"›",oline:"‾",frasl:"⁄",euro:"€",image:"ℑ",weierp:"℘",real:"ℜ",trade:"™",alefsym:"ℵ",larr:"←",uarr:"↑",rarr:"→",darr:"↓",harr:"↔",crarr:"↵",lArr:"⇐",uArr:"⇑",rArr:"⇒",dArr:"⇓",hArr:"⇔",forall:"∀",part:"∂",exist:"∃",empty:"∅",nabla:"∇",isin:"∈",notin:"∉",ni:"∋",prod:"∏",sum:"∑",minus:"−",lowast:"∗",radic:"√",prop:"∝",infin:"∞",ang:"∠",and:"∧",or:"∨",cap:"∩",cup:"∪",int:"∫",there4:"∴",sim:"∼",cong:"≅",asymp:"≈",ne:"≠",equiv:"≡",le:"≤",ge:"≥",sub:"⊂",sup:"⊃",nsub:"⊄",sube:"⊆",supe:"⊇",oplus:"⊕",otimes:"⊗",perp:"⊥",sdot:"⋅",lceil:"⌈",rceil:"⌉",lfloor:"⌊",rfloor:"⌋",loz:"◊",spades:"♠",clubs:"♣",hearts:"♥",diams:"♦",lang:"⟨",rang:"⟩"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(10),i=n(12),u=n(13),s=function(){function e(){this.values=[],this.curly=this.paren=-1}return e.prototype.beforeFunctionExpression=function(e){return["(","{","[","in","typeof","instanceof","new","return","case","delete","throw","void","=","+=","-=","*=","**=","/=","%=","<<=",">>=",">>>=","&=","|=","^=",",","+","-","*","**","/","%","++","--","<<",">>",">>>","&","|","^","!","~","&&","||","?",":","===","==",">=","<=","<",">","!=","!=="].indexOf(e)>=0},e.prototype.isRegexStart=function(){var e=this.values[this.values.length-1],t=null!==e;switch(e){case"this":case"]":t=!1;break;case")":var n=this.values[this.paren-1];t="if"===n||"while"===n||"for"===n||"with"===n;break;case"}":if(t=!1,"function"===this.values[this.curly-3])t=!!(r=this.values[this.curly-4])&&!this.beforeFunctionExpression(r);else if("function"===this.values[this.curly-4]){var r;t=!(r=this.values[this.curly-5])||!this.beforeFunctionExpression(r)}}return t},e.prototype.push=function(e){7===e.type||4===e.type?("{"===e.value?this.curly=this.values.length:"("===e.value&&(this.paren=this.values.length),this.values.push(e.value)):this.values.push(null)},e}(),o=function(){function e(e,t){this.errorHandler=new r.ErrorHandler,this.errorHandler.tolerant=!!t&&("boolean"==typeof t.tolerant&&t.tolerant),this.scanner=new i.Scanner(e,this.errorHandler),this.scanner.trackComment=!!t&&("boolean"==typeof t.comment&&t.comment),this.trackRange=!!t&&("boolean"==typeof t.range&&t.range),this.trackLoc=!!t&&("boolean"==typeof t.loc&&t.loc),this.buffer=[],this.reader=new s}return e.prototype.errors=function(){return this.errorHandler.errors},e.prototype.getNextToken=function(){if(0===this.buffer.length){var e=this.scanner.scanComments();if(this.scanner.trackComment)for(var t=0;t<e.length;++t){var n=e[t],r=this.scanner.source.slice(n.slice[0],n.slice[1]),i={type:n.multiLine?"BlockComment":"LineComment",value:r};this.trackRange&&(i.range=n.range),this.trackLoc&&(i.loc=n.loc),this.buffer.push(i)}if(!this.scanner.eof()){var s=void 0;this.trackLoc&&(s={start:{line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart},end:{}});var o="/"===this.scanner.source[this.scanner.index]&&this.reader.isRegexStart()?this.scanner.scanRegExp():this.scanner.lex();this.reader.push(o);var a={type:u.TokenName[o.type],value:this.scanner.source.slice(o.start,o.end)};if(this.trackRange&&(a.range=[o.start,o.end]),this.trackLoc&&(s.end={line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart},a.loc=s),9===o.type){var h=o.pattern,c=o.flags;a.regex={pattern:h,flags:c}}this.buffer.push(a)}}return this.buffer.shift()},e}();t.Tokenizer=o}])},e.exports=r()},function(e,t,n){"use strict";function r(e,t){var n,r,i,u,s,o,a=[e];for(n=0;n<a.length;n+=1)for(i in t(s=a[n]),s)if((o=s[i])instanceof Array)for(r=0,u=o.length;r<u;r+=1)a.push(o[r]);else null!=o&&"string"==typeof o.type&&a.push(o)}r.walk=r,r.walkAddParent=function(e,t){var n,r,i,u,s,o,a,h=[e];for(n=0;n<h.length;n+=1)for(i in t(s=h[n]),s)if("parent"!==i)if((o=s[i])instanceof Array)for(r=0,u=o.length;r<u;r+=1)(a=o[r]).parent=s,h.push(a);else null!=o&&"string"==typeof o.type&&(o.parent=s,h.push(o))},e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3);t.arrays=r;var i=n(35);t.Bag=i.default;var u=n(36);t.BSTree=u.default;var s=n(11);t.BSTreeKV=s.default;var o=n(1);t.Dictionary=o.default;var a=n(13);t.Heap=a.default;var h=n(37);t.LinkedDictionary=h.default;var c=n(4);t.LinkedList=c.default;var l=n(38);t.MultiDictionary=l.default;var p=n(14);t.FactoryDictionary=p.default;var d=n(14);t.DefaultDictionary=d.default;var f=n(12);t.Queue=f.default;var D=n(39);t.PriorityQueue=D.default;var m=n(10);t.Set=m.default;var A=n(40);t.Stack=A.default;var E=n(41);t.MultiRootTree=E.default;var C=n(0);t.util=C},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(1),u=n(10),s=function(){function e(e){this.toStrF=e||r.defaultToString,this.dictionary=new i.default(this.toStrF),this.nElements=0}return e.prototype.add=function(e,t){if(void 0===t&&(t=1),r.isUndefined(e)||t<=0)return!1;if(this.contains(e))this.dictionary.getValue(e).copies+=t;else{var n={value:e,copies:t};this.dictionary.setValue(e,n)}return this.nElements+=t,!0},e.prototype.count=function(e){return this.contains(e)?this.dictionary.getValue(e).copies:0},e.prototype.contains=function(e){return this.dictionary.containsKey(e)},e.prototype.remove=function(e,t){if(void 0===t&&(t=1),r.isUndefined(e)||t<=0)return!1;if(this.contains(e)){var n=this.dictionary.getValue(e);return t>n.copies?this.nElements-=n.copies:this.nElements-=t,n.copies-=t,n.copies<=0&&this.dictionary.remove(e),!0}return!1},e.prototype.toArray=function(){for(var e=[],t=0,n=this.dictionary.values();t<n.length;t++)for(var r=n[t],i=r.value,u=r.copies,s=0;s<u;s++)e.push(i);return e},e.prototype.toSet=function(){for(var e=new u.default(this.toStrF),t=0,n=this.dictionary.values();t<n.length;t++){var r=n[t].value;e.add(r)}return e},e.prototype.forEach=function(e){this.dictionary.forEach(function(t,n){for(var r=n.value,i=n.copies,u=0;u<i;u++)if(!1===e(r))return!1;return!0})},e.prototype.size=function(){return this.nElements},e.prototype.isEmpty=function(){return 0===this.nElements},e.prototype.clear=function(){this.nElements=0,this.dictionary.clear()},e}();t.default=s},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t}(n(11).default);t.default=u},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var u=n(1),s=n(0),o=function(){function e(e,t){this.key=e,this.value=t}return e.prototype.unlink=function(){this.prev.next=this.next,this.next.prev=this.prev},e}(),a=function(){function e(){this.key=null,this.value=null}return e.prototype.unlink=function(){this.prev.next=this.next,this.next.prev=this.prev},e}();var h=function(e){function t(t){var n=e.call(this,t)||this;return n.head=new a,n.tail=new a,n.head.next=n.tail,n.tail.prev=n.head,n}return i(t,e),t.prototype.appendToTail=function(e){var t=this.tail.prev;t.next=e,e.prev=t,e.next=this.tail,this.tail.prev=e},t.prototype.getLinkedDictionaryPair=function(e){if(!s.isUndefined(e)){var t="$"+this.toStr(e);return this.table[t]}},t.prototype.getValue=function(e){var t=this.getLinkedDictionaryPair(e);if(!s.isUndefined(t))return t.value},t.prototype.remove=function(t){var n=this.getLinkedDictionaryPair(t);if(!s.isUndefined(n))return e.prototype.remove.call(this,t),n.unlink(),n.value},t.prototype.clear=function(){e.prototype.clear.call(this),this.head.next=this.tail,this.tail.prev=this.head},t.prototype.replace=function(e,t){var n="$"+this.toStr(t.key);t.next=e.next,t.prev=e.prev,this.remove(e.key),t.prev.next=t,t.next.prev=t,this.table[n]=t,++this.nElements},t.prototype.setValue=function(e,t){if(!s.isUndefined(e)&&!s.isUndefined(t)){var n=this.getLinkedDictionaryPair(e),r=new o(e,t),i="$"+this.toStr(e);return s.isUndefined(n)?(this.appendToTail(r),this.table[i]=r,void++this.nElements):(this.replace(n,r),n.value)}},t.prototype.keys=function(){var e=[];return this.forEach(function(t,n){e.push(t)}),e},t.prototype.values=function(){var e=[];return this.forEach(function(t,n){e.push(n)}),e},t.prototype.forEach=function(e){for(var t=this.head.next;null!==t.next;){if(!1===e(t.key,t.value))return;t=t.next}},t}(u.default);t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(1),u=n(3),s=function(){function e(e,t,n){void 0===n&&(n=!1),this.dict=new i.default(e),this.equalsF=t||r.defaultEquals,this.allowDuplicate=n}return e.prototype.getValue=function(e){var t=this.dict.getValue(e);return r.isUndefined(t)?[]:u.copy(t)},e.prototype.setValue=function(e,t){if(r.isUndefined(e)||r.isUndefined(t))return!1;var n=this.dict.getValue(e);return r.isUndefined(n)?(this.dict.setValue(e,[t]),!0):!(!this.allowDuplicate&&u.contains(n,t,this.equalsF))&&(n.push(t),!0)},e.prototype.remove=function(e,t){if(r.isUndefined(t)){var n=this.dict.remove(e);return!r.isUndefined(n)}var i=this.dict.getValue(e);return!(r.isUndefined(i)||!u.remove(i,t,this.equalsF))&&(0===i.length&&this.dict.remove(e),!0)},e.prototype.keys=function(){return this.dict.keys()},e.prototype.values=function(){for(var e=[],t=0,n=this.dict.values();t<n.length;t++)for(var r=0,i=n[t];r<i.length;r++){var u=i[r];e.push(u)}return e},e.prototype.containsKey=function(e){return this.dict.containsKey(e)},e.prototype.clear=function(){this.dict.clear()},e.prototype.size=function(){return this.dict.size()},e.prototype.isEmpty=function(){return this.dict.isEmpty()},e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(13),u=function(){function e(e){this.heap=new i.default(r.reverseCompareFunction(e))}return e.prototype.enqueue=function(e){return this.heap.add(e)},e.prototype.add=function(e){return this.heap.add(e)},e.prototype.dequeue=function(){if(0!==this.heap.size()){var e=this.heap.peek();return this.heap.removeRoot(),e}},e.prototype.peek=function(){return this.heap.peek()},e.prototype.contains=function(e){return this.heap.contains(e)},e.prototype.isEmpty=function(){return this.heap.isEmpty()},e.prototype.size=function(){return this.heap.size()},e.prototype.clear=function(){this.heap.clear()},e.prototype.forEach=function(e){this.heap.forEach(e)},e}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),i=function(){function e(){this.list=new r.default}return e.prototype.push=function(e){return this.list.add(e,0)},e.prototype.add=function(e){return this.list.add(e,0)},e.prototype.pop=function(){return this.list.removeElementAtIndex(0)},e.prototype.peek=function(){return this.list.first()},e.prototype.size=function(){return this.list.size()},e.prototype.contains=function(e,t){return this.list.contains(e,t)},e.prototype.isEmpty=function(){return this.list.isEmpty()},e.prototype.clear=function(){this.list.clear()},e.prototype.forEach=function(e){this.list.forEach(e)},e}();t.default=i},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.BEFORE=0]="BEFORE",e[e.AFTER=1]="AFTER",e[e.INSIDE_AT_END=2]="INSIDE_AT_END",e[e.INSIDE_AT_START=3]="INSIDE_AT_START"}(r||(r={}));var i=function(){function e(e,t){void 0===e&&(e=[]),void 0===t&&(t={}),this.rootIds=e,this.nodes=t,this.initRootIds(),this.initNodes()}return e.prototype.initRootIds=function(){for(var e=0,t=this.rootIds;e<t.length;e++){var n=t[e];this.createEmptyNodeIfNotExist(n)}},e.prototype.initNodes=function(){for(var e in this.nodes)if(this.nodes.hasOwnProperty(e))for(var t=0,n=this.nodes[e];t<n.length;t++){var r=n[t];this.createEmptyNodeIfNotExist(r)}},e.prototype.createEmptyNodeIfNotExist=function(e){this.nodes[e]||(this.nodes[e]=[])},e.prototype.getRootIds=function(){return this.rootIds.slice()},e.prototype.getNodes=function(){var e={};for(var t in this.nodes)this.nodes.hasOwnProperty(t)&&(e[t]=this.nodes[t].slice());return e},e.prototype.getObject=function(){return{rootIds:this.getRootIds(),nodes:this.getNodes()}},e.prototype.toObject=function(){return this.getObject()},e.prototype.flatten=function(){for(var e=this,t=[],n=0;n<this.rootIds.length;n++){var r=this.rootIds[n];t.push({id:r,level:0,hasParent:!1,childrenCount:0}),a(r,this.nodes,t,0)}for(var i=0,u=t;i<u.length;i++){var s=u[i];s.childrenCount=o(s.id)}return t;function o(t){return e.nodes[t]?e.nodes[t].length:0}function a(e,t,n,r){if(void 0===r&&(r=0),e&&t&&n&&t[e]){r++;for(var i=t[e],u=0;u<i.length;u++){var s=i[u];n.push({id:s,level:r,hasParent:!0}),a(s,t,n,r)}r--}}},e.prototype.moveIdBeforeId=function(e,t){return this.moveId(e,t,r.BEFORE)},e.prototype.moveIdAfterId=function(e,t){return this.moveId(e,t,r.AFTER)},e.prototype.moveIdIntoId=function(e,t,n){return void 0===n&&(n=!0),n?this.moveId(e,t,r.INSIDE_AT_START):this.moveId(e,t,r.INSIDE_AT_END)},e.prototype.swapRootIdWithRootId=function(e,t){var n=this.findRootId(e),r=this.findRootId(t);this.swapRootPositionWithRootPosition(n,r)},e.prototype.swapRootPositionWithRootPosition=function(e,t){var n=this.rootIds[t];this.rootIds[t]=this.rootIds[e],this.rootIds[e]=n},e.prototype.deleteId=function(e){this.rootDeleteId(e),this.nodeAndSubNodesDelete(e),this.nodeRefrencesDelete(e)},e.prototype.insertIdBeforeId=function(e,t){var n=this.findRootId(e);for(var r in n>-1&&this.insertIdIntoRoot(t,n),this.nodes)if(this.nodes.hasOwnProperty(r)){var i=this.findNodeId(r,e);i>-1&&this.insertIdIntoNode(r,t,i)}},e.prototype.insertIdAfterId=function(e,t){var n=this.findRootId(e);for(var r in n>-1&&this.insertIdIntoRoot(t,n+1),this.nodes)if(this.nodes.hasOwnProperty(r)){var i=this.findNodeId(r,e);i>-1&&this.insertIdIntoNode(r,t,i+1)}},e.prototype.insertIdIntoId=function(e,t){this.nodeInsertAtEnd(e,t),this.nodes[t]=[]},e.prototype.insertIdIntoRoot=function(e,t){if(void 0===t)this.rootInsertAtEnd(e);else if(t<0){var n=this.rootIds.length;this.rootIds.splice(t+n+1,0,e)}else this.rootIds.splice(t,0,e);this.nodes[e]=this.nodes[e]||[]},e.prototype.insertIdIntoNode=function(e,t,n){if(this.nodes[e]=this.nodes[e]||[],this.nodes[t]=this.nodes[t]||[],void 0===n)this.nodeInsertAtEnd(e,t);else if(n<0){var r=this.nodes[e].length;this.nodes[e].splice(n+r+1,0,t)}else this.nodes[e].splice(n,0,t)},e.prototype.moveId=function(e,t,n){var i=e,u=this.findRootId(i);for(var s in this.nodes[t]&&t,this.nodes)if(this.nodes.hasOwnProperty(s)){this.findNodeId(s,t);break}var o=t,a=this.findRootId(o);for(var s in this.nodes[t]&&t,this.nodes)if(this.nodes.hasOwnProperty(s)){this.findNodeId(s,t);break}if(u>-1)if(a>-1)switch(this.rootDelete(u),a>u&&a--,n){case r.BEFORE:this.insertIdIntoRoot(i,a);break;case r.AFTER:this.insertIdIntoRoot(i,a+1);break;case r.INSIDE_AT_START:this.nodeInsertAtStart(o,i);break;case r.INSIDE_AT_END:this.nodeInsertAtEnd(o,i)}else for(var s in this.rootDelete(u),this.nodes){if(this.nodes.hasOwnProperty(s))if((h=this.findNodeId(s,o))>-1){switch(n){case r.BEFORE:this.insertIdIntoNode(s,i,h);break;case r.AFTER:this.insertIdIntoNode(s,i,h+1);break;case r.INSIDE_AT_START:this.nodeInsertAtStart(o,i);break;case r.INSIDE_AT_END:this.nodeInsertAtEnd(o,i)}break}}else if(a>-1){for(var s in this.nodes){if(this.nodes.hasOwnProperty(s))if((h=this.findNodeId(s,i))>-1){this.nodeDeleteAtIndex(s,h);break}}switch(n){case r.BEFORE:this.insertIdIntoRoot(i,a);break;case r.AFTER:this.insertIdIntoRoot(i,a+1);break;case r.INSIDE_AT_START:this.nodeInsertAtStart(o,i);break;case r.INSIDE_AT_END:this.nodeInsertAtEnd(o,i)}}else{for(var s in this.nodes){if(this.nodes.hasOwnProperty(s))if((h=this.findNodeId(s,i))>-1){this.nodeDeleteAtIndex(s,h);break}}for(var s in this.nodes){var h;if(this.nodes.hasOwnProperty(s))if((h=this.findNodeId(s,o))>-1){switch(n){case r.BEFORE:this.insertIdIntoNode(s,i,h);break;case r.AFTER:this.insertIdIntoNode(s,i,h+1);break;case r.INSIDE_AT_START:this.nodeInsertAtStart(o,i);break;case r.INSIDE_AT_END:this.nodeInsertAtEnd(o,i)}break}}}},e.prototype.swapArrayElements=function(e,t,n){var r=e[t];return e[t]=e[n],e[n]=r,e},e.prototype.rootDeleteId=function(e){var t=this.findRootId(e);t>-1&&this.rootDelete(t)},e.prototype.nodeAndSubNodesDelete=function(e){for(var t=[],n=0;n<this.nodes[e].length;n++){var r=this.nodes[e][n];this.nodeAndSubNodesDelete(r),t.push(e)}this.nodeDelete(e);for(n=0;n<t.length;n++)this.nodeDelete(t[n])},e.prototype.nodeRefrencesDelete=function(e){for(var t in this.nodes)if(this.nodes.hasOwnProperty(t))for(var n=0;n<this.nodes[t].length;n++){this.nodes[t][n]===e&&this.nodeDeleteAtIndex(t,n)}},e.prototype.nodeDelete=function(e){delete this.nodes[e]},e.prototype.findRootId=function(e){return this.rootIds.indexOf(e)},e.prototype.findNodeId=function(e,t){return this.nodes[e].indexOf(t)},e.prototype.findNode=function(e){return this.nodes[e]},e.prototype.nodeInsertAtStart=function(e,t){this.nodes[e].unshift(t)},e.prototype.nodeInsertAtEnd=function(e,t){this.nodes[e].push(t)},e.prototype.rootDelete=function(e){this.rootIds.splice(e,1)},e.prototype.nodeDeleteAtIndex=function(e,t){this.nodes[e].splice(t,1)},e.prototype.rootInsertAtStart=function(e){this.rootIds.unshift(e)},e.prototype.rootInsertAtEnd=function(e){this.rootIds.push(e)},e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(43),i=function(){function e(e,t,n,i,u){this.colonne=e,this.ligne=t,this.frame=n,this.contexte=i,this.codeStatement=u,this.evalScope=new r.EvalScope}return e.prototype.eval=function(e){return this.evalScope.globalEval(e)},e}();t.ProgremState=i;var u=function(){function e(e,t){this.config=e,this.code=t,this.codeIterator=null,this.codeExecutionListeners=[],this.gridChangeListeners=[],this.lineChangeListeners=[],this.frameChangeListeners=[],this.state=this.reset()}return e.prototype.subscribeCodeExecution=function(e){this.codeExecutionListeners.push(e)},e.prototype.subscribeGridChange=function(e){this.gridChangeListeners.push(e)},e.prototype.subscribeLineChange=function(e){this.lineChangeListeners.push(e)},e.prototype.subscribeFrameChange=function(e){this.frameChangeListeners.push(e)},e.prototype.reset=function(){var e=initialiserProgrem(this.config.colonnes,this.config.lignes);return console.log("Loaded initial contexte: ",e),new i(0,0,0,e,null)},e.prototype.current=function(){return this.state},e.prototype.next=function(){var e=this;if(!this.state)throw new Error("Inconsistent Progrem state !");if(null==this.codeIterator&&(this.codeIterator=this.code.iterator(this.state)),this.codeIterator.hasNext()){var t=this.codeIterator.executeNext(),n=new i(this.state.colonne,this.state.ligne,this.state.frame,this.state.contexte,t);return this.state=n,this.codeExecutionListeners.map(function(e){return e.fireCodeExecution(n)}),n}var r=!1,u=!1,s=this.state.colonne,o=this.state.ligne,a=this.state.frame;++s>=this.config.colonnes&&(s=0,o++,r=!0),o>this.config.lignes&&(o=0,a++,u=!0),a>this.config.frames&&(a=0);var h=new i(s,o,a,this.state.contexte,null);return this.gridChangeListeners.map(function(t){return t.fireBoxChange(e.state)}),r&&this.lineChangeListeners.map(function(t){return t.fireLineChange(e.state)}),u&&this.frameChangeListeners.map(function(t){return t.fireFrameChange(e.state)}),this.state=h,this.codeIterator=this.code.iterator(h),h},e}();!function(e){e.buildProgremScheduler=function(e,t){return new u(e,t)}}(t.SchedulingService||(t.SchedulingService={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(){this.globalEval=function(e,t){try{return(0,eval)("Object")===e}catch(e){return!1}}(Object)?function(e){return(0,eval)(e)}:void 0!==window.execScript?function(e){return window.execScript(e)}:function(e){throw new Error("No global eval available !")}}}();t.EvalScope=r},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(5)),u=n(34),s=function(){function e(e,t){this.progremCode=e,this.scheduler=t,this.progremCodeLines=[],this.attachedElement=null,this.mapping=new u.Dictionary(function(e){return i.generate(e)}),t.subscribeCodeExecution(this),this.buildHtmlTree2()}return e.prototype.attach=function(e){this.attachedElement=e,e&&this.progremCodeLines.map(function(t){e.appendChild(t)})},e.prototype.fireCodeExecution=function(e){if(null===e.codeStatement)throw new Error("Received a null statement !");this.mapping.forEach(function(e,t){return t.classList.remove("highlight")});var t=e.codeStatement.node,n=this.mapping.getValue(t);if(!n)throw new Error("Unable to found a HTML element mapped for received statement !");n.classList.add("highlight")},e.prototype.appendCodeLine=function(e,t){var n=document.createElement("pre");return n.classList.add("padding-"+t),e.appendChild(n),n},e.prototype.appendSpan=function(e,t){var n=document.createElement("span");return t.forEach(function(e){return n.classList.add(e)}),e.appendChild(n),n},e.prototype.unstackAst=function(e,t,n){var r=this;t.forEach(function(t){if(!t)throw new Error("Should not be able to shift a null node !");switch(t.type){case"BlockStatement":var u=t;r.unstackAst(e,u.body,n+1);break;case"FunctionDeclaration":var s=t,o=r.appendCodeLine(e,n);s.id?o.innerHTML="function "+s.id.name+" () {":o.innerHTML="function () {",r.unstackAst(e,s.body.body,n+1);var a=r.appendCodeLine(e,n);a.innerHTML="}";break;case"IfStatement":var h=t;o=r.appendCodeLine(e,n),r.mapping.setValue(h.test,o),o.innerHTML="if ( ",r.unstackAst(o,[h.test],0),o.innerHTML+=" ) {",r.unstackAst(e,[h.consequent],n);var c=r.appendCodeLine(e,n);h.alternate&&(c.innerHTML="} else {",r.unstackAst(e,[h.alternate],n)),(a=r.appendCodeLine(e,n)).innerHTML="}";break;case"VariableDeclaration":var l=t,p=r.appendCodeLine(e,n);r.mapping.setValue(t,p),p.innerHTML=l.kind+" ",r.unstackAst(p,l.declarations,0);break;case"VariableDeclarator":var d=t,f=r.appendSpan(e,["varId"]);switch(d.id.type){case"Identifier":if(f.innerHTML=d.id.name,d.init){e.innerHTML+=" = ";var D=r.appendSpan(e,["varInit"]);r.unstackAst(D,[d.init],0)}e.innerHTML+=";"}break;case"AssignmentExpression":var m=t,A=r.appendSpan(e,["varId"]);r.unstackAst(A,[m.left],0),e.innerHTML+=" = ";var E=r.appendSpan(e,["varInit"]);r.unstackAst(E,[m.right],0),e.innerHTML+=";";break;case"BinaryExpression":var C=t;A=r.appendSpan(e,["leftBin"]),r.unstackAst(A,[C.left],0),e.innerHTML+=" ",e.innerHTML+=C.operator,e.innerHTML+=" ",E=r.appendSpan(e,["rightBin"]),r.unstackAst(E,[C.right],0);break;case"ExpressionStatement":var g=t;p=r.appendCodeLine(e,n),r.mapping.setValue(t,p),r.unstackAst(p,[g.expression],0);break;case"ReturnStatement":(p=r.appendCodeLine(e,n)).innerHTML=i.generate(t),r.mapping.setValue(t,p);break;default:console.log("default:",t),(p=r.appendSpan(e,[])).textContent=i.generate(t),p.classList.add("nsy-"+t.type),r.mapping.setValue(t,p)}})},e.prototype.buildHtmlTree2=function(){var e=document.createElement("div");this.progremCodeLines.push(e),this.unstackAst(e,[this.progremCode.colorerProgremFunction()],0)},e.prototype.buildHtmlTree=function(){var e=document.createElement("div"),t=[this.progremCode.colorerProgremFunction()],n=0;do{var r,u=t.shift();if(!u)throw new Error("Should not be able to shift a null node !");switch(u.type){case"BlockStatement":n++,u.body.slice(0).reverse().map(function(e){return t.unshift(e)});break;case"EndBlockStatement":n--,(r=this.appendCodeLine(e,n)).innerHTML="}";break;case"FunctionDeclaration":var s=u;r=this.appendCodeLine(e,n),s.id?r.innerHTML="function "+s.id.name+" () {":r.innerHTML="function () {",t.unshift({type:"EndBlockStatement"}),t.unshift(s.body);break;case"IfStatement":var o=u;(r=this.appendCodeLine(e,n)).innerHTML="if ( <span>"+i.generate(o.test)+"</span> ) {",this.mapping.setValue(o.test,r),o.alternate&&(t.unshift({type:"EndBlockStatement"}),t.unshift(o.alternate)),t.unshift({type:"ElseBlockStatement"}),t.unshift(o.consequent);break;case"ElseBlockStatement":n--,(r=this.appendCodeLine(e,n)).innerHTML="} else {";break;default:(r=this.appendCodeLine(e,n)).textContent=i.generate(u),r.classList.add("statement"),this.mapping.setValue(u,r)}}while(t.length>0)},e.prototype.clear=function(){throw new Error("Method not implemented.")},e}();t.BasicHtmlEsprimaProgremInspector=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){this.screenConfig=e,this.progremConfig=t,this.attachedElement=null;var n=document.querySelector(".progrem");if(!n)throw new Error("Unable to find .progrem Canvas element !");this.canvas=n;var r=this.canvas.getContext("2d");if(!r)throw new Error("Unable to get 2D Canvas context !");this.ctx=r}return e.prototype.attachToCanvas=function(e){this.canvas=e,e.width=this.progremConfig.colonnes*this.screenConfig.boxSize,e.height=this.progremConfig.colonnes*this.screenConfig.boxSize;var t=this.canvas.getContext("2d");if(!t)throw new Error("Unable to get 2D Canvas context !");this.ctx=t},e.prototype.clear=function(){var e=this.screenConfig.boxSize*this.progremConfig.colonnes,t=this.screenConfig.boxSize*this.progremConfig.lignes;this.ctx.clearRect(0,0,e,t)},e.prototype.attach=function(e){var t=this;if(this.attachedElement=e,e){if("CANVAS"===e.nodeName)return void this.attachToCanvas(e);e.childNodes.forEach(function(n){"CANVAS"!==n.nodeName||t.attachToCanvas(e)});var n=document.createElement("canvas");this.attachToCanvas(n),e.appendChild(n)}},e.prototype.fireBoxChange=function(e){console.log("grid change: ",e);var t=this.screenConfig.boxSize,n=e.colonne,r=e.ligne,i=colorerProgrem(n,r,e.contexte);i&&(this.ctx.fillStyle=i,this.ctx.fillRect(n*t,r*t,t,t))},e}();t.BasicCanvasProgremGrid=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e){this.boxSize=e}}();t.ScreenConfig=r;var i=function(){function e(){}return e.prototype.getScreenFrame=function(){},e}();t.ScreenService=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,